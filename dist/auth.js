window.authCheckResult=function(e){return console.log("🔐 [SecureAuth] authCheckResult called with:",e),e},window.SecureFirebaseAuth=function(){const e={show:function(e,t="default"){console.log(`🔔 [LOGIN-ALERT] Showing ${t} alert: ${e}`);let i=document.querySelector(".login-alert");i?console.log("🔔 [LOGIN-ALERT] Reusing existing alert element"):(console.log("🔔 [LOGIN-ALERT] Creating new alert element"),i=document.createElement("div"),i.className="login-alert",document.body.appendChild(i)),i.className="login-alert","success"===t?i.classList.add("success"):"error"===t&&i.classList.add("error"),i.innerHTML=`\n                <div class="login-alert-message">\n                    <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n                        ${"success"===t?'<path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/><path d="M7.5 12l3 3 6-6"/>':"error"===t?'<circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line>':'<circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line>'}\n                    </svg>\n                    <span>${e}</span>\n                </div>\n                <div class="login-alert-actions">\n                    <button>Dismiss</button>\n                </div>\n            `;const s=i.querySelector("button");s&&s.addEventListener("click",(()=>{this.hide()})),setTimeout((()=>{console.log("🔔 [LOGIN-ALERT] Adding visible class"),i.classList.add("visible")}),10),setTimeout((()=>{this.hide()}),5e3)},hide:function(){console.log("🔔 [LOGIN-ALERT] Hiding alert");const e=document.querySelector(".login-alert");e&&(e.classList.remove("visible"),setTimeout((()=>{e.parentNode&&(e.parentNode.removeChild(e),console.log("🔔 [LOGIN-ALERT] Alert removed from DOM"))}),300))}},t={app:null,auth:null,db:null,isInitialized:!1,currentUser:null,websiteId:null,websiteUrl:null,setCurrentUser:function(e){this.currentUser=e,console.log("🔐 [SecureAuth] Current user set:",e.email),this.getWebsiteInfo().then((e=>{console.log("🔐 [SecureAuth] Website info loaded after setting user:",e),this.registerSiteWithUser(e)}))},initialize:async function(){if(this.isInitialized)return!0;console.log("🔐 [SecureAuth] Initializing Firebase authentication service");try{const{initializeApp:e}=await import("https://www.gstatic.com/firebasejs/11.5.0/firebase-app.js"),{getAuth:t,onAuthStateChanged:i}=await import("https://www.gstatic.com/firebasejs/11.5.0/firebase-auth.js"),{getDatabase:s,ref:n,get:r,set:a,serverTimestamp:o}=await import("https://www.gstatic.com/firebasejs/11.5.0/firebase-database.js"),l={apiKey:"AIzaSyBEmTwE1DWjj4rGEV6UDGIhxVy4oZ5lqNg",authDomain:"my-squarehero-hub.firebaseapp.com",databaseURL:"https://my-squarehero-hub-default-rtdb.firebaseio.com",projectId:"my-squarehero-hub",storageBucket:"my-squarehero-hub.firebasestorage.app",messagingSenderId:"233555790724",appId:"1:233555790724:web:062d5a4b5d38f7445b2bd1",measurementId:"G-YEMQV45TPL"};console.log("🔐 [SecureAuth] Loading Firebase modules and connecting"),this.app=e(l),this.auth=t(this.app),this.db=s(this.app),this.dbFunctions={ref:n,get:r,set:a,serverTimestamp:o},i(this.auth,(e=>{e?(this.currentUser=e,console.log("🔐 [SecureAuth] User authenticated via onAuthStateChanged:",e.email),this.getWebsiteInfo().then((e=>{console.log("🔐 [SecureAuth] Website info loaded after authentication:",e),this.registerSiteWithUser(e),window.location.pathname.includes("dashboard.html")&&(console.log("🔐 [SecureAuth] On dashboard page, checking if dashboard needs initialization"),window.Dashboard&&"function"==typeof window.Dashboard.init&&(window.dashboardInitialized?console.log("🔐 [SecureAuth] Dashboard already initialized, skipping reinitialization"):(console.log("🔐 [SecureAuth] Dashboard not initialized yet, initializing now"),window.Dashboard.init())))}))):(this.currentUser=null,console.log("🔐 [SecureAuth] No user authenticated, redirecting to login"),window.location.pathname.includes("dashboard.html")&&(window.location.href="login.html"))})),console.log("🔐 [SecureAuth] Firebase core initialized:",{app:!!this.app,auth:!!this.auth,db:!!this.db});const c=await this.getWebsiteInfo();return console.log("🔐 [SecureAuth] Website info loaded during initialization:",c),"localhost"!==window.location.hostname&&"127.0.0.1"!==window.location.hostname||(this.internalUrl="local-development-site",console.log("🔐 [SecureAuth] Local development detected, standardizing internal URL to:",this.internalUrl)),this.isInitialized=!0,console.log("🔐 [SecureAuth] Firebase initialized successfully"),!0}catch(e){return console.error("🔐 [SecureAuth] Error initializing Firebase:",e),!1}},getWebsiteInfo:async function(){console.log("🔐 [SecureAuth] Getting website information");try{if("localhost"===window.location.hostname||"127.0.0.1"===window.location.hostname){console.log("🔐 [SecureAuth] Local development detected, using local test file");try{const e=await fetch("/squarespace.json");if(!e.ok)throw new Error(`Failed to load local test file: ${e.status}`);const t=await e.json();console.log("🔐 [SecureAuth] Loaded data from local test file:",t);const i=t.website?.id||"local-dev-site",s="local-development-site";return localStorage.setItem("squarehero_website_id",i),localStorage.setItem("squarehero_internal_url",s),this.websiteId=i,this.websiteUrl=window.location.origin,this.internalUrl=s,console.log("🔐 [SecureAuth] Using local development site info:"),console.log("- Website ID:",i),console.log("- Internal URL:",this.internalUrl),{websiteId:this.websiteId,websiteUrl:this.websiteUrl,internalUrl:this.internalUrl}}catch(e){return console.warn("🔐 [SecureAuth] Error loading local test file:",e),console.log("🔐 [SecureAuth] Falling back to development defaults"),this.websiteId="local-dev-site",this.websiteUrl=window.location.origin,this.internalUrl="local-development-site",{websiteId:this.websiteId,websiteUrl:this.websiteUrl,internalUrl:this.internalUrl}}}const e=window.location.href,t=e.includes("?")?`${e}&format=json`:`${e}?format=json`;console.log("🔐 [SecureAuth] Fetching Squarespace data from:",t);const i=await fetch(t,{credentials:"include",headers:{Accept:"application/json"}}),s=i.headers.get("content-type");if(!s||!s.includes("application/json"))throw console.warn("🔐 [SecureAuth] Response is not JSON:",s),new Error("Invalid response format - expected JSON but got: "+s);if(!i.ok)throw console.error("🔐 [SecureAuth] Fetch response not OK:",i.status,i.statusText),new Error(`Failed to fetch Squarespace site data: ${i.status}`);const n=await i.json();console.log("🔐 [SecureAuth] Raw Squarespace data:",n);const r=n.website?.id,a=n.website?.internalUrl||window.location.hostname;if(console.log("🔐 [SecureAuth] Extracted IDs:",{websiteId:r||"MISSING",internalUrl:a||"MISSING"}),!r)throw console.error("🔐 [SecureAuth] Website ID not found in data!"),new Error("Website ID not found in Squarespace data");return localStorage.setItem("squarehero_website_id",r),localStorage.setItem("squarehero_internal_url",a),this.websiteId=r,this.websiteUrl=window.location.origin,this.internalUrl=a,console.log("🔐 [SecureAuth] Website information established:"),console.log("- Website ID:",r),console.log("- Internal URL:",a),{websiteId:this.websiteId,websiteUrl:this.websiteUrl,internalUrl:this.internalUrl}}catch(e){console.error("🔐 [SecureAuth] Error getting Squarespace website info:",e);const t=localStorage.getItem("squarehero_website_id"),i=localStorage.getItem("squarehero_internal_url");return t?(console.log("🔐 [SecureAuth] Using stored website info from localStorage"),this.websiteId=t,this.websiteUrl=window.location.origin,this.internalUrl=i||window.location.hostname,console.log("🔐 [SecureAuth] Using stored website info:",{websiteId:this.websiteId,internalUrl:this.internalUrl}),{websiteId:this.websiteId,websiteUrl:this.websiteUrl,internalUrl:this.internalUrl}):(console.log("🔐 [SecureAuth] Using fallback site information after error"),this.websiteId="error-recovery-site",this.websiteUrl=window.location.origin,this.internalUrl="error-recovery-site",{websiteId:this.websiteId,websiteUrl:this.websiteUrl,internalUrl:this.internalUrl})}},getSafeFirebaseKey:function(e){return e.replace(/[\\.#$\/\[\]]/g,"-")},registerSiteWithUser:async function(e){if(!this.currentUser)return console.warn("🔐 [SecureAuth] Cannot register site - no authenticated user"),!1;if(!this.websiteId)return console.warn("🔐 [SecureAuth] Cannot register site - no website ID"),!1;try{const{ref:e,get:t,set:i,serverTimestamp:s}=this.dbFunctions,n=this.currentUser.email,r=this.getSafeFirebaseKey(n),a=this.internalUrl||window.location.hostname,o=this.getSafeFirebaseKey(a),l=e(this.db,`users/${r}/sites/${o}`);return(await t(l)).exists()?(console.log("🔐 [SecureAuth] Site already registered with user, updating last access"),await i(e(this.db,`users/${r}/sites/${o}/lastAccessed`),s()),!0):(console.log("🔐 [SecureAuth] Registering site with current user:",this.websiteId),await i(l,{websiteId:this.websiteId,internalUrl:this.internalUrl,websiteUrl:this.websiteUrl,createdAt:s(),lastUpdated:s(),owner:this.currentUser.email}),console.log("🔐 [SecureAuth] Site registered successfully"),!0)}catch(e){return console.error("🔐 [SecureAuth] Error registering site:",e),!1}},isAuthenticated:function(){return!!this.currentUser},getCurrentUser:function(){return this.currentUser},authenticate:async function(){return console.log("🔐 [SecureAuth] Authenticate method called"),this.currentUser?(console.log("🔐 [SecureAuth] Already authenticated as:",this.currentUser.email),this.currentUser):this.auth&&this.auth.currentUser?(console.log("🔐 [SecureAuth] Found existing Firebase auth user:",this.auth.currentUser.email),this.currentUser=this.auth.currentUser,this.currentUser):(console.log("🔐 [SecureAuth] Not authenticated and no way to authenticate here"),null)},getPluginSettings:async function(e,t={}){this.isInitialized||(console.log("🔐 [SecureAuth] Service not initialized, initializing now"),await this.initialize());try{if(console.log(`🐶 FETCHING SETTINGS for plugin "${e}"`),!this.isAuthenticated())return console.warn("🔐 [SecureAuth] Not authenticated, using default settings"),i(t);const{ref:s,get:n,set:r,serverTimestamp:a}=this.dbFunctions,o=this.currentUser.email,l=this.getSafeFirebaseKey(o),c=this.internalUrl||window.location.hostname,u=`users/${l}/sites/${this.getSafeFirebaseKey(c)}/plugins/${e}`,d=`${u}/settings`,h=`${u}/license`;console.log(`🐶 CHECKING PATH: "${d}"`);const g=s(this.db,d),w=await n(g),b=s(this.db,h),S=await n(b),f=w.exists(),p=S.exists();console.log("🐶 SETTINGS EXISTS: "+(f?"YES ✅":"NO ❌")),console.log("🐶 LICENSE EXISTS: "+(p?"YES ✅":"NO ❌"));let A=f?w.val():null,U=p?S.val():null;if(f?(console.log("🐶 FIREBASE DATA:",JSON.stringify(A)),A&&"object"==typeof A&&Object.keys(A).length>0?(console.log("🐶 VALID SETTINGS FOUND! Using Firebase settings."),A.hasOwnProperty("enabled")||(console.log("🐶 Adding missing 'enabled' property to existing settings"),A.enabled=!t.hasOwnProperty("enabled")||t.enabled),r(s(this.db,`${u}/lastAccessed`),a()).catch((e=>console.error(`Failed to update lastAccessed timestamp: ${e.message}`)))):(console.log("🐶 EMPTY/INVALID SETTINGS found in Firebase."),A=null)):(console.log("🐶 NO SETTINGS found in Firebase."),A=null),p&&U&&"object"==typeof U)if(console.log("🐶 LICENSE DATA FOUND:",U),A=A||{},"authorized"===U.status||U.license_key)A.license_key=U.license_key||"licensed",A.activated_at=U.activated_at||U.lastUpdated||Date.now(),A.license_status="authorized";else if("trial"===U.status||U.trial_start){A.license_status="trial",A.trial_start=U.trial_start||U.lastUpdated;const e=U.trial_start?new Date(U.trial_start):new Date(U.lastUpdated),t=new Date(e);t.setDate(t.getDate()+14),A.trial_end=U.trial_end||t.toISOString()}else if(U.lastUpdated){A.license_status="trial",A.trial_start=U.lastUpdated;const e=new Date(U.lastUpdated),t=new Date(e);t.setDate(t.getDate()+14),A.trial_end=t.toISOString(),r(b,{status:"trial",trial_start:U.lastUpdated,trial_end:t.toISOString(),lastUpdated:a()}).catch((e=>console.error(`Failed to update license with trial info: ${e.message}`)))}if(A)return console.log("🐶 RETURNING COMBINED SETTINGS AND LICENSE DATA"),A;console.log("🐶 CREATING NEW SETTINGS using defaults");try{console.log(`🐶 Creating plugin directory at: "${u}"`),await r(s(this.db,u),{createdAt:a(),lastUpdated:a()});const e=i(t);if(console.log("🐶 New settings to save:",JSON.stringify(e)),await r(g,e),console.log("🐶 SAVED NEW SETTINGS to Firebase ✅"),!p){const t=(new Date).toISOString(),i=new Date;i.setDate(i.getDate()+14);const s=i.toISOString();await r(b,{status:"trial",trial_start:t,trial_end:s,lastUpdated:a()}),e.license_status="trial",e.trial_start=t,e.trial_end=s,console.log("🐶 CREATED TRIAL LICENSE in Firebase ✅")}return e}catch(e){return console.error("🐶 ERROR creating settings:",e),console.log("🐶 FALLING BACK to defaults"),i(t)}}catch(e){return console.error("🐶 ERROR retrieving settings:",e),console.log("🐶 FALLING BACK to defaults"),i(t)}function i(e){return e.hasOwnProperty("enabled")||(e={...e,enabled:!0}),e}},updatePluginSettings:async function(e,t){this.isInitialized||(console.log("🔐 [SecureAuth] Service not initialized, initializing now"),await this.initialize());try{if(console.log("🔐 [SecureAuth] Updating settings for plugin:",e),console.log("🔐 [SecureAuth] Settings to update:",t),!this.isAuthenticated())return console.warn("🔐 [SecureAuth] Not authenticated, settings will be saved locally only"),!1;if(!this.websiteId)return console.warn("🔐 [SecureAuth] No website ID available, cannot update settings"),!1;const{ref:i,get:s,set:n,serverTimestamp:r}=this.dbFunctions,a=this.currentUser.email,o=this.getSafeFirebaseKey(a),l=this.internalUrl||window.location.hostname,c=this.getSafeFirebaseKey(l),u=`users/${o}/sites/${c}/plugins/${e}`,d=`${u}/settings`,h=`${u}/license`;console.log("🔐 [SecureAuth] Plugin settings path:",d);const g=JSON.parse(JSON.stringify(t)),w={};"license_key"in g&&(w.license_key=g.license_key,w.status="authorized",delete g.license_key),"activated_at"in g&&(w.activated_at=g.activated_at,delete g.activated_at),"license_status"in g&&(w.status=g.license_status,delete g.license_status),"trial_start"in g&&(w.trial_start=g.trial_start,w.status=w.status||"trial",delete g.trial_start),"trial_end"in g&&(w.trial_end=g.trial_end,w.status=w.status||"trial",delete g.trial_end),console.log("🔐 [SecureAuth] Writing settings to Firebase");const b=i(this.db,d);if(await n(b,g),Object.keys(w).length>0){console.log("🔐 [SecureAuth] Writing license data to Firebase");const e=i(this.db,h),t=await s(e);if(t.exists()){const i={...t.val(),...w,lastUpdated:r()};await n(e,i)}else{if(w.status=w.status||"trial","trial"===w.status&&!w.trial_start){w.trial_start=(new Date).toISOString();const e=new Date;e.setDate(e.getDate()+14),w.trial_end=e.toISOString()}w.lastUpdated=r(),await n(e,w)}}else if(!w.status){const e=i(this.db,h);if(!(await s(e)).exists()){console.log("🔐 [SecureAuth] Creating default trial license");const t=(new Date).toISOString(),i=new Date;i.setDate(i.getDate()+14);const s=i.toISOString();await n(e,{status:"trial",trial_start:t,trial_end:s,lastUpdated:r()})}}console.log("🔐 [SecureAuth] Updating lastUpdated timestamp"),await n(i(this.db,`${u}/lastUpdated`),r()),await n(i(this.db,`${u}/lastAccessed`),r()),await n(i(this.db,`users/${o}/sites/${c}/lastUpdated`),r()),console.log("🔐 [SecureAuth] Verifying write operation");if(!(await s(b)).exists())throw console.error("🔐 [SecureAuth] Failed to verify settings write to Firebase"),new Error("Failed to verify settings were saved to Firebase");return console.log(`🔐 [SecureAuth] Successfully updated settings for plugin: ${e}`),!0}catch(t){return console.error(`🔐 [SecureAuth] Error updating settings for plugin ${e}:`,t),!1}},listSitePlugins:async function(){this.isInitialized||(console.log("🔐 [SecureAuth] Service not initialized, initializing now"),await this.initialize());try{if(!this.isAuthenticated())return console.warn("🔐 [SecureAuth] Not authenticated, cannot list plugins"),[];if(!this.websiteId)return console.warn("🔐 [SecureAuth] No website ID available, cannot list plugins"),[];const{ref:e,get:t}=this.dbFunctions,i=this.currentUser.email,s=this.getSafeFirebaseKey(i),n=this.internalUrl||window.location.hostname,r=`users/${s}/sites/${this.getSafeFirebaseKey(n)}/plugins`;console.log("🔐 [SecureAuth] Listing plugins at path:",r);const a=e(this.db,r),o=await t(a);if(!o.exists())return console.log("🔐 [SecureAuth] No plugins found for this site"),[];const l=o.val(),c=Object.keys(l).map((e=>{const t=l[e];return{id:e,settings:t.settings||{},lastUpdated:t.lastUpdated||null,createdAt:t.createdAt||null}}));return console.log("🔐 [SecureAuth] Found plugins:",c),c}catch(e){return console.error("🔐 [SecureAuth] Error listing site plugins:",e),[]}}};return document.addEventListener("DOMContentLoaded",(function(){console.log("🔐 [SecureAuth] Document loaded, initializing after delay"),setTimeout((()=>{t.initialize().then((()=>{console.log("🔐 [SecureAuth] Secure Firebase authentication ready")})).catch((e=>{console.error("🔐 [SecureAuth] Failed to initialize secure Firebase authentication:",e)}))}),1e3)})),{initialize:t.initialize.bind(t),isAuthenticated:t.isAuthenticated.bind(t),getCurrentUser:t.getCurrentUser.bind(t),authenticate:t.authenticate.bind(t),getPluginSettings:t.getPluginSettings.bind(t),updatePluginSettings:t.updatePluginSettings.bind(t),listSitePlugins:t.listSitePlugins.bind(t),setCurrentUser:t.setCurrentUser.bind(t),getSafeFirebaseKey:t.getSafeFirebaseKey.bind(t),showAlert:e.show.bind(e),hideAlert:e.hide.bind(e)}}(),window.inspectSecureAuth=function(){return console.log("🔐 [SecureAuth] Current state:",{initialized:window.SecureFirebaseAuth.isInitialized,authenticated:window.SecureFirebaseAuth.isAuthenticated(),currentUser:window.SecureFirebaseAuth.currentUser?window.SecureFirebaseAuth.currentUser.email:"none",websiteId:window.SecureFirebaseAuth.websiteId,websiteUrl:window.SecureFirebaseAuth.websiteUrl,internalUrl:window.SecureFirebaseAuth.internalUrl}),window.SecureFirebaseAuth},window.inspectFirebasePaths=async function(e){if(!window.SecureFirebaseAuth)return console.error("SecureFirebaseAuth not initialized"),{error:"SecureFirebaseAuth not initialized"};const t=window.SecureFirebaseAuth;if(t.isInitialized||await t.initialize(),!t.isAuthenticated())return console.error("Not authenticated"),{error:"Not authenticated"};const i=t.currentUser.email,s=t.getSafeFirebaseKey(i),n=t.internalUrl||window.location.hostname,r=t.getSafeFirebaseKey(n),a=`users/${s}/sites/${r}/plugins`,o=e?`${a}/${e}`:null,l=e?`${o}/settings`:null;let c=null;if(e)try{const{ref:e,get:i}=t.dbFunctions,s=e(t.db,l),n=await i(s);n.exists()&&(c=n.val())}catch(e){console.error("Error getting settings:",e)}return{userEmail:i,safeName:s,siteUrl:n,safeSiteUrl:r,pluginsPath:a,specificPluginPath:o,settingsPath:l,settings:c}};