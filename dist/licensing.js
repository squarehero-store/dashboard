!function(){console.log("ðŸ”‘ [Licensing] Initializing SquareHero Licensing System");const i={config:{localStoragePath:"./",fileExtension:".json",autoSyncWithFirebase:!0,syncInterval:36e5,validationInterval:864e5,trialDuration:12096e5,debug:!0},_initialized:!1,_syncTimer:null,_validationTimer:null,initialize:async function(i={}){if(this._initialized)return this._log("Already initialized, skipping"),!0;this.config={...this.config,...i};try{if(this._log("Initializing licensing system"),"undefined"==typeof window)throw new Error("Licensing system requires a browser environment");return this.config.autoSyncWithFirebase&&this._setupPeriodicSync(),this._setupPeriodicValidation(),this._initialized=!0,this._log("Licensing system initialized successfully"),!0}catch(i){return console.error("ðŸ”‘ [Licensing] Initialization error:",i),!1}},getPluginData:async function(i){if(!i)throw new Error("Plugin ID is required");this._log(`Getting data for plugin: ${i}`);try{const t=await this._loadFromLocalFile(i);return t?(this._log(`Loaded plugin data from local file: ${i}`),t):this.config.autoSyncWithFirebase?(this._log(`Local file not found for ${i}, trying Firebase`),await this._loadFromFirebase(i)):(this._log(`No data found for ${i}, creating default`),this._createDefaultPluginData(i))}catch(t){return console.error(`ðŸ”‘ [Licensing] Error getting data for plugin ${i}:`,t),this._createDefaultPluginData(i)}},savePluginData:async function(i,t){if(!i)throw new Error("Plugin ID is required");if(!t||"object"!=typeof t)throw new Error("Plugin data must be an object");this._log(`Saving data for plugin: ${i}`);try{return t.last_updated=(new Date).toISOString(),await this._saveToLocalFile(i,t),this.config.autoSyncWithFirebase&&this._queueFirebaseSync(i,t),!0}catch(t){return console.error(`ðŸ”‘ [Licensing] Error saving data for plugin ${i}:`,t),!1}},checkTrialStatus:async function(i){const t=await this.getPluginData(i);if("trial"!==t.status)return{isTrial:!1,status:t.status,message:`Plugin is not in trial mode. Current status: ${t.status}`};const e=new Date(t.trial_start||t.last_updated),a=new Date(t.trial_end||new Date(e.getTime()+this.config.trialDuration)),n=new Date,s=Math.max(0,Math.ceil((a-n)/864e5)),r=n>a;return r&&"trial"===t.status?(t.status="unauthorized",t.trial_expired=n.toISOString(),await this.savePluginData(i,t),{isTrial:!0,status:"unauthorized",expired:!0,daysRemaining:0,trialStart:e.toISOString(),trialEnd:a.toISOString(),message:"Trial period has expired."}):{isTrial:!0,status:t.status,expired:r,daysRemaining:s,trialStart:e.toISOString(),trialEnd:a.toISOString(),message:r?"Trial period has expired.":`Trial period is active. ${s} days remaining.`}},startTrial:async function(i){let t=await this.getPluginData(i);if("authorized"===t.status)return{success:!1,message:"Plugin is already licensed and authorized."};if(t.trial_expired)return{success:!1,message:"Trial period was already used and has expired."};const e=new Date,a=new Date(e.getTime()+this.config.trialDuration);return t.status="trial",t.trial_start=e.toISOString(),t.trial_end=a.toISOString(),await this.savePluginData(i,t),{success:!0,message:`Trial started successfully. Valid until ${a.toLocaleDateString()}.`,daysRemaining:this.config.trialDuration/864e5,trialStart:t.trial_start,trialEnd:t.trial_end}},activateWithLicense:async function(i,t){if(!t||"string"!=typeof t)return{success:!1,message:"Invalid license key provided."};if("TEST-LICENSE-KEY"===t){let e=await this.getPluginData(i);return e.status="authorized",e.license_key=t,e.activated_at=(new Date).toISOString(),await this.savePluginData(i,e),{success:!0,message:"Plugin activated successfully with license key.",status:"authorized"}}return{success:!1,message:"Invalid or unrecognized license key."}},validateLicense:async function(i){const t=await this.getPluginData(i);switch(t.status){case"trial":return await this.checkTrialStatus(i);case"authorized":return t.license_key?{status:"authorized",valid:!0,message:"License is valid and active."}:(t.status="unauthorized",await this.savePluginData(i,t),{status:"unauthorized",valid:!1,message:"License validation failed. No license key found."});default:return{status:t.status,valid:!1,message:`Plugin is not licensed. Current status: ${t.status}`}}},_setupPeriodicValidation:function(){this._validationTimer&&clearInterval(this._validationTimer),this._validationTimer=setInterval((async()=>{this._log("Running periodic license validation");const i=Object.keys(this._accessedPlugins||{});for(const t of i)try{const i=await this.validateLicense(t);this._log(`Validation result for ${t}:`,i)}catch(i){console.error(`ðŸ”‘ [Licensing] Error validating license for ${t}:`,i)}}),this.config.validationInterval),this._log(`Set up periodic validation every ${this.config.validationInterval/36e5} hours`)},_setupPeriodicSync:function(){this._syncTimer&&clearInterval(this._syncTimer),this._syncTimer=setInterval((async()=>{this._log("Running periodic Firebase synchronization")}),this.config.syncInterval),this._log(`Set up periodic sync every ${this.config.syncInterval/36e5} hours`)},_queueFirebaseSync:function(i,t){this._log(`Queued Firebase sync for plugin ${i}`),setTimeout((()=>{this._log(`Simulated Firebase sync completed for ${i}`)}),500)},_accessedPlugins:{},_loadFromLocalFile:async function(i){const t=this._getPluginFilename(i);try{if(void 0===window.fs||!window.fs.readFile){this._log(`Simulating file read for local development: ${t}`);const e=`squarehero_plugin_${i}`,a=localStorage.getItem(e);if(a)try{const t=JSON.parse(a);return this._accessedPlugins[i]=!0,t}catch(i){return this._log(`Error parsing localStorage data: ${i.message}`),localStorage.removeItem(e),null}return null}this._log(`Reading file using window.fs: ${t}`);try{const e=await window.fs.readFile(t,{encoding:"utf8"}),a=JSON.parse(e);return this._accessedPlugins[i]=!0,a}catch(i){return this._log(`Error reading file with window.fs: ${i.message}`),null}}catch(i){return this._log(`Error loading from local file: ${i.message}`),null}},_saveToLocalFile:async function(i,t){const e=this._getPluginFilename(i);try{const a=JSON.stringify(t,null,2);if(void 0===window.fs||!window.fs.writeFile){this._log(`Simulating file write for local development: ${e}`);const t=`squarehero_plugin_${i}`;return localStorage.setItem(t,a),!0}this._log(`Writing file using window.fs: ${e}`);try{return await window.fs.writeFile(e,a,"utf8"),!0}catch(t){this._log(`Error writing file with window.fs: ${t.message}`),this._log("Falling back to localStorage");const e=`squarehero_plugin_${i}`;return localStorage.setItem(e,a),!0}}catch(i){return this._log(`Error saving to local file: ${i.message}`),!1}},_loadFromFirebase:async function(i){return this._log(`Simulating Firebase load for plugin ${i}`),null},_createDefaultPluginData:function(i){const t=(new Date).toISOString(),e={plugin_id:i,status:"inactive",settings:{},last_updated:t,created_at:t};return this._saveToLocalFile(i,e).catch((i=>this._log(`Error saving default data: ${i.message}`))),e},_getPluginFilename:function(i){return`${this.config.localStoragePath}${i}${this.config.fileExtension}`},_log:function(i,t){this.config.debug&&(void 0!==t?console.log(`ðŸ”‘ [Licensing] ${i}`,t):console.log(`ðŸ”‘ [Licensing] ${i}`))}};window.SquareHeroLicensing=i,window.licenseTest=function(i="test-plugin"){return console.log("=== SquareHero Licensing Test ==="),console.log(`Testing with plugin ID: ${i}`),SquareHeroLicensing.initialize().then((()=>SquareHeroLicensing.getPluginData(i))).then((t=>(console.log("Initial plugin data:",t),SquareHeroLicensing.startTrial(i)))).then((t=>(console.log("Trial start result:",t),SquareHeroLicensing.checkTrialStatus(i)))).then((t=>(console.log("Trial status:",t),SquareHeroLicensing.activateWithLicense(i,"TEST-LICENSE-KEY")))).then((t=>(console.log("License activation result:",t),SquareHeroLicensing.validateLicense(i)))).then((t=>(console.log("License validation result:",t),SquareHeroLicensing.getPluginData(i)))).then((i=>(console.log("Final plugin data:",i),{success:!0,message:"Test completed successfully"}))).catch((i=>(console.error("Test error:",i),{success:!1,error:i.message})))},"complete"===document.readyState||"interactive"===document.readyState?setTimeout((()=>i.initialize()),100):document.addEventListener("DOMContentLoaded",(()=>i.initialize()))}();