window.HelpDocsManager||(window.HelpDocsManager=function(){let e=!1,t=null;async function n(){if(e)return!0;try{if(!Dashboard.FirebaseService||!Dashboard.FirebaseService.isInitialized)return console.error("Firebase service not initialized"),!1;const{getFirestore:n,collection:o,getDocs:i,query:a,orderBy:l,where:c}=await import("https://www.gstatic.com/firebasejs/11.5.0/firebase-firestore.js");return t=n(Dashboard.FirebaseService.app),console.log("Help Docs Manager initialized with Firestore"),e=!0,!0}catch(e){return console.error("Error initializing Firestore:",e),!1}}return{initialize:n,getHelpDocs:async function(o){if(!e){if(!await n())throw new Error("Failed to initialize Firestore")}try{const{collection:e,getDocs:n,query:i,orderBy:a,where:l}=await import("https://www.gstatic.com/firebasejs/11.5.0/firebase-firestore.js"),c=i(e(t,"plugins",o,"helpDocs"),a("createdAt","desc")),s=await n(c),r=[];return s.forEach((e=>{const t=e.data();if(t.createdAt){const e=t.createdAt.toDate?t.createdAt.toDate():new Date(1e3*t.createdAt.seconds);t.createdAtFormatted=e.toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric"})}r.push({id:e.id,...t})})),console.log(`Retrieved ${r.length} help docs for plugin ${o}`),r}catch(e){throw console.error("Error getting help docs:",e),e}},getAllHelpDocs:async function(){if(!e){if(!await n())throw new Error("Failed to initialize Firestore")}try{const{collection:e,getDocs:n,collectionGroup:o,query:i,orderBy:a}=await import("https://www.gstatic.com/firebasejs/11.5.0/firebase-firestore.js"),l=i(o(t,"helpDocs"),a("createdAt","desc")),c=await n(l),s=[];return c.forEach((e=>{const t=e.ref.path.split("/")[1],n=e.data();if(n.createdAt){const e=n.createdAt.toDate?n.createdAt.toDate():new Date(1e3*n.createdAt.seconds);n.createdAtFormatted=e.toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric"})}s.push({id:e.id,pluginId:t,...n})})),console.log(`Retrieved ${s.length} help docs across all plugins`),s}catch(e){throw console.error("Error getting all help docs:",e),e}}}}()),window.HelpDocsUI||(window.HelpDocsUI=function(){let e={};function t(e,t,n){const o=e.querySelectorAll(".help-doc-item");t=t.toLowerCase(),o.forEach((e=>{const o=e.querySelector(".doc-title").textContent.toLowerCase(),i=e.querySelector(".doc-excerpt").textContent.toLowerCase(),a=e.dataset.category,l=""===t||o.includes(t)||i.includes(t),c="all"===n||a===n;e.style.display=l&&c?"block":"none"}))}function n(e){let t=document.getElementById("help-doc-modal");t||(t=document.createElement("div"),t.id="help-doc-modal",t.className="help-doc-modal",t.innerHTML='\n                    <div class="help-doc-modal-content">\n                        <div class="help-doc-modal-header">\n                            <h2 class="help-doc-modal-title"></h2>\n                            <button class="help-doc-modal-close" title="Close">&times;</button>\n                        </div>\n                        <div class="help-doc-modal-body"></div>\n                    </div>\n                ',document.body.appendChild(t),t.querySelector(".help-doc-modal-close").addEventListener("click",(()=>{t.classList.remove("visible")})),document.addEventListener("keydown",(e=>{"Escape"===e.key&&t.classList.contains("visible")&&t.classList.remove("visible")})),t.addEventListener("click",(e=>{e.target===t&&t.classList.remove("visible")}))),t.querySelector(".help-doc-modal-title").textContent=e.title,t.querySelector(".help-doc-modal-body").innerHTML=e.content||"",t.classList.add("visible")}return{initialize:function(){return e={helpTabContent:document.createElement("div")},!0},createHelpTabContent:function(e){const o=document.createElement("div");if(o.className="help-docs-container",!e||0===e.length)return o.innerHTML='\n                    <div class="empty-state">\n                        <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">\n                            <path d="M12 21a9 9 0 1 0 0-18 9 9 0 0 0 0 18z"></path>\n                            <path d="M12 8v4"></path>\n                            <path d="M12 16h.01"></path>\n                        </svg>\n                        <h3>No Help Documentation Found</h3>\n                        <p>There are no help documents available for this plugin yet.</p>\n                    </div>\n                ',o;const i=document.createElement("div");i.className="help-docs-search",i.innerHTML='\n                <input type="text" placeholder="Search documentation..." class="help-search-input">\n                <select class="help-category-filter">\n                    <option value="all">All Categories</option>\n                    <option value="getting-started">Getting Started</option>\n                    <option value="installation">Installation</option>\n                    <option value="configuration">Configuration</option>\n                    <option value="customization">Customization</option>\n                    <option value="troubleshooting">Troubleshooting</option>\n                    <option value="faq">FAQ</option>\n                </select>\n            ',o.appendChild(i);const a=document.createElement("div");a.className="help-docs-list",e.forEach((e=>{const t=document.createElement("div");t.className="help-doc-item",t.dataset.docId=e.id,t.dataset.category=e.category||"uncategorized";const o={"getting-started":"Getting Started",installation:"Installation",configuration:"Configuration",customization:"Customization",troubleshooting:"Troubleshooting",faq:"FAQ",uncategorized:"General"}[e.category]||"General";t.innerHTML=`\n                    <div class="doc-header">\n                        <span class="doc-category">${o}</span>\n                        <span class="doc-date">${e.createdAtFormatted||"Unknown date"}</span>\n                    </div>\n                    <h3 class="doc-title">${e.title}</h3>\n                    <div class="doc-excerpt">${e.excerpt||""}</div>\n                    <div class="doc-actions">\n                        <button class="view-doc-btn">Read Article</button>\n                    </div>\n                `,t.querySelector(".view-doc-btn").addEventListener("click",(()=>{n(e)})),a.appendChild(t)})),o.appendChild(a);const l=i.querySelector(".help-search-input");l.addEventListener("input",(()=>{t(a,l.value,"all")}));const c=i.querySelector(".help-category-filter");return c.addEventListener("change",(()=>{t(a,l.value,c.value)})),o},viewHelpDoc:n,addHelpTab:function(e,t){return t.some((e=>"category"===e.type&&"guides"===e.id))||t.push({type:"category",id:"guides",label:"Help & Guides",components:[{type:"custom",id:"help-docs-container",label:"Help Documentation"}]}),t}}}()),function(){if(window.helpDocsIntegrationInitialized)return;const e=Dashboard.PluginSettingsRegistry.register;if(Dashboard.PluginSettingsRegistry.register=function(t,n,o={}){const i=window.HelpDocsUI.addHelpTab(t,n);e.call(this,t,i,o)},Dashboard&&Dashboard.loadPluginSettingsModule){const e=Dashboard.loadPluginSettingsModule;Dashboard.loadPluginSettingsModule=function(t){e.call(this,t),window.activePanel=t,console.log("Active panel ID globally exposed:",window.activePanel)}}window.initHelpDocsContainer=async function(){try{const e=document.querySelector('.custom-component-container[data-component-id="help-docs-container"]');if(!e)return void console.error("Help docs container not found");e.innerHTML='\n                <div class="loading-indicator">\n                    <div class="loading-spinner"></div>\n                    <p>Loading help documentation...</p>\n                </div>\n            ';let t=window.activePanel;if(t||(t=window.Dashboard?.activePanel),!t){e.innerHTML="<p>Trying to detect active plugin...</p>",console.log("Active panel not found in window.activePanel or window.Dashboard.activePanel");const n=document.querySelector(".settings-panel.visible");if(n)if(n.hasAttribute("data-plugin-id"))t=n.getAttribute("data-plugin-id"),console.log("Found plugin ID from panel attribute:",t);else{const e=document.getElementById("plugin-settings-title");if(e){const n=e.textContent.trim(),o=window.installedPlugins?.find((e=>e.name===n));o&&(t=o.id,console.log("Found plugin ID from title:",t))}}}if(!t){for(let e in window)if(e.toLowerCase().includes("panel")&&"string"==typeof window[e]){console.log("Potential panel ID found in window."+e+":",window[e]),t=window[e];break}const e=new URLSearchParams(window.location.search).get("plugin");e&&(t=e,console.log("Found plugin ID from URL:",t))}if(!t){e.innerHTML=`\n                    <div class="error-message">\n                        <p>Cannot determine which plugin is active.</p>\n                        <div style="font-size: 12px; margin-top: 10px;">\n                            <p>Debug info: window.activePanel = ${window.activePanel}, \n                               Dashboard.activePanel = ${window.Dashboard?.activePanel}</p>\n                            <p>Settings panel title: ${document.getElementById("plugin-settings-title")?.textContent||"Not found"}</p>\n                            <button id="debug-help-docs" style="margin-top: 10px; padding: 5px 10px;">Debug Details</button>\n                        </div>\n                    </div>\n                `;const t=e.querySelector("#debug-help-docs");return void(t&&t.addEventListener("click",(function(){console.log("Settings panel:",document.querySelector(".settings-panel.visible")),console.log("Panel title:",document.getElementById("plugin-settings-title")?.textContent),console.log("All panel and plugin related variables:");for(let e in window)(e.toLowerCase().includes("plugin")||e.toLowerCase().includes("panel"))&&console.log(`window.${e} =`,window[e]);alert("Debug info logged to console. Press F12 to view.")})))}await window.HelpDocsManager.initialize();const n=await window.HelpDocsManager.getHelpDocs(t),o=window.HelpDocsUI.createHelpTabContent(n);e.innerHTML="",e.appendChild(o)}catch(e){console.error("Error initializing help docs container:",e);const t=document.querySelector('.custom-component-container[data-component-id="help-docs-container"]');t&&(t.innerHTML=`\n                    <div class="error-message">\n                        <p>Error loading help documentation: ${e.message}</p>\n                    </div>\n                `)}},window.helpDocsIntegrationInitialized=!0,window.HelpDocsUI.initialize(),console.log("Help Documentation integration initialized with enhanced plugin detection")}(),window.testDisplaySinglePluginDocs=async function(e="food-menu"){try{await window.HelpDocsManager.initialize();const t=await window.HelpDocsManager.getHelpDocs(e);console.log(`Loaded ${t.length} help docs for ${e}`);const n=document.createElement("div");n.className="test-help-docs-container";const o=document.createElement("h2");if(o.textContent=`Help Documentation for ${e}`,n.appendChild(o),0===t.length)n.innerHTML+='\n                <div style="padding: 20px; text-align: center;">\n                    <p>No help documents found for this plugin.</p>\n                </div>\n            ';else{const e=window.HelpDocsUI.createHelpTabContent(t);n.appendChild(e)}const i=document.querySelector(".plugins-column");return i&&i.appendChild(n),{success:!0,docsCount:t.length}}catch(e){return console.error("Error in single plugin test display:",e),{success:!1,error:e.message}}},window.debugHelpDocs=function(){console.log("Active panel ID:",window.activePanel),console.log("Dashboard.activePanel:",window.Dashboard?.activePanel),console.log("Settings panel attributes:",document.querySelector(".settings-panel.visible")?.attributes),console.log("Plugin title:",document.getElementById("plugin-settings-title")?.textContent),console.log("Available plugins:",window.installedPlugins);const e=document.getElementById("plugin-settings-title")?.textContent.trim(),t=window.installedPlugins?.find((t=>t.name===e));return console.log("Found matching plugin:",t),"Debug info logged to console"},function e(){if(!window.Dashboard)return console.warn("Dashboard not available yet, waiting before applying enhancements"),void setTimeout(e,100);Object.defineProperty(window.Dashboard,"activePanel",{get:function(){return window.activePanel},set:function(e){window.activePanel=e,console.log(`Active panel updated: ${e}`)},enumerable:!0}),console.log("Dashboard enhanced to properly expose active panel ID globally")}(),window.testDisplayAllHelpDocs=window.testDisplaySinglePluginDocs;