const Dashboard=function(){const e={schemas:{},handlers:{},register:function(e,n,t={}){this.schemas[e]=n,this.handlers[e]=t,console.log(`Registered settings schema for plugin: ${e}`)},getSchema:function(e){return this.schemas[e]||null},getHandlers:function(e){return this.handlers[e]||{}}};let n=[],t=[],i=null,s=!1,o=null,a=null,l=null,r={},c=!1;const d={isInitialized:!1,initialize:async function(){if(this.isInitialized)return!0;if(!window.SecureFirebaseAuth)return console.error("Secure Firebase Authentication service not found"),!document.querySelector('script[src*="auth.js"]')&&(console.log("Attempting to load auth.js dynamically"),new Promise(((e,n)=>{const t=document.createElement("script");t.src="auth.js",t.onload=async()=>{if(console.log("auth.js loaded dynamically"),window.SecureFirebaseAuth){const n=await window.SecureFirebaseAuth.initialize();this.isInitialized=n,e(n)}else console.error("SecureFirebaseAuth still not available after loading auth.js"),n(new Error("Failed to load SecureFirebaseAuth"))},t.onerror=()=>{console.error("Failed to load auth.js dynamically"),n(new Error("Failed to load auth.js"))},document.head.appendChild(t)})));try{const e=await window.SecureFirebaseAuth.initialize();return this.isInitialized=e,console.log("Firebase service initialized:",e),e}catch(e){return console.error("Error initializing Firebase service:",e),!1}},getPluginSettings:async function(e,n={}){if(this.isInitialized||(console.log("Firebase service not initialized, initializing now"),await this.initialize()),!window.SecureFirebaseAuth)return console.error("Secure Firebase Authentication service not found after initialization"),n;try{return await window.SecureFirebaseAuth.getPluginSettings(e,n)}catch(t){return console.error(`Error getting settings for plugin ${e}:`,t),n}},updatePluginSettings:async function(e,n){if(this.isInitialized||(console.log("Firebase service not initialized, initializing now"),await this.initialize()),!window.SecureFirebaseAuth)return console.error("Secure Firebase Authentication service not found after initialization"),!1;try{const t=await window.SecureFirebaseAuth.updatePluginSettings(e,n);return console.log(`Settings update for ${e} result:`,t),t}catch(n){return console.error(`Error updating settings for plugin ${e}:`,n),!1}},isAuthenticated:function(){return!!window.SecureFirebaseAuth&&window.SecureFirebaseAuth.isAuthenticated()},getCurrentUser:function(){return window.SecureFirebaseAuth?window.SecureFirebaseAuth.getCurrentUser():null}},u={modules:{},register:function(e,n,t){this.modules[e]||(this.modules[e]={}),this.modules[e][n]=t,console.log(`Registered ${n} module for ${e}`)},get:function(e,n){return this.modules[e]&&this.modules[e][n]?this.modules[e][n]:null}},g={pluginCardsContainer:document.getElementById("plugin-cards-container"),newsItemsContainer:document.getElementById("news-items-container"),settingsPanel:document.getElementById("settings-panel"),panelContent:document.getElementById("panel-content"),closeButton:document.getElementById("close-panel"),overlay:document.getElementById("overlay"),dashboardTabs:document.querySelector(".dashboard-tabs"),dashboardTabContents:document.querySelectorAll(".dashboard-tab-content")};function p(){const e=document.querySelector(".notification-bar");return e?(console.log("Using existing notification bar"),e):(console.log("Creating new notification bar"),o=document.createElement("div"),o.className="notification-bar",g.settingsPanel.appendChild(o),o)}function h(){const n=p();n.classList.remove("success","attention"),n.classList.add("visible"),n.innerHTML='\n            <div class="notification-message">\n                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n                    <circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2"/>\n                    <line x1="12" y1="8" x2="12" y2="16" stroke="currentColor" stroke-width="2"/>\n                    <circle cx="12" y1="6" r="1" fill="currentColor"/>\n                </svg>\n                <span>Unsaved changes</span>\n            </div>\n            <div class="notification-actions">\n                <button class="discard-button">Discard</button>\n                <button class="save-button">Save</button>\n            </div>\n        ';const o=n.querySelector(".discard-button"),a=n.querySelector(".save-button");o.addEventListener("click",(function(){s=!1,A()})),a.addEventListener("click",(function(){const n=g.panelContent.querySelectorAll(".settings-form");if(!n||0===n.length)return;const o=i;if(!t.find((e=>e.id===o)))return;const a=e.getSchema(o);if(!a)return;let l={};n.forEach((e=>{const n=SettingsComponents.collectFormValues(e,a);l={...l,...n}})),$(o,l),s=!1,w()})),console.log("Notification bar created and shown")}function b(e){e&&(l&&clearTimeout(l),e.classList.remove("attention"),e.offsetWidth,e.classList.add("attention"),l=setTimeout((function(){e&&e.classList.remove("attention")}),800))}function v(){console.log("showAttention called");let e=document.querySelector(".notification-bar");e&&e.classList.contains("visible")?(console.log("Notification bar already visible, applying animation"),b(e)):(console.log("No visible notification bar, creating one"),h(),e=document.querySelector(".notification-bar"),setTimeout((()=>{b(e)}),50))}function f(e){const n=p();n.classList.remove("attention"),n.className="notification-bar success visible",n.innerHTML=`\n            <div class="notification-message">\n                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n                    <circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2"/>\n                    <path d="M8 12l3 3 6-6" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n                </svg>\n                <span>${e||"Settings saved successfully!"}</span>\n            </div>\n            <div class="notification-actions">\n                <button class="discard-button">Close</button>\n            </div>\n        `;n.querySelector(".discard-button").addEventListener("click",(function(){m()})),a&&clearTimeout(a),a=setTimeout((function(){m()}),3e3)}function m(){console.log("[DEBUG-NOTIFICATION] Hiding notification bar");const e=document.querySelector(".notification-bar");e?(console.log("[DEBUG-NOTIFICATION] Found existing bar to hide"),e.classList.remove("visible")):console.log("[DEBUG-NOTIFICATION] No notification bar found to hide"),a&&(console.log("[DEBUG-NOTIFICATION] Clearing notification timeout"),clearTimeout(a),a=null)}function w(){console.log("[DEBUG-NOTIFICATION] updateNotificationState called, hasUnsavedChanges =",s),s?(console.log("[DEBUG-NOTIFICATION] Has unsaved changes, showing notification"),h()):(console.log("[DEBUG-NOTIFICATION] No unsaved changes, hiding notification"),m())}function S(e){const n=e.licenseStatus||"inactive";let t=e.trialData||null;const i=document.createElement("div");switch(i.className="settings-section licensing-section",n){case"authorized":i.innerHTML=`\n                    <div class="license-status-container">\n                        <div class="license-status-icon active">\n                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                                <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>\n                                <path d="M7.5 12l3 3 6-6"/>\n                            </svg>\n                        </div>\n                        <div class="license-status-info">\n                            <h3 class="license-status-title">Licensed</h3>\n                            <p class="license-status-description">This plugin is licensed and active.</p>\n                        </div>\n                    </div>\n                    <div class="license-details">\n                        <div class="license-detail-item">\n                            <span class="license-detail-label">License Key:</span>\n                            <span class="license-detail-value">•••••••••${e.settings?.license_key?.substring(e.settings.license_key.length-4)||"••••"}</span>\n                        </div>\n                        <div class="license-detail-item">\n                            <span class="license-detail-label">Activated On:</span>\n                            <span class="license-detail-value">${new Date(e.settings?.activated_at||Date.now()).toLocaleDateString()}</span>\n                        </div>\n                    </div>\n                    <div class="license-actions">\n                        <button class="button secondary-button" id="deactivate-license">Deactivate License</button>\n                    </div>\n                `;break;case"trial":const n=t?.daysRemaining||14,s=t?.trialEnd?new Date(t.trialEnd).toLocaleDateString():"Unknown";i.innerHTML=`\n                    <div class="license-status-container">\n                        <div class="license-status-icon trial">\n                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                                <circle cx="12" cy="12" r="10"></circle>\n                                <polyline points="12 6 12 12 16 14"></polyline>\n                            </svg>\n                        </div>\n                        <div class="license-status-info">\n                            <h3 class="license-status-title">Trial Mode</h3>\n                            <p class="license-status-description">This plugin is currently in trial mode.</p>\n                        </div>\n                    </div>\n                    <div class="license-details">\n                        <div class="license-detail-item">\n                            <span class="license-detail-label">Days Remaining:</span>\n                            <span class="license-detail-value">${n}</span>\n                        </div>\n                        <div class="license-detail-item">\n                            <span class="license-detail-label">Trial Ends:</span>\n                            <span class="license-detail-value">${s}</span>\n                        </div>\n                    </div>\n                    <div class="license-activation">\n                        <h4 class="license-activation-title">Have a License Key?</h4>\n                        <div class="license-activation-form">\n                            <input type="text" class="license-key-input" placeholder="Enter your license key" id="license-key-input">\n                            <button class="button primary-button" id="activate-license">Activate License</button>\n                        </div>\n                    </div>\n                `;break;case"unauthorized":i.innerHTML=`\n                    <div class="license-status-container">\n                        <div class="license-status-icon expired">\n                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                                <circle cx="12" cy="12" r="10"></circle>\n                                <line x1="15" y1="9" x2="9" y2="15"></line>\n                                <line x1="9" y1="9" x2="15" y2="15"></line>\n                            </svg>\n                        </div>\n                        <div class="license-status-info">\n                            <h3 class="license-status-title">License Required</h3>\n                            <p class="license-status-description">Your trial has expired or is invalid.</p>\n                        </div>\n                    </div>\n                    <div class="license-activation">\n                        <h4 class="license-activation-title">Enter Your License Key</h4>\n                        <div class="license-activation-form">\n                            <input type="text" class="license-key-input" placeholder="Enter your license key" id="license-key-input">\n                            <button class="button primary-button" id="activate-license">Activate License</button>\n                        </div>\n                    </div>\n                    <div class="license-purchase">\n                        <a href="https://squarehero.store/products/${e.id}" target="_blank" class="button secondary-button purchase-button">Purchase License</a>\n                    </div>\n                `;break;default:i.innerHTML='\n                    <div class="license-status-container">\n                        <div class="license-status-icon inactive">\n                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                                <circle cx="12" cy="12" r="10"></circle>\n                                <line x1="12" y1="8" x2="12" y2="12"></line>\n                                <line x1="12" y1="16" x2="12.01" y2="16"></line>\n                            </svg>\n                        </div>\n                        <div class="license-status-info">\n                            <h3 class="license-status-title">Not Activated</h3>\n                            <p class="license-status-description">This plugin is not activated.</p>\n                        </div>\n                    </div>\n                    <div class="license-actions">\n                        <button class="button primary-button" id="start-trial">Start Free Trial</button>\n                        <p class="trial-info">Start a 14-day free trial with full features.</p>\n                    </div>\n                    <div class="license-activation">\n                        <h4 class="license-activation-title">Already have a License?</h4>\n                        <div class="license-activation-form">\n                            <input type="text" class="license-key-input" placeholder="Enter your license key" id="license-key-input">\n                            <button class="button secondary-button" id="activate-license">Activate License</button>\n                        </div>\n                    </div>\n                '}return i}function y(e){return new Promise((n=>{if(!e.moduleScripts||0===e.moduleScripts.length)return void n();let t=0;const i=e.moduleScripts.length;e.moduleScripts.forEach((e=>{const s=document.createElement("script");s.src=e,s.onload=()=>{t++,t===i&&n()},s.onerror=s=>{console.error(`Error loading script ${e}:`,s),t++,t===i&&n()},document.body.appendChild(s)}))}))}function E(e){return new Promise((n=>{try{if(!e.settings){console.error(`⛔ [ERROR] No settings found for plugin ${e.id}. Showing error card.`);const t=document.createElement("div");t.className="plugin-card error-card",t.setAttribute("data-plugin-id",e.id),t.innerHTML=`\n                        <div class="top-wrapper">\n                            <div class="plugin-icon">\n                                <img src="${e.icon}" alt="${e.name} icon">\n                            </div>\n                            <div class="status-wrapper">\n                                <span class="plugin-status status-error">ERROR</span>\n                            </div>\n                        </div>\n                        <div class="plugin-content">\n                            <div class="plugin-header">\n                                <h3 class="plugin-title">${e.name}</h3>\n                            </div>\n                            <p class="plugin-description">Settings could not be loaded for this plugin.</p>\n                            <button class="reload-settings-button">Reload Settings</button>\n                        </div>\n                    `;const i=t.querySelector(".reload-settings-button");return i&&i.addEventListener("click",(async function(n){if(n.stopPropagation(),window.inspectAndFixPluginSettings)try{const n=await window.inspectAndFixPluginSettings(e.id);n&&!n.error?alert(`Settings repair attempted for ${e.name}. Please refresh the page.`):alert(`Could not repair settings: ${n.error||"Unknown error"}`)}catch(e){console.error("Error repairing settings:",e),alert(`Failed to repair settings: ${e.message}`)}})),void n(t)}const t=u.get(e.id,"card");if(t){return void n(t.createCard(e))}console.log(`🔍 [DEBUG-CARD] Creating default card for plugin: ${e.id}`),console.log("🔍 [DEBUG-CARD] Plugin status from data:",e.status),console.log("🔍 [DEBUG-CARD] Plugin settings:",e.settings),console.log("🔍 [DEBUG-CARD] License status:",e.licenseStatus);const i=document.createElement("div");i.className="plugin-card",i.setAttribute("data-plugin-id",e.id);const s=e.licenseStatus||"inactive";let o,a,l="",r="",c="";switch(s){case"authorized":l="license-active",r="LICENSED";break;case"trial":l="license-trial",r="TRIAL",e.trialData&&void 0!==e.trialData.daysRemaining&&(c=`<div class="license-details">Trial: ${e.trialData.daysRemaining} days left</div>`);break;case"unauthorized":l="license-expired",r="EXPIRED";break;default:l="license-inactive",r="ACTIVATE"}if("inactive"===s||"unauthorized"===s)o="UNLICENSED",a="status-unlicensed";else{const n=e.status||"disabled";o=n.toUpperCase(),a=`status-${n}`}i.innerHTML=`\n                    <div class="top-wrapper">\n                    <div class="plugin-icon">\n                        <img src="${e.icon}" alt="${e.name} icon">\n                    </div>\n                    <div class="status-wrapper">\n                    <span class="plugin-status ${a}">${o}</span>\n                    ${c}\n                    </div>\n                    </div>\n                    <div class="plugin-content">\n                        <div class="plugin-header">\n                            <h3 class="plugin-title">${e.name}</h3>\n                        </div>\n                        <p class="plugin-description">${e.description}</p>\n                    </div>\n                `,i.addEventListener("click",(function(){D(e.id)})),n(i)}catch(t){console.error(`Error creating card for plugin ${e.id}:`,t);const i=document.createElement("div");i.className="plugin-card error-card",i.setAttribute("data-plugin-id",e.id),i.innerHTML=`\n                    <div class="top-wrapper">\n                        <div class="plugin-icon">\n                            <img src="${e.icon||"sqs-placeholder.jpg"}" alt="${e.name||"Plugin"} icon">\n                        </div>\n                        <div class="status-wrapper">\n                            <span class="plugin-status status-error">ERROR</span>\n                        </div>\n                        <div class="plugin-content">\n                            <div class="plugin-header">\n                                <h3 class="plugin-title">${e.name||"Unknown Plugin"}</h3>\n                            </div>\n                            <p class="plugin-description">Error: ${t.message}</p>\n                        </div>\n                    </div>\n                `,n(i)}}))}function C(){const e=document.getElementById("discover-plugins-content");if(console.log("🔍 [DEBUG-DISCOVER] Starting renderDiscoverPluginCards"),console.log("🔍 [DEBUG-DISCOVER] Available plugins count:",n?.length),console.log("🔍 [DEBUG-DISCOVER] Installed plugins count:",t?.length),!n||!n.length)return console.log("🔍 [DEBUG-DISCOVER] No available plugins found"),void(e.innerHTML="<p>No plugins available to discover.</p>");const i=document.createElement("div");i.id="discover-plugins-grid",i.className="discover-plugins-grid",console.log("🔍 [DEBUG-DISCOVER] Installed plugin IDs:",t.map((e=>e.id)));const s=n.filter((e=>{const n=t.some((n=>n.id===e.id));return console.log(`🔍 [DEBUG-DISCOVER] Plugin ${e.id}: installed=${n}`),!n}));if(0===s.length)return console.log("🔍 [DEBUG-DISCOVER] No plugins to discover after filtering out installed plugins"),void(e.innerHTML="<p>You have installed all available plugins. Check back soon for new additions!</p>");s.forEach((e=>{const n=document.createElement("div");n.className="discover-plugin-card",n.setAttribute("data-plugin-id",e.id);const t=document.createElement("div");t.className="card-inner";const s=document.createElement("div");s.className="card-front",s.innerHTML=`\n                <div class="discover-plugin-icon">\n                    <img src="${e.icon}" alt="${e.name} icon">\n                </div>\n                <div class="discover-plugin-content">\n                    <h3 class="discover-plugin-title">${e.name}</h3>\n                    <p class="discover-plugin-description">${e.description}</p>\n                    <div class="discover-plugin-actions">\n                        <button class="sh-button activate-license" data-plugin-id="${e.id}">\n                            Activate License\n                        </button>\n                        <button class="sh-primary-button install-plugin" data-plugin-id="${e.id}">\n                            Get Started\n                        </button>\n                        <p class="fine-print">14 day free trial. No credit card required.</p>\n                    </div>\n                </div>\n            `;const o=document.createElement("div");o.className="card-back",o.innerHTML=`\n                <div class="discover-plugin-icon">\n                    <img src="${e.icon}" alt="${e.name} icon">\n                </div>\n                <div class="discover-plugin-content">\n                    <h4>${e.name}</h4>\n                    <h3 class="discover-plugin-title">Take this plugin for a full test drive, no strings attached</h3>\n                    <ul class="discover-plugin-description">\n  <li>Instant 100% code-free installation is just a click away</li>\n  <li>Complete access to all features</li>\n  <li>14-day trial with no credit card or email required</li>\n</ul>\n                    <div class="discover-plugin-actions">\n                        <button class="sh-primary-button install-now" data-plugin-id="${e.id}">\n                            Install Now\n                        </button>\n                    </div>\n                </div>\n            `,t.appendChild(s),t.appendChild(o),n.appendChild(t),i.appendChild(n)})),e.innerHTML="",e.appendChild(i),console.log("🔍 [DEBUG-DISCOVER] Finished rendering discover plugins"),function(){const e=document.querySelectorAll(".discover-plugin-card .install-plugin"),t=document.querySelectorAll(".discover-plugin-card .install-now"),i=document.querySelectorAll(".discover-plugin-card .activate-license");e.forEach((e=>{e.addEventListener("click",(function(e){e.stopPropagation();const n=this.closest(".discover-plugin-card");n&&n.classList.add("flipped")}))})),t.forEach((e=>{e.addEventListener("click",(async function(e){e.stopPropagation();const t=this.getAttribute("data-plugin-id");console.log("Installing plugin with ID:",t);const i=this.textContent.trim();this.disabled=!0,this.textContent="Installing...";try{const e=await async function(e){console.log(`Starting installation for ${e} via code injection`);try{const t=n.find((n=>n.id===e));if(!t)throw new Error(`Plugin ${e} not found in available plugins`);if(!t.install)throw new Error(`Plugin ${e} does not have installation code defined`);const i=document.cookie.split(";").find((e=>e.trim().startsWith("crumb=")))?.split("=")[1];if(!i)return console.error("Could not find crumb cookie"),{success:!1,error:"Authentication required. Please login to Squarespace first."};const s=await fetch(`${window.location.origin}/api/config/GetInjectionSettings`,{method:"GET",headers:{"x-csrf-token":i,accept:"application/json, text/plain, */*"},credentials:"include"});if(!s.ok)throw new Error(`Failed to get injection settings: ${s.status} ${s.statusText}`);const o=await s.json();console.log("Current Injection Settings:",o);const a=t.install;if(o.header&&o.header.includes(`data-squarehero-plugin="${e}"`))return console.log(`Plugin ${e} is already installed.`),{success:!1,error:"This plugin is already installed on your site."};const l=new URLSearchParams({header:(o.header||"")+a,footer:o.footer||"",lockPage:o.lockPage||"",postItem:o.postItem||""}),r=await fetch(`${window.location.origin}/api/config/SaveInjectionSettings`,{method:"POST",headers:{"content-type":"application/x-www-form-urlencoded","x-csrf-token":i},body:l.toString(),credentials:"include"});if(!r.ok)throw new Error(`Failed to save injection settings: ${r.status} ${r.statusText}`);return console.log("Plugin installation successful!"),{success:!0}}catch(e){return console.error("Error installing plugin via code injection:",e),{success:!1,error:e.message||"Failed to install plugin. Please try again later."}}}(t);if(!e||!e.success)throw new Error(e?.error||"Installation failed");{this.textContent="Installed ✓",this.classList.add("success");const e=document.createElement("div");e.className="install-success-message",e.innerHTML="\n                            <p>✅ Install successfull</p>\n                            <p>Refresh the page to see the plugin in your dashboard.</p>\n                        ";const n=this.closest(".discover-plugin-actions");n&&n.appendChild(e);const t=this.closest(".discover-plugin-actions").querySelector(".fine-print");t&&(t.style.display="none")}}catch(e){console.error(`Error installing plugin ${t}:`,e),this.textContent="Installation failed",this.classList.add("error");const n=document.createElement("div");n.className="install-error-message",n.innerHTML=`\n                        <p>❌ Error: ${e.message||"Could not install plugin"}</p>\n                        <button class="retry-install">Retry</button>\n                    `;const s=this.closest(".discover-plugin-actions");if(s){s.appendChild(n);const e=n.querySelector(".retry-install");e&&e.addEventListener("click",(e=>{e.stopPropagation(),n.remove(),this.disabled=!1,this.textContent=i,this.classList.remove("error")}))}}}))})),i.forEach((e=>{e.addEventListener("click",(function(e){e.stopPropagation();const n=this.getAttribute("data-plugin-id");console.log("Activating license for plugin with ID:",n),alert(`Activating license for plugin: ${n}`)}))})),document.addEventListener("click",(function(e){document.querySelectorAll(".discover-plugin-card.flipped").forEach((n=>{n.contains(e.target)||n.classList.remove("flipped")}))}))}()}function D(n){try{const a=t.find((e=>e.id===n));if(!a)throw new Error(`Plugin ${n} not found`);s=!1,m(),g.settingsPanel.classList.add("visible"),g.settingsPanel.classList.remove("panel-width-half","panel-width-full");const l=a.panelWidth||"half";g.settingsPanel.classList.add(`panel-width-${l}`),g.overlay.classList.add("visible"),g.settingsPanel.setAttribute("aria-hidden","false");const c=document.getElementById("plugin-settings-title");c&&(c.textContent=`${a.name}`),window.SkeletonLoader?r.settings=window.SkeletonLoader.show("panel-content","settingsPanel"):g.panelContent.innerHTML='<div class="loading-indicator"><p>Loading settings...</p></div>',i=n,window.activePanel=n,console.log("Active panel ID globally exposed:",window.activePanel),g.settingsPanel&&(g.settingsPanel.setAttribute("data-plugin-id",n),console.log("Added data-plugin-id attribute to settings panel"));const d=!0===a.hasWizard;function o(){const t=e.getSchema(n),i=u.get(n,"settings");let o="";if(t){const e=t.filter((e=>"category"===e.type));e.length>0?(console.log(`🔍 [DEBUG-SETTINGS] Plugin has ${e.length} categories/tabs`),o=`\n                                <div class="settings-tabs">\n                                    ${e.map((e=>`<button class="tab-button" data-tab-target="${e.id}">${e.title?e.title.charAt(0).toUpperCase()+e.title.slice(1):e.id.charAt(0).toUpperCase()+e.id.slice(1)}</button>`)).join("")}\n                                    <button class="tab-button" data-tab-target="licensing">Licensing</button>\n                                </div>\n                                <div class="settings-content">\n                                    ${e.map(((e,n)=>`\n                                        <div class="tab-content ${0===n?"active":""}" data-tab-content="${e.id}">\n                                            <form class="settings-form" data-category="${e.id}">\n                                                ${SettingsComponents?e.components.map((e=>SettingsComponents.renderSetting(e,a.settings||{}))).join(""):""}\n                                            </form>\n                                        </div>\n                                    `)).join("")}\n                                    <div class="tab-content ${0===e.length?"active":""}" data-tab-content="licensing">\n                                        <div class="settings-form">\n                                            ${S(a).outerHTML}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="form-actions">\n                                    <button type="button" class="button cancel-button">Cancel</button>\n                                    <button type="button" class="button save-button">Save</button>\n                                </div>\n                            `):(console.log("🔍 [DEBUG-SETTINGS] Plugin has a simple settings panel without tabs"),o=`\n                                <div class="settings-tabs">\n                                    <button class="tab-button active" data-tab-target="settings">Settings</button>\n                                    <button class="tab-button" data-tab-target="licensing">Licensing</button>\n                                </div>\n                                <div class="settings-content">\n                                    <div class="tab-content active" data-tab-content="settings">\n                                        <form class="settings-form">\n                                            <div class="settings-section">\n                                                <div class="setting-group toggle-group">\n                                                    <label class="toggle-switch">\n                                                        <input type="checkbox" id="enabled" name="enabled" ${!1!==a.settings?.enabled?"checked":""}>\n                                                        <span class="toggle-slider"></span>\n                                                    </label>\n                                                    <div class="toggle-labels">\n                                                        <span class="toggle-title">Plugin Enabled</span>\n                                                        <span class="toggle-status">${!1!==a.settings?.enabled?"Enabled":"Disabled"}</span>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            ${SettingsComponents?t.map((e=>SettingsComponents.renderSetting(e,a.settings||{}))).join(""):""}\n                                        </form>\n                                    </div>\n                                    <div class="tab-content" data-tab-content="licensing">\n                                        <div class="settings-form">\n                                            ${S(a).outerHTML}\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class="form-actions">\n                                    <button type="button" class="button cancel-button">Cancel</button>\n                                    <button type="button" class="button save-button">Save</button>\n                                </div>\n                            `)}else console.log(`🔍 [DEBUG-SETTINGS] Plugin ${a.id} has no registered schema`),o=`\n                            <div class="settings-tabs">\n                                <button class="tab-button active" data-tab-target="settings">Settings</button>\n                                <button class="tab-button" data-tab-target="licensing">Licensing</button>\n                            </div>\n                            <div class="settings-content">\n                                <div class="tab-content active" data-tab-content="settings">\n                                    <form class="settings-form">\n                                        <div class="settings-section">\n                                            <div class="setting-group toggle-group">\n                                                <label class="toggle-switch">\n                                                    <input type="checkbox" id="enabled" name="enabled" ${!1!==a.settings?.enabled?"checked":""}>\n                                                    <span class="toggle-slider"></span>\n                                                </label>\n                                                <div class="toggle-labels">\n                                                    <span class="toggle-title">Plugin Enabled</span>\n                                                    <span class="toggle-status">${!1!==a.settings?.enabled?"Enabled":"Disabled"}</span>\n                                                </div>\n                                            </div>\n                                            <p class="no-settings-message">This plugin has no additional settings.</p>\n                                        </div>\n                                    </form>\n                                </div>\n                                <div class="tab-content" data-tab-content="licensing">\n                                    <div class="settings-form">\n                                        ${S(a).outerHTML}\n                                    </div>\n                                </div>\n                            </div>\n                            <div class="form-actions">\n                                <button type="button" class="button cancel-button">Cancel</button>\n                                <button type="button" class="button save-button">Save</button>\n                            </div>\n                        `;r.settings&&r.settings.hide(),g.panelContent.innerHTML=o;const l=g.panelContent.querySelectorAll(".settings-form"),c=g.panelContent.querySelector(".cancel-button"),d=g.panelContent.querySelector(".save-button");c&&c.addEventListener("click",L),d&&l.length>0&&d.addEventListener("click",(function(){const e=function(e,n){console.log(`🔍 [DEBUG-SETTINGS] Collecting settings from forms for plugin: ${e}`);const t=g.panelContent.querySelectorAll(".settings-form");if(!t||0===t.length)return console.log(`🔍 [DEBUG-SETTINGS] No forms found for plugin: ${e}`),{enabled:!0};const i=n.filter((e=>"category"===e.type));let s={};return i.length>0?(console.log(`🔍 [DEBUG-SETTINGS] Plugin has ${i.length} categories/tabs`),t.forEach((e=>{const n=e.closest(".tab-content");if(!n)return void console.log("🔍 [DEBUG-SETTINGS] Form not in a tab container, skipping");const t=n.getAttribute("data-tab-content");console.log(`🔍 [DEBUG-SETTINGS] Processing form in tab: ${t}`);const o=i.find((e=>e.id===t));if(!o)return void console.log(`🔍 [DEBUG-SETTINGS] No category found for tabId: ${t}`);const a=o.components||[],l=SettingsComponents.collectFormValues(e,a);console.log(`🔍 [DEBUG-SETTINGS] Collected settings from tab ${t}:`,l),s={...s,...l}}))):(console.log("🔍 [DEBUG-SETTINGS] Plugin has a single form without tabs"),s=SettingsComponents.collectFormValues(t[0],n)),s.hasOwnProperty("enabled")||(console.log("🔍 [DEBUG-SETTINGS] Adding default enabled=true property"),s.enabled=!0),console.log("🔍 [DEBUG-SETTINGS] Final collected settings:",s),s}(n,t);$(n,e),s=!1,w()}));const p=g.panelContent.querySelectorAll(".settings-tabs .tab-button");if(p.length>0&&(p[0].classList.add("active"),p.forEach((e=>{e.addEventListener("click",(function(){p.forEach((e=>e.classList.remove("active"))),e.classList.add("active");const n=e.getAttribute("data-tab-target");g.panelContent.querySelectorAll(".tab-content").forEach((e=>e.classList.remove("active"))),g.panelContent.querySelector(`.tab-content[data-tab-content="${n}"]`).classList.add("active")}))}))),t&&l.length>0){if(l.forEach((e=>{e.querySelectorAll("input, select, textarea").forEach((e=>{const n="checkbox"===e.type||"radio"===e.type?"change":"input";"checkbox"===e.type&&e.closest(".toggle-switch")?e.addEventListener(n,(function(n){const t=e.closest(".toggle-group");if(t){const n=t.querySelector(".toggle-status");n&&(n.textContent=e.checked?"Enabled":"Disabled")}s=!0,w()})):e.addEventListener(n,(function(e){s=!0,w()}))}));e.querySelectorAll('input[type="range"]').forEach((e=>{const n=e.parentElement.querySelector(".slider-value");n&&e.addEventListener("input",(function(){n.textContent=this.value,s=!0,w()}))}));const o=e.querySelectorAll(".color-picker-compact");if(o.forEach((e=>{const n=e.querySelector(".current-color-display");n&&n.addEventListener("click",(function(n){n.stopPropagation();const t=e.querySelector(".color-picker-expanded");if(!t)return;const i="none"===t.style.display||!t.style.display;o.forEach((e=>{const n=e.querySelector(".color-picker-expanded");n&&(n.style.display="none")})),i&&(t.style.display="block")}));e.querySelectorAll(".color-picker-tab-buttons .tab-button").forEach((n=>{n.addEventListener("click",(function(n){n.stopPropagation();const t=this.getAttribute("data-tab");e.querySelectorAll(".tab-button").forEach((e=>{e.classList.remove("active")})),this.classList.add("active");e.querySelectorAll(".tab-panel").forEach((e=>{e.classList.toggle("active",e.getAttribute("data-panel")===t)}))}))}));e.querySelectorAll(".color-swatch").forEach((n=>{n.addEventListener("click",(function(n){n.stopPropagation();const t=this.getAttribute("data-color-var"),i=(this.getAttribute("data-for"),e.querySelector('input[type="color"]'));if(i){i.setAttribute("data-used-var",t),e.querySelectorAll(".color-swatch").forEach((e=>{e.classList.remove("selected")})),this.classList.add("selected");const n=e.querySelector(".current-color-display");n&&(n.style.backgroundColor=this.style.backgroundColor);const o=e.querySelector(".color-picker-expanded");o&&(o.style.display="none"),s=!0,w()}}))}));const t=e.querySelector('input[type="color"]'),i=e.querySelector(".color-hex-input");t&&t.addEventListener("input",(function(n){n.stopPropagation(),this.setAttribute("data-used-var",""),i&&(i.value=this.value),e.querySelectorAll(".color-swatch").forEach((e=>{e.classList.remove("selected")}));const t=e.querySelector(".current-color-display");t&&(t.style.backgroundColor=this.value),s=!0,w()})),i&&i.addEventListener("input",(function(n){if(n.stopPropagation(),/^#[0-9A-F]{6}$/i.test(this.value)){t&&(t.value=this.value,t.setAttribute("data-used-var","")),e.querySelectorAll(".color-swatch").forEach((e=>{e.classList.remove("selected")}));const n=e.querySelector(".current-color-display");n&&(n.style.backgroundColor=this.value),s=!0,w()}}))})),document.addEventListener("click",(function(e){e.target.closest(".color-picker-compact")||o.forEach((e=>{const n=e.querySelector(".color-picker-expanded");n&&(n.style.display="none")}))})),i&&i.initializeCustomComponents)try{i.initializeCustomComponents(g.panelContent),console.log(`📍 [Settings] Custom components initialized for ${n}`)}catch(e){console.error(`📍 [Settings] Error initializing custom components for ${n}:`,e)}SettingsComponents&&SettingsComponents.bindEventHandlers&&l.forEach((e=>{try{const n=e.getAttribute("data-category");let i=t;if(n){const e=t.find((e=>"category"===e.type&&e.id===n));e&&e.components&&(i=e.components)}SettingsComponents.bindEventHandlers(e,i,(function(e,n){s=!0,w()})),console.log(`📍 [Settings] SettingsComponents event handlers bound for form ${n||"default"}`)}catch(e){console.error("📍 [Settings] Error binding SettingsComponents event handlers:",e)}}))})),i&&i.initializeCustomComponents)try{i.initializeCustomComponents(g.panelContent),console.log(`📍 [Settings] Custom components initialized for ${n}`)}catch(e){console.error(`📍 [Settings] Error initializing custom components for ${n}:`,e)}SettingsComponents&&SettingsComponents.bindEventHandlers&&l.forEach((e=>{try{const n=e.getAttribute("data-category");let i=t;if(n){const e=t.find((e=>"category"===e.type&&e.id===n));e&&e.components&&(i=e.components)}SettingsComponents.bindEventHandlers(e,i,(function(e,n){s=!0,w()})),console.log(`📍 [Settings] SettingsComponents event handlers bound for form ${n||"default"}`)}catch(e){console.error("📍 [Settings] Error binding SettingsComponents event handlers:",e)}}))}}d&&function(){const e=document.querySelector(".dashboard-wrapper");return e&&"false"===e.getAttribute("data-wizard-enabled")?(console.log("Wizards disabled via data-wizard-enabled attribute"),!1):!1!==window.WIZARDS_ENABLED}()?(console.log(`Plugin ${n} has a wizard and wizards are enabled`),Dashboard.loadWizardScript(a).then((e=>{if(e&&e.shouldShowWizard&&e.shouldShowWizard())return console.log(`Showing wizard for ${n}`),r.settings&&r.settings.hide(),Dashboard.showWizard(n);console.log(`Wizard not needed for ${n}, showing regular settings`),o()})).catch((e=>{console.error(`Error loading wizard for ${n}:`,e),o()}))):(d&&console.log(`Wizard for ${n} is disabled globally`),o())}catch(p){console.error(`Error loading settings for plugin ${n}:`,p),r.settings&&r.settings.hide(),g.panelContent.innerHTML='\n            <div class="error-message">\n                <p>Error loading settings for this plugin.</p>\n                <button class="button cancel-button">Close</button>\n            </div>\n        ';const h=g.panelContent.querySelector(".cancel-button");h&&h.addEventListener("click",L)}}function L(){if(console.log("handleClosePanel called, hasUnsavedChanges =",s),s)return console.log("Showing attention animation"),void v();console.log("Closing panel - no unsaved changes"),A()}function A(){g.settingsPanel.classList.remove("visible"),g.overlay.classList.remove("visible"),g.settingsPanel.setAttribute("aria-hidden","true"),i=null,window.activePanel=null,console.log("Active panel ID cleared on panel close"),g.settingsPanel&&g.settingsPanel.removeAttribute("data-plugin-id"),s=!1,m(),setTimeout((()=>{g.panelContent.innerHTML=""}),300)}console.log("dashboardTabs:",g.dashboardTabs),console.log("dashboardTabContents:",g.dashboardTabContents);const T={data:{},register:function(e,n,t){this.data[e]||(this.data[e]={}),this.data[e][n]=t,console.log(`Registered data for custom component ${n} in plugin ${e}`)},get:function(e,n){return this.data[e]&&this.data[e][n]?this.data[e][n]:null}};async function $(n,i={}){const s=t.findIndex((e=>e.id===n));if(-1===s)return;if(console.log(`Saving settings for ${n}:`,i),"enabled"in i){t[s].status=i.enabled?"enabled":"disabled";const e=document.querySelector(`.plugin-card[data-plugin-id="${n}"]`);if(e){const n=e.querySelector(".plugin-status");n&&(n.className="plugin-status status-"+(i.enabled?"enabled":"disabled"),n.textContent=i.enabled?"ENABLED":"DISABLED")}}const o=T.data[n];if(o)for(const e in o)"object"==typeof i[e]?i[e]={...i[e],...o[e]}:i[e]=o[e];if(t[s].settings={...t[s].settings||{},...i},i.license_key||i.trial_start||t[s].licenseStatus)try{if(window.SquareHeroLicensing){const e=await window.SquareHeroLicensing.getPluginData(n);i.license_key&&!e.license_key&&(e.license_key=i.license_key),i.activated_at&&!e.activated_at&&(e.activated_at=i.activated_at);const o=e.status||"inactive",a=t[s].licenseStatus||o;o!==a&&(e.status=a),await window.SquareHeroLicensing.savePluginData(n,e),console.log(`Updated licensing data for ${n}:`,e)}}catch(e){console.error(`Error updating licensing data for ${n}:`,e)}const a=e.getHandlers(n);if(a.onSave){const e=JSON.parse(JSON.stringify(t[s].settings));a.onSave(e)}try{const e=JSON.parse(JSON.stringify(t[s].settings));f(await d.updatePluginSettings(n,e)?"Settings saved to cloud.":"Settings saved locally.")}catch(e){console.error(`Error saving settings to Firebase: ${e.message}`),f("Settings saved locally only.")}return!0}function k(e){if(!e||!e.length)return void(g.newsItemsContainer.innerHTML="<p>No news items available.</p>");const n=e.map((e=>`\n    <div class="news-item">\n        <p class="news-date">${e.date}</p>\n        <h3 class="news-title">${e.title}</h3>\n        <p class="news-content">${e.content||""}</p>\n    </div>\n`)).join("");g.newsItemsContainer.innerHTML=n}function I(){console.log("initTabEventListeners called"),g.dashboardTabs.addEventListener("click",(e=>{if(e.target.classList.contains("dashboard-tab")){!function(e){g.dashboardTabs.querySelectorAll(".dashboard-tab").forEach((e=>{e.classList.remove("active")})),g.dashboardTabContents.forEach((e=>{e.classList.remove("active")})),document.querySelector(`.dashboard-tab[data-tab="${e}"]`).classList.add("active"),document.getElementById(`${e}-tab`).classList.add("active")}(e.target.getAttribute("data-tab"))}}))}const N={};let P=null,F=!1;function z(e){return N[e]||null}function G(e){return new Promise(((n,t)=>{if(!e||"object"!=typeof e)return console.error("Invalid plugin object provided to loadWizardScript"),void t(new Error("Invalid plugin object"));if(!e.id)return console.error("Plugin object is missing id property"),void t(new Error("Plugin missing id property"));const i=u.get(e.id,"wizard");if(i)return console.log(`Wizard module for ${e.id} already loaded`),void n(i);const s=(e.moduleScripts||[]).find((e=>e.includes("/wizard.js")));if(!s)return console.error(`No wizard script found for plugin ${e.id}`),void t(new Error(`No wizard script found for plugin ${e.id}`));const o=document.createElement("script");o.src=s,o.onload=()=>{console.log(`Wizard script loaded for ${e.id}`),setTimeout((()=>{const t=u.get(e.id,"wizard");t?n(t):(console.warn(`Wizard script loaded but no module registered for ${e.id}`),n(null))}),100)},o.onerror=n=>{console.error(`Error loading wizard script for ${e.id}:`,n),t(n)},document.body.appendChild(o)}))}function q(){if(window.activePanel)return window.activePanel;if(i)return i;const e=document.querySelector(".settings-panel.visible");if(e&&e.hasAttribute("data-plugin-id"))return e.getAttribute("data-plugin-id");const n=document.getElementById("plugin-settings-title")?.textContent.trim();if(n&&window.installedPlugins){const e=window.installedPlugins.find((e=>e.name===n));if(e)return e.id}return null}return window.testNotificationBar=function(){s=!0,w(),setTimeout((()=>{v()}),100),console.log("Test notification triggered")},Object.defineProperty(window,"dashboardActivePanel",{get:function(){return q()},enumerable:!0}),window.inspectAndFixPluginSettings=async function(e){if(!e)return console.error("🔧 [SETTINGS-FIX] No pluginId provided"),{error:"No pluginId provided"};console.log(`🔧 [SETTINGS-FIX] Inspecting settings for plugin: ${e}`);try{if(!window.SecureFirebaseAuth||!window.SecureFirebaseAuth.isInitialized)return console.error("🔧 [SETTINGS-FIX] SecureFirebaseAuth not initialized"),{error:"SecureFirebaseAuth not initialized"};if(!window.SecureFirebaseAuth.isAuthenticated())return console.error("🔧 [SETTINGS-FIX] Not authenticated"),{error:"Not authenticated"};const n=window.installedPlugins.find((n=>n.id===e));if(!n)return console.error(`🔧 [SETTINGS-FIX] Plugin ${e} not found in installedPlugins`),{error:"Plugin not found"};const t=n.settings;console.log("🔧 [SETTINGS-FIX] Current settings in memory:",t);const i=window.SecureFirebaseAuth,s=i.currentUser.email,o=i.getSafeFirebaseKey(s),a=i.internalUrl||window.location.hostname,l=i.getSafeFirebaseKey(a);console.log(`🔧 [SETTINGS-FIX] User: ${s} → ${o}`),console.log(`🔧 [SETTINGS-FIX] Site URL: ${a} → ${l}`);const r=`${`users/${o}/sites/${l}/plugins/${e}`}/settings`;console.log(`🔧 [SETTINGS-FIX] Settings path: ${r}`);const{ref:c,get:d,set:u}=i.dbFunctions,g=c(i.db,r),p=await d(g);let h=null;return p.exists()?(h=p.val(),console.log("🔧 [SETTINGS-FIX] Existing settings found in Firebase:",h)):console.log("🔧 [SETTINGS-FIX] No settings found in Firebase path"),!h&&t?(console.log("🔧 [SETTINGS-FIX] Saving current memory settings to Firebase"),await u(g,t),console.log("🔧 [SETTINGS-FIX] ✅ Settings saved successfully to Firebase"),{action:"created",settings:t,path:r}):h&&JSON.stringify(h)!==JSON.stringify(t)?(console.log("🔧 [SETTINGS-FIX] Settings in Firebase differ from memory, updating memory with Firebase values"),n.settings=h,console.log("🔧 [SETTINGS-FIX] ✅ Updated memory settings:",n.settings),{action:"updated_memory",settings:h,path:r}):(console.log("🔧 [SETTINGS-FIX] ✓ Settings are synchronized between memory and Firebase"),{action:"none",settings:h||t,path:r})}catch(e){return console.error("🔧 [SETTINGS-FIX] Error:",e),{error:e.message,stack:e.stack}}},{init:async function(){if(c||window.dashboardInitialized)console.log("🎯 [Dashboard] Initialization already in progress or completed, skipping");else{c=!0,window.dashboardInitialized=!0;try{if(console.log("🎯 [Dashboard] Starting initialization"),console.log("🎯 [Dashboard] Initializing licensing system"),window.SquareHeroLicensing)try{await window.SquareHeroLicensing.initialize({debug:!0,autoSyncWithFirebase:!0}),console.log("🎯 [Dashboard] Licensing system initialized")}catch(e){console.error("🎯 [Dashboard] Error initializing licensing system:",e)}else console.warn("🎯 [Dashboard] Licensing system not available");await async function(){if(console.log("🎯 [Dashboard] Loading skeleton loader"),!window.SkeletonLoader)return new Promise(((e,n)=>{const t=document.createElement("link");t.rel="stylesheet",t.href="skeleton-loader.css",t.onerror=()=>{console.log("🎯 [Dashboard] Local skeleton CSS failed, trying CDN"),t.href="https://cdn.jsdelivr.net/gh/squarehero-store/dashboard@0/skeleton-loader.min.css"},t.onload=()=>{console.log("🎯 [Dashboard] Skeleton CSS loaded");const t=document.createElement("script");t.src="skeleton-loader.js",t.onerror=n,t.onload=()=>{console.log("🎯 [Dashboard] Skeleton script loaded"),setTimeout((()=>{window.SkeletonLoader?(console.log("🎯 [Dashboard] SkeletonLoader ready"),e()):n(new Error("SkeletonLoader not initialized"))}),100)},document.body.appendChild(t)},document.head.appendChild(t)}));console.log("🎯 [Dashboard] SkeletonLoader already loaded")}(),console.log("🎯 [Dashboard] Skeleton loader loaded"),g.closeButton.addEventListener("click",L),g.overlay.addEventListener("click",L),document.addEventListener("keydown",(function(e){"Escape"===e.key&&i&&L()})),document.getElementById("logout-button").addEventListener("click",(async()=>{try{const{getAuth:e,signOut:n}=await import("https://www.gstatic.com/firebasejs/11.5.0/firebase-auth.js"),t=e();await n(t),window.location.href="login.html"}catch(e){console.error("Error signing out:",e)}})),console.log("🎯 [Dashboard] Event listeners initialized"),I(),window.SkeletonLoader?(console.log("🎯 [Dashboard] Creating skeleton loaders"),r.plugins=window.SkeletonLoader.show("plugin-cards-container","pluginCard",3),r.news=window.SkeletonLoader.show("news-items-container","newsItem",4),console.log("🎯 [Dashboard] Skeleton loaders created:",r)):console.error("🎯 [Dashboard] SkeletonLoader not available"),await d.initialize(),console.log("🎯 [Dashboard] Firebase initialized"),console.log("🎯 [Dashboard] Checking authentication status"),window.SecureFirebaseAuth&&window.SecureFirebaseAuth.isInitialized||(console.warn("🎯 [Dashboard] Firebase authentication not initialized, attempting to initialize"),window.SecureFirebaseAuth&&"function"==typeof window.SecureFirebaseAuth.initialize&&await window.SecureFirebaseAuth.initialize());const e=await async function(e=3){if(console.log("🔒 [Auth-Check] Checking authentication status..."),d.isAuthenticated())return console.log("🔒 [Auth-Check] Already authenticated ✓"),!0;if(console.log("🔒 [Auth-Check] Not currently authenticated, checking Firebase auth directly"),window.SecureFirebaseAuth&&window.SecureFirebaseAuth.auth){const e=window.SecureFirebaseAuth.auth.currentUser;if(e)return console.log("🔒 [Auth-Check] Found authenticated user in Firebase:",e.email),window.SecureFirebaseAuth.currentUser=e,!0}for(let n=0;n<e;n++){if(console.log(`🔒 [Auth-Check] Waiting for authentication (attempt ${n+1}/${e})...`),await new Promise((e=>setTimeout(e,1e3))),d.isAuthenticated())return console.log("🔒 [Auth-Check] Successfully authenticated after retry ✓"),!0;if(window.SecureFirebaseAuth&&window.SecureFirebaseAuth.auth&&window.SecureFirebaseAuth.auth.currentUser)return console.log("🔒 [Auth-Check] Found authenticated user after retry:",window.SecureFirebaseAuth.auth.currentUser.email),window.SecureFirebaseAuth.currentUser=window.SecureFirebaseAuth.auth.currentUser,!0}return console.log("🔒 [Auth-Check] Authentication check failed after retries ✗"),!1}();if(console.log("🎯 [Dashboard] Authentication status: "+(e?"Authenticated ✓":"Not authenticated ✗")),n=await async function(){try{console.log("🔄 [DEBUG-FETCH] Fetching plugins.json with cache busting");const e=(new Date).getTime(),n=await fetch(`https://cdn.jsdelivr.net/gh/squarehero-store/dashboard@latest/plugins.json?_=${e}`);if(!n.ok)throw console.error("❌ [DEBUG-FETCH] Failed to load plugins.json:",n.status,n.statusText),new Error("Failed to load plugins.json");console.log("✅ [DEBUG-FETCH] Successfully loaded plugins.json");const t=(await n.json()).plugins||[];if(console.log(`📋 [DEBUG-FETCH] Loaded ${t.length} plugins from JSON`),window.SquareHeroLicensing&&window.SquareHeroLicensing._initialized){console.log("🔑 [Licensing] Checking license status for plugins");for(const e of t)try{const n=await window.SquareHeroLicensing.getPluginData(e.id);if(e.licenseStatus=n.status||"inactive","trial"===e.licenseStatus){const n=await window.SquareHeroLicensing.checkTrialStatus(e.id);e.trialData=n,n.expired&&(e.licenseStatus="unauthorized")}console.log(`🔑 [Licensing] License status for ${e.id}: ${e.licenseStatus}`)}catch(n){console.error(`🔑 [Licensing] Error checking license for ${e.id}:`,n),e.licenseStatus="inactive"}}else{console.log("🔑 [Licensing] Licensing system not initialized, skipping license checks");for(const e of t)e.licenseStatus="inactive"}return t}catch(e){return console.error("Error loading plugins:",e),[]}}(),console.log("🎯 [Dashboard] Available plugins loaded:",n),t=function(e){const n=[];console.log("🔍 [DEBUG-INSTALLED] Looking for script tags with data-squarehero-plugin attribute"),document.querySelectorAll("script[data-squarehero-plugin]").forEach((e=>{const t=e.getAttribute("data-squarehero-plugin");n.push(t),console.log(`🔍 [DEBUG-INSTALLED] Found installed plugin: ${t}`)})),console.log("🔍 [DEBUG-INSTALLED] All detected installed plugin IDs:",n);const t=e.filter((e=>n.includes(e.id)));return console.log("🔍 [DEBUG-INSTALLED] Matched installed plugins from available plugins:",t.map((e=>e.id))),0===t.length&&"localhost"===window.location.hostname?(console.log("🔍 [DEBUG-INSTALLED] No installed plugins detected. In production, no plugins would be shown."),e):t}(n),console.log("🎯 [Dashboard] Installed plugins detected:",t),window.installedPlugins=t,console.log("🎯 [Dashboard] Rendering discover plugins with detected installed plugins"),C(),t.length>0){console.log("🎯 [Dashboard] Loading settings for installed plugins");try{await Promise.all(t.map((async e=>{try{console.log(`🎯 [Dashboard] Loading settings for ${e.id}`);const n={enabled:!0},t=await d.getPluginSettings(e.id,n);if(e.settings=t,e.status=!1===t.enabled?"disabled":"enabled",window.SquareHeroLicensing)try{const n=await window.SquareHeroLicensing.getPluginData(e.id);if(e.licenseStatus=n.status||"inactive","trial"===e.licenseStatus){const n=await window.SquareHeroLicensing.checkTrialStatus(e.id);e.trialData=n,n.expired&&(e.licenseStatus="unauthorized")}console.log(`🎯 [Dashboard] License status for ${e.id}: ${e.licenseStatus}`)}catch(n){console.error(`🎯 [Dashboard] Error getting license data for ${e.id}:`,n),e.licenseStatus="inactive"}console.log(`🎯 [Dashboard] Settings loaded for ${e.id}:`,e.settings),console.log(`🎯 [Dashboard] Plugin status set to: ${e.status} based on enabled=${e.settings.enabled}`)}catch(n){console.error(`🎯 [Dashboard] Error loading settings for ${e.id}:`,n),e.settings={enabled:!0},e.status="enabled",e.licenseStatus="inactive"}}))),console.log("🎯 [Dashboard] Loading plugin scripts"),await Promise.all(t.map(y)),console.log("🎯 [Dashboard] Plugin scripts loaded"),console.log("🎯 [Dashboard] Rendering plugin cards"),await(console.log("🔍 [DEBUG-RENDER] Rendering plugin cards with installedPlugins:",t?.length),console.log("🔍 [DEBUG-RENDER] Plugin data being rendered:",JSON.stringify(t.map((e=>({id:e.id,status:e.status,settings:e.settings?.enabled}))))),t&&t.length?Promise.all(t.map(E)).then((e=>{console.log("🔍 [DEBUG-RENDER] Card creation promises resolved, about to update DOM");const n=g.pluginCardsContainer.innerHTML;console.log("🔍 [DEBUG-RENDER] Clearing container with existing content length:",n.length),g.pluginCardsContainer.innerHTML="",e.forEach((e=>{if(e){const n=e.getAttribute("data-plugin-id"),i=t.find((e=>e.id===n)),s=i?.status||"unknown";console.log(`🔍 [DEBUG-RENDER] Adding card for ${n} with status: ${s}`),g.pluginCardsContainer.appendChild(e)}})),0===g.pluginCardsContainer.children.length?(g.pluginCardsContainer.innerHTML="<p>No plugins available.</p>",console.log('🔍 [DEBUG-RENDER] No cards were created, showing "No plugins available" message')):console.log("🔍 [DEBUG-RENDER] Added cards to DOM, total count:",g.pluginCardsContainer.children.length),r.plugins&&(console.log("🔍 [DEBUG-RENDER] Hiding plugin card skeletons after rendering cards"),r.plugins.hide())})).catch((e=>{console.error("Error rendering plugin cards:",e),g.pluginCardsContainer.innerHTML="<p>Error loading plugins. Please try again later.</p>",r.plugins&&r.plugins.hide()})):(g.pluginCardsContainer.innerHTML="<p>No plugins installed on this site. Visit the SquareHero plugin store to browse available plugins.</p>",void(r.plugins&&(console.log("🎯 [Dashboard] Hiding plugin card skeletons (no plugins)"),r.plugins.hide())))),console.log("🎯 [Dashboard] Plugin cards rendered")}catch(e){console.error("🎯 [Dashboard] Error loading plugin settings:",e),r.plugins&&r.plugins.hide(),g.pluginCardsContainer.innerHTML="<p>Error loading plugin settings. Please try again later.</p>"}}else console.log("🎯 [Dashboard] No plugins installed"),r.plugins&&(console.log("🎯 [Dashboard] Hiding plugin card skeletons (no plugins)"),r.plugins.hide()),g.pluginCardsContainer.innerHTML="<p>No plugins installed on this site. Visit the SquareHero plugin store to browse available plugins.</p>";await async function(){try{console.log("loadNewsItems() - Dashboard.FirebaseService.db:",Dashboard.FirebaseService.db),console.log("loadNewsItems() - typeof Dashboard.FirebaseService.db:",typeof Dashboard.FirebaseService.db),console.log("loadNewsItems() - Dashboard.FirebaseService.ref:",Dashboard.FirebaseService.ref),console.log("loadNewsItems() - typeof Dashboard.FirebaseService.ref:",typeof Dashboard.FirebaseService.ref);const e=ref(Dashboard.FirebaseService.db,"news"),n=(await get(e)).val();if(n){k(Object.entries(n).map((([e,n])=>({...n,id:e}))).sort(((e,n)=>n.timestamp-e.timestamp)).map((e=>({date:new Date(e.timestamp).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}),title:e.title,content:e.content}))))}else k([]);await new Promise((e=>setTimeout(e,400))),r.news&&r.news.hide()}catch(e){console.error("Error loading news items from Firebase:",e),g.newsItemsContainer.innerHTML="<p>Error loading news items.</p>",r.news&&r.news.hide()}}(),console.log("🎯 [Dashboard] Dashboard initialized successfully!"),c=!1}catch(e){console.error("🎯 [Dashboard] Error initializing dashboard:",e),c=!1,r.plugins&&(console.log("🎯 [Dashboard] Hiding plugin card skeletons (error)"),r.plugins.hide()),r.news&&(console.log("🎯 [Dashboard] Hiding news skeletons (error)"),r.news.hide()),g.pluginCardsContainer.innerHTML=`\n                <div class="error-message">\n                    <p>Error initializing dashboard: ${e.message}</p>\n                    <button class="button" id="retry-auth-button">Retry Authentication</button>\n                </div>\n            `,setTimeout((()=>{const e=document.getElementById("retry-auth-button");e&&e.addEventListener("click",(async()=>{console.log("🎯 [Dashboard] Retrying authentication..."),g.pluginCardsContainer.innerHTML='<div class="loading-indicator"><p>Authenticating...</p></div>',c=!1,window.dashboardInitialized=!1,Dashboard.init()}))}),0)}}},PluginRegistry:u,PluginSettingsRegistry:e,loadPluginSettingsModule:D,closeSettingsPanel:A,createDefaultCard:function(e){console.log(`🔍 [DEBUG-CARD] Creating default card for plugin: ${e.id}`),console.log("🔍 [DEBUG-CARD] Plugin status from data:",e.status),console.log("🔍 [DEBUG-CARD] Plugin settings:",e.settings);const n=document.createElement("div");n.className="plugin-card",n.setAttribute("data-plugin-id",e.id);const t=e.status||"disabled";return console.log("🔍 [DEBUG-CARD] Using status:",t),n.innerHTML=`\n            <div class="top-wrapper">\n            <div class="plugin-icon">\n                <img src="${e.icon}" alt="${e.name} icon">\n            </div>\n            <div class="status-wrapper">\n            <span class="plugin-status status-${t}">${t.toUpperCase()}</span>\n            </div>\n            </div>\n            <div class="plugin-content">\n                <div class="plugin-header">\n                    <h3 class="plugin-title">${e.name}</h3>\n                </div>\n                <p class="plugin-description">${e.description}</p>\n            </div>\n        `,n.addEventListener("click",(function(){D(e.id)})),n},markUnsavedChanges:function(e){s=e,w()},updateNotificationState:w,CustomComponentDataRegistry:T,FirebaseService:d,registerWizardSchema:function(e,n){N[e]=n,console.log(`Registered wizard schema for plugin: ${e}`)},getWizardSchema:z,hasWizard:function(e){const t=n.find((n=>n.id===e));return t&&!0===t.hasWizard},loadWizardScript:G,showWizard:function(e){const n=t.find((n=>n.id===e));if(!n)return console.error(`Plugin ${e} not found`),Promise.reject(new Error(`Plugin ${e} not found`));if(!F){const e=document.createElement("link");e.rel="stylesheet",e.href="wizard-component.css",document.head.appendChild(e),F=!0}return G(n).then((n=>{if(!n)throw new Error(`Wizard module not found for ${e}`);P=e;const t=z(e);if(!t)throw new Error(`Wizard schema not found for ${e}`);const i=document.getElementById("panel-content");if(!i)throw new Error("Panel content element not found");if(!window.ComponentSystem)throw new Error("ComponentSystem not available");return i.innerHTML=window.ComponentSystem.renderComponents(t,{}),window.ComponentSystem.bindEvents(i,t,((e,n)=>{console.log(`Wizard setting changed: ${e} = ${n}`)})),console.error("Error showing wizard:",err),Promise.reject(err)}))},refreshCurrentPanel:function(){if(!i)return;const e=i;A(),setTimeout((()=>{D(e)}),500)},getActivePluginId:q}}();document.addEventListener("DOMContentLoaded",(function(){Dashboard.init();const e=document.getElementById("settings-panel");if(e){new MutationObserver((function(e){e.forEach((function(e){if("attributes"===e.type&&"class"===e.attributeName&&e.target.classList.contains("visible")&&!window.activePanel){const n=Dashboard.getActivePluginId();n&&(window.activePanel=n,console.log("Active panel ID updated via observer:",n),e.target.hasAttribute("data-plugin-id")||e.target.setAttribute("data-plugin-id",n))}}))})).observe(e,{attributes:!0}),console.log("Panel observer initialized")}})),window.getActivePluginId=function(){if(Dashboard&&Dashboard.getActivePluginId)return Dashboard.getActivePluginId();if(window.activePanel)return window.activePanel;const e=document.querySelector(".settings-panel.visible");if(e&&e.hasAttribute("data-plugin-id"))return e.getAttribute("data-plugin-id");const n=document.getElementById("plugin-settings-title")?.textContent.trim();if(n&&window.installedPlugins){const e=window.installedPlugins.find((e=>e.name===n));if(e)return e.id}return null},window.dashboardPatchApplied=!0,window.Dashboard=Dashboard;