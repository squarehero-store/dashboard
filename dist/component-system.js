const ComponentSystem=function(){const n={},e={},t={onChange:null,onSave:null};function o(e,t){return n[e]={render:t.render||function(){return`<p>No renderer for component type: ${e}</p>`},getValue:t.getValue||function(){return null},bindEvents:t.bindEvents||function(){},defaults:t.defaults||{}},console.log(`Registered component type: ${e}`),n[e]}return{init:function(){o("text",{render:function(n,e){const t=void 0!==e[n.id]?e[n.id]:n.default||"";return`\n            <div class="form-group ${n.width?`form-group-${n.width}`:""}">\n              <label for="${n.id}">${n.label}</label>\n              <input type="text" id="${n.id}" name="${n.id}" value="${t}" \n                    class="setting-input" ${n.placeholder?`placeholder="${n.placeholder}"`:""}>\n              ${n.helpText?`<p class="setting-help">${n.helpText}</p>`:""}\n            </div>\n          `},getValue:function(n,e){const t=n.querySelector(`#${e.id}`);return t?t.value:e.default||""},bindEvents:function(n,e,t){const o=n.querySelector(`#${e.id}`);o&&t&&o.addEventListener("input",(function(){t(e.id,o.value)}))}}),o("custom",{render:function(n,e){return`\n        <div class="form-group form-group-full">\n          <div id="${n.id}-container" class="custom-component-container" data-component-id="${n.id}" data-script="${n.script}">\n            <div class="loading-indicator">\n              <p>Loading ${n.label}...</p>\n            </div>\n          </div>\n        </div>\n      `},getValue:function(n,e){return window[`${e.id}Values`]||{}},bindEvents:function(n,e,t){const o=n.querySelector(`#${e.id}-container`);if(!o)return;const i=e.script;if(i&&!document.querySelector(`script[src="${i}"]`)){const n=document.createElement("script");n.src=i,n.onload=function(){console.log(`Custom component script loaded: ${i}`)},n.onerror=function(){console.error(`Failed to load custom component script: ${i}`),o&&(o.innerHTML='\n              <div class="error-message">\n                <p>Failed to load component. Please check the console for details.</p>\n              </div>\n            ')},document.head.appendChild(n)}}}),o("toggle",{render:function(n,e){const t=void 0!==e[n.id]?e[n.id]:n.default;return`\n            <div class="form-group toggle-group ${n.width?`form-group-${n.width}`:""}">\n              <label class="toggle-label">\n                <input type="checkbox" id="${n.id}" name="${n.id}" ${t?"checked":""}>\n                <span class="toggle-slider"></span>\n                <span class="toggle-text">${n.label}</span>\n              </label>\n              ${n.helpText?`<p class="setting-help">${n.helpText}</p>`:""}\n            </div>\n          `},getValue:function(n,e){const t=n.querySelector(`#${e.id}`);return t?t.checked:e.default||!1},bindEvents:function(n,e,t){const o=n.querySelector(`#${e.id}`);o&&t&&o.addEventListener("change",(function(){t(e.id,o.checked)}))}}),o("dropdown",{render:function(n,e){const t=void 0!==e[n.id]?e[n.id]:n.default;return`\n            <div class="form-group ${n.width?`form-group-${n.width}`:""}">\n              <label for="${n.id}">${n.label}</label>\n              <select id="${n.id}" name="${n.id}" class="setting-input">\n                ${n.options.map((n=>`<option value="${n.value}" ${t===n.value?"selected":""}>${n.label}</option>`)).join("")}\n              </select>\n              ${n.helpText?`<p class="setting-help">${n.helpText}</p>`:""}\n            </div>\n          `},getValue:function(n,e){const t=n.querySelector(`#${e.id}`);return t?t.value:e.default||""},bindEvents:function(n,e,t){const o=n.querySelector(`#${e.id}`);o&&t&&o.addEventListener("change",(function(){t(e.id,o.value)}))}}),o("slider",{render:function(n,e){const t=void 0!==e[n.id]?e[n.id]:n.default||0;return`\n            <div class="form-group ${n.width?`form-group-${n.width}`:""}">\n              <label for="${n.id}">${n.label}</label>\n              <div class="slider-container">\n                <input type="range" id="${n.id}" name="${n.id}" value="${t}" \n                      min="${n.min||0}" max="${n.max||100}" step="${n.step||1}" \n                      class="slider-input">\n                <span class="slider-value">${t}</span>\n              </div>\n              ${n.helpText?`<p class="setting-help">${n.helpText}</p>`:""}\n            </div>\n          `},getValue:function(n,e){const t=n.querySelector(`#${e.id}`);return t?parseFloat(t.value):e.default||0},bindEvents:function(n,e,t){const o=n.querySelector(`#${e.id}`),i=o?.closest(".slider-container")?.querySelector(".slider-value");o&&i&&t&&o.addEventListener("input",(function(){i.textContent=o.value,t(e.id,parseFloat(o.value))}))}}),console.log("Component System initialized")},registerComponentType:o,registerValidator:function(n,t){e[n]=t,console.log(`Registered validator for: ${n}`)},setGlobalChangeHandler:function(n){t.onChange=n},setGlobalSaveHandler:function(n){t.onSave=n},renderComponents:function(e,t={}){return e.map((e=>{const o=e.type;if(!o||!n[o])return console.warn(`Unknown component type: ${o}`),"";return(0,n[o].render)(e,t)})).join("")},collectValues:function(e,t){const o={};return t.forEach((t=>{const i=t.type;if(!i||!n[i])return void console.warn(`Skipping value collection for unknown component type: ${i}`);if("title"===i||"category"===i)return;const r=n[i].getValue;o[t.id]=r(e,t)})),o},bindEvents:function(e,o,i){o.forEach((o=>{const r=o.type;if(!r||!n[r])return void console.warn(`Skipping event binding for unknown component type: ${r}`);(0,n[r].bindEvents)(e,o,i||t.onChange)}))},extractAllComponents:function(n){const e=n.filter((n=>"category"!==n.type)),t=[];return n.filter((n=>"category"===n.type)).forEach((n=>{Array.isArray(n.components)&&t.push(...n.components)})),[...e,...t]}}}();document.addEventListener("DOMContentLoaded",(function(){ComponentSystem.init()})),window.ComponentSystem=ComponentSystem;