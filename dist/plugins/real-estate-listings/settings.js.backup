/**
 * SquareHero Real Estate Listings Plugin - Settings Schema with Wizard Integration
 * Settings schema for the Real Estate Listings plugin
 */

(function() {
    // Debug logger for settings script
    const debugLog = function(message, obj) {
        console.log(`[REAL-ESTATE-SETTINGS] ${message}`, obj || '');
    };
    
    debugLog('Settings script initializing');
    
    // Helper function for wizard setup check with safe fallback
    function isWizardSetupRequired(wizardId) {
        try {
            // If Dashboard wizard system exists, use it
            if (window.Dashboard && window.Dashboard.WizardSystem && 
                typeof window.Dashboard.WizardSystem.isWizardRequired === 'function') {
                return window.Dashboard.WizardSystem.isWizardRequired(wizardId);
            }
            
            // Otherwise use simple localStorage check
            return localStorage.getItem(`${wizardId}_completed`) !== 'true';
        } catch (e) {
            debugLog('Error checking wizard status, assuming not required', e);
            return false;
        }
    }

    // Initialize wizard safely
    function initRealEstateWizard(container) {
        try {
            // Check if wizard script loader exists
            if (window.Dashboard && window.Dashboard.WizardSystem && 
                typeof window.Dashboard.WizardSystem.loadWizard === 'function') {
                debugLog('Loading wizard using Dashboard.WizardSystem');
                window.Dashboard.WizardSystem.loadWizard('real-estate-listings', container);
            } else {
                // Fallback to direct script loading
                debugLog('Wizard system not found, using fallback script loading');
                
                const script = document.createElement('script');
                script.src = 'plugins/real-estate-listings/wizard.js';
                script.onload = () => {
                    debugLog('Wizard script loaded');
                    if (window.RealEstateWizard && typeof window.RealEstateWizard.init === 'function') {
                        window.RealEstateWizard.init(container);
                    } else {
                        container.innerHTML = '<p>Wizard could not be initialized.</p>';
                    }
                };
                script.onerror = () => {
                    debugLog('Error loading wizard script');
                    container.innerHTML = '<p>Could not load the setup wizard.</p>';
                };
                document.head.appendChild(script);
            }
        } catch (e) {
            debugLog('Error initializing wizard', e);
            container.innerHTML = '<p>Error initializing setup wizard.</p>';
        }
    }
    
    // Define the settings schema
    debugLog('Defining settings schema');
    const realEstateListingsSettings = [
        // Optional: Show wizard if setup is not complete
        {
            type: 'custom',
            id: 'setup-wizard-container',
            render: function() {
                // Global dashboard test mode check - looks for data-wizard-enabled attribute
                const dashboardElement = document.querySelector('.dashboard-wrapper, body');
                const wizardGloballyDisabled = dashboardElement && dashboardElement.getAttribute('data-wizard-enabled') === 'false';
                
                // Check for test mode flag - add this to disable wizard temporarily
                const wizardLocallyDisabled = localStorage.getItem('disable_wizard') === 'true';
                
                // Only show if wizard setup is not completed and not disabled globally or locally
                if (wizardGloballyDisabled || wizardLocallyDisabled || !isWizardSetupRequired('real-estate-setup-wizard')) {
                    return '';
                }
                
                return '<div id="real-estate-wizard-container"></div>';
            },
            bindEvents: function(form) {
                const wizardContainer = form.querySelector('#real-estate-wizard-container');
                if (wizardContainer) {
                    initRealEstateWizard(wizardContainer);
                }
            }
        },
        
        // Normal settings - these will be visible after wizard completion
        {
            type: 'category',
            id: 'general',
            label: 'General',
            isDefault: true,
            components: [
                { 
                    type: 'toggle', 
                    id: 'enabled', 
                    label: 'Enable Real Estate Listings Plugin', 
                    default: true
                },
                {
                    type: 'text',
                    id: 'collection-slug',
                    label: 'Collection URL Path',
                    default: 'find-your-home',
                    helpText: 'The URL path of your Squarespace blog collection with property listings'
                },
                {
                    type: 'text',
                    id: 'listing-title',
                    label: 'Listings Section Title',
                    width: 'half',
                    default: 'Properties',
                    placeholder: 'Enter title for your listings section',
                    helpText: 'This will appear as the main heading for your listings section'
                },
                {
                    type: 'dropdown', 
                    id: 'layout', 
                    label: 'Default Layout',
                    width: 'half',
                    options: [
                        { value: 'grid', label: 'Grid View' },
                        { value: 'list', label: 'List View' },
                        { value: 'map', label: 'Map View' }
                    ],
                    default: 'grid',
                    helpText: 'The default view your visitors will see'
                },
                {
                    type: 'slider',
                    id: 'items-per-page',
                    label: 'Items Per Page',
                    width: 'half',
                    min: 3,
                    max: 24,
                    step: 3,
                    default: 9,
                    helpText: 'Number of properties to display per page'
                },
                {
                    type: 'dropdown', 
                    id: 'grid-columns', 
                    label: 'Grid Columns',
                    width: 'half',
                    options: [
                        { value: '2', label: '2 Columns' },
                        { value: '3', label: '3 Columns' },
                        { value: '4', label: '4 Columns' }
                    ],
                    default: '3',
                    helpText: 'Number of columns'
                },
                { 
                    type: 'color', 
                    id: 'price-color', 
                    label: 'Price Text Color', 
                    width: 'half',
                    default: 'slot5'
                },
                { 
                    type: 'color', 
                    id: 'status-bg-color', 
                    label: 'Status Badge Background', 
                    width: 'half',
                    default: 'slot1'
                }
            ]
        },
        {
            type: 'category',
            id: 'properties',
            label: 'Manage Properties',
            components: [
                {
                    type: 'custom',
                    id: 'property-manager',
                    label: 'Manage Properties',
                    render: function() {
                        return `<div id="property-manager-container" class="property-manager-wrapper">
                                    <div class="loading-indicator">Loading property manager...</div>
                                </div>`;
                    },
                    bindEvents: function(form) {
                        const container = form.querySelector('#property-manager-container');
                        if (container) {
                            debugLog('Initializing property manager container');
                            
                            // Add flags to track loading state
                            window._propertyManagerLoading = {
                                attemptCount: 0,
                                maxAttempts: 2,
                                loaded: false,
                                errors: []
                            };
                            
                            // Function to try loading the script
                            const loadPropertyManager = (urlToTry, isLocalFallback = false) => {
                                debugLog(`${isLocalFallback ? 'FALLBACK: ' : ''}Trying to load from: ${urlToTry}`);
                                window._propertyManagerLoading.attemptCount++;
                                
                                // Use fetch instead of script tag to have more control
                                fetch(urlToTry)
                                    .then(response => {
                                        debugLog(`${isLocalFallback ? 'FALLBACK: ' : ''}Fetch response status: ${response.status}`);
                                        if (!response.ok) {
                                            throw new Error(`Failed to load property manager. Status: ${response.status}`);
                                        }
                                        return response.text();
                                    })
                                    .then(scriptContent => {
                                        try {
                                            debugLog(`${isLocalFallback ? 'FALLBACK: ' : ''}Script content received, length: ${scriptContent.length}`);
                                            
                                            // Check for import statements which could be causing the issue
                                            const importMatches = scriptContent.match(/import\s+.*?from\s+['"].*?['"]/g) || [];
                                            if (importMatches.length > 0) {
                                                debugLog(`${isLocalFallback ? 'FALLBACK: ' : ''}Found import statements that may cause issues: ${JSON.stringify(importMatches)}`);
                                                
                                                // If imports are found, remove them
                                                scriptContent = scriptContent.replace(/import\s+.*?from\s+['"].*?['"]/g, '// Import removed');
                                            }
                                            
                                            // Execute the script content in the current context
                                            debugLog(`${isLocalFallback ? 'FALLBACK: ' : ''}Executing script content`);
                                            const scriptFunction = new Function(scriptContent);
                                            scriptFunction();
                                            debugLog(`${isLocalFallback ? 'FALLBACK: ' : ''}Script execution complete`);
                                            
                                            // After script execution, initialize the property manager
                                            if (window.PropertyManager && typeof window.PropertyManager.initialize === 'function') {
                                                debugLog(`${isLocalFallback ? 'FALLBACK: ' : ''}PropertyManager object found, initializing`);
                                                window._propertyManagerLoading.loaded = true;
                                                window.PropertyManager.initialize(container.id);
                                            } else {
                                                debugLog(`${isLocalFallback ? 'FALLBACK: ' : ''}PropertyManager object not found or initialize method not available`);
                                                throw new Error('PropertyManager object not found after script execution');
                                            }
                                        } catch (error) {
                                            debugLog(`${isLocalFallback ? 'FALLBACK: ' : ''}Error executing property manager script: ${error.message}`);
                                            console.error(error);
                                            
                                            // Add to errors list
                                            window._propertyManagerLoading.errors.push({
                                                url: urlToTry,
                                                error: error.message,
                                                isLocalFallback
                                            });
                                            
                                            // Try local file as fallback if this was the CDN attempt
                                            if (!isLocalFallback && window._propertyManagerLoading.attemptCount < window._propertyManagerLoading.maxAttempts) {
                                                debugLog('CDN load failed, trying local file as fallback');
                                                loadPropertyManager('plugins/real-estate-listings/property-manager.js', true);
                                            } else {
                                                container.innerHTML = `<div class="error-message">Error loading property manager: ${error.message}</div>`;
                                            }
                                        }
                                    })
                                    .catch(error => {
                                        debugLog(`${isLocalFallback ? 'FALLBACK: ' : ''}Fetch error: ${error.message}`);
                                        
                                        // Add to errors list
                                        window._propertyManagerLoading.errors.push({
                                            url: urlToTry,
                                            error: error.message,
                                            isLocalFallback
                                        });
                                        
                                        // Try local file as fallback if this was the CDN attempt
                                        if (!isLocalFallback && window._propertyManagerLoading.attemptCount < window._propertyManagerLoading.maxAttempts) {
                                            debugLog('CDN load failed, trying local file as fallback');
                                            loadPropertyManager('plugins/real-estate-listings/property-manager.js', true);
                                        } else {
                                            container.innerHTML = `<div class="error-message">Error loading property manager: ${error.message}</div>`;
                                        }
                                    });
                            };
                            
                            // Start with local version for more reliability
                            debugLog('Starting with local version for reliability');
                            loadPropertyManager('plugins/real-estate-listings/property-manager.js', true);
                        } else {
                            debugLog('Container element #property-manager-container not found');
                        }
                    }
                }
            ]
        },
        {
            type: 'category',
            id: 'filtering',
            label: 'Filtering',
            components: [
                {
                    type: 'toggle',
                    id: 'show-filters',
                    label: 'Enable Filtering',
                    default: true,
                    helpText: 'Allow visitors to filter properties by price, bedrooms, etc.'
                },
                {
                    type: 'checkbox-group',
                    id: 'visible-filters',
                    label: 'Filter options',
                    options: [
                        { value: 'price', label: 'Price' },
                        { value: 'bedrooms', label: 'Bedrooms' },
                        { value: 'bathrooms', label: 'Bathrooms' },
                        { value: 'area', label: 'Area (sq ft/m²)' },
                        { value: 'status', label: 'Property Status' }
                    ],
                    default: ['price', 'bedrooms', 'bathrooms', 'area', 'status'],
                    helpText: 'Select which filter options to display in the property filter'
                },
                {
                    type: 'text',
                    id: 'categories-label',
                    label: 'Categories label',
                    width: 'half',
                    default: 'Location',
                    helpText: 'The label above the categories dropdown in the filter'
                },
                {
                    type: 'text',
                    id: 'tags-label',
                    label: 'Tags label',
                    width: 'half',
                    default: 'Status',
                    helpText: 'The label above the tags dropdown in the filter'
                }
            ]
        },
        {
            type: 'category',
            id: 'fields',
            label: 'Fields & Data',
            components: [
                {
                    type: 'checkbox-group',
                    id: 'visible-fields',
                    label: 'Property Information to Display',
                    options: [
                        { value: 'price', label: 'Price' },
                        { value: 'bedrooms', label: 'Bedrooms' },
                        { value: 'bathrooms', label: 'Bathrooms' },
                        { value: 'area', label: 'Area (sq ft/m²)' },
                        { value: 'garage', label: 'Garage Spaces' },
                        { value: 'year', label: 'Year Built' },
                        { value: 'status', label: 'Property Status' }
                    ],
                    default: ['price', 'bedrooms', 'bathrooms', 'area', 'status'],
                    helpText: 'Select which property details to display in the listing'
                },
                {
                    type: 'text',
                    id: 'currency-symbol',
                    label: 'Currency Symbol',
                    width: 'half',
                    default: '$',
                    helpText: 'Symbol to display before prices'
                },
                {
                    type: 'dropdown',
                    id: 'area-unit',
                    label: 'Area Unit',
                    width: 'half',
                    options: [
                        { value: 'sqft', label: 'Square Feet' },
                        { value: 'sqm', label: 'Square Meters' }
                    ],
                    default: 'sqft',
                    helpText: 'Unit to use for property area'
                }
            ]
        }
    ];

    // Immediate registration - Don't delay this
    try {
        debugLog('Attempting to register settings schema');
        
        // Check if PluginRegistry exists
        if (typeof window.PluginRegistry !== 'undefined') {
            debugLog('PluginRegistry found, registering schema');
            
            // Register settings schema
            window.PluginRegistry.registerSettingsSchema('real-estate-listings', realEstateListingsSettings, {
                // Event handlers
                onChange: (settingId, value) => {
                    debugLog(`Setting changed: ${settingId} = ${value}`);
                    
                    // Handle collection slug changes to update property manager
                    if (settingId === 'collection-slug' && value) {
                        // Re-initialize property manager with new collection
                        if (window.PropertyManager && window.PropertyManager.propertyDataManager) {
                            window.PropertyManager.propertyDataManager.forceReload();
                        }
                    }
                },
                onSave: (allSettings) => {
                    debugLog('Settings saved');
                    
                    // Apply settings to the actual listings on the site
                    applyListingsSettings(allSettings);
                    
                    // Call property manager's save handler if available
                    const propertyManager = window.PluginRegistry.getPluginData('real-estate-listings', 'settings');
                    if (propertyManager && typeof propertyManager.onSaveHandler === 'function') {
                        propertyManager.onSaveHandler(allSettings);
                    }
                }
            });
            
            debugLog('Settings schema registered successfully');
            
            // Ensure settings are immediately available
            if (typeof window.PluginRegistry.notifySettingsLoaded === 'function') {
                debugLog('Notifying dashboard that settings are loaded');
                window.PluginRegistry.notifySettingsLoaded('real-estate-listings');
            }
        } else {
            debugLog('PluginRegistry not found - registration failed');
            console.error('PluginRegistry not found - Real Estate Listings settings schema could not be registered');
        }
    } catch (e) {
        debugLog('Error during settings registration', e);
        console.error('Error registering Real Estate Listings settings:', e);
    }
    
    /**
     * Function to apply settings to the actual listings
     */
    function applyListingsSettings(settings) {
        // In a real implementation, this would update the actual listings on the site
        debugLog('Applying real estate listings settings');
        
        // For local development environment, manually trigger update functions
        if (window.PropertyManager) {
            // If we have custom property data, make sure it's registered with the Dashboard
            if (window.PropertyManager.propertyDataManager && 
                window.PropertyManager.propertyDataManager.propertyDetails) {
                
                // Ensure we register property data with the Dashboard's registry
                if (window.PluginRegistry) {
                    window.PluginRegistry.registerPluginData(
                        'real-estate-listings',
                        'property-manager',
                        window.PropertyManager.propertyDataManager.propertyDetails
                    );
                }
            }
        }
    }
    
    // Force plugin registry to recognize this script has loaded (backup method)
    if (window.PluginRegistry && window.PluginRegistry._scriptLoadCallbacks) {
        const callbacksArray = window.PluginRegistry._scriptLoadCallbacks['real-estate-listings'];
        if (Array.isArray(callbacksArray)) {
            debugLog('Executing script load callbacks directly');
            callbacksArray.forEach(callback => {
                try {
                    if (typeof callback === 'function') {
                        callback();
                    }
                } catch (e) {
                    console.error('Error in script load callback:', e);
                }
            });
        }
    }
    
    // Add global diagnostic & control functions
    window.realEstateDebug = {
        checkRegistration: function() {
            if (!window.PluginRegistry) {
                return {status: 'error', message: 'PluginRegistry not available'};
            }
            
            // Check if schema is registered
            const schema = window.PluginRegistry.getSettingsSchema('real-estate-listings');
            const isRegistered = Boolean(schema);
            
            return {
                status: isRegistered ? 'success' : 'error',
                isRegistered: isRegistered,
                schemaLength: isRegistered ? schema.length : 0,
                pluginRegistry: Boolean(window.PluginRegistry),
                propertyManager: Boolean(window.PropertyManager)
            };
        },
        registerNow: function() {
            try {
                // Re-register the settings schema
                if (window.PluginRegistry) {
                    window.PluginRegistry.registerSettingsSchema('real-estate-listings', realEstateListingsSettings);
                    window.PluginRegistry.notifySettingsLoaded('real-estate-listings');
                    return {status: 'success', message: 'Schema re-registered'};
                }
                return {status: 'error', message: 'PluginRegistry not available'};
            } catch (e) {
                return {status: 'error', message: e.message, error: e};
            }
        },
        reloadPropertyManager: function() {
            const container = document.getElementById('property-manager-container');
            if (container) {
                container.innerHTML = '<div class="loading-indicator">Reloading property manager...</div>';
                loadPropertyManager('plugins/real-estate-listings/property-manager.js', true);
                return {status: 'success', message: 'Reloading property manager'};
            }
            return {status: 'error', message: 'Property manager container not found'};
        }
    };
    
    debugLog('Settings script initialization complete');
    
    // Export the settings for direct access
    window.realEstateListingsSettings = realEstateListingsSettings;
})();