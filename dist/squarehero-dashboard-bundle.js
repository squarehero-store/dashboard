(()=>{var __webpack_modules__={"./plugins lazy recursive ^\\.\\/.*\\/wizard\\.js$":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var map = {\n\t"./real-estate-listings/wizard.js": [\n\t\t"./plugins/real-estate-listings/wizard.js",\n\t\t"plugins_real-estate-listings_wizard_js"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error("Cannot find module \'" + req + "\'");\n\t\t\te.code = \'MODULE_NOT_FOUND\';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__.t(id, 7 | 16);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = "./plugins lazy recursive ^\\\\.\\\\/.*\\\\/wizard\\\\.js$";\nmodule.exports = webpackAsyncContext;\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./plugins/_lazy_^\\.\\/.*\\/wizard\\.js$_namespace_object?')},"./scss/dashboard.scss":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./scss/dashboard.scss?")},"./src/components/component-system.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * SquareHero Dashboard - Component System\n * Core system for rendering and managing UI components\n */\n\n// Define the ComponentSystem object\nconst ComponentSystem = {\n  // Storage for component type definitions\n  componentTypes: {},\n\n  /**\n   * Register a new component type\n   */\n  registerComponentType: function(type, definition) {\n    this.componentTypes[type] = definition;\n    console.log(`Registered component type: ${type}`);\n  },\n\n  /**\n   * Render components based on schema and current values\n   */\n  renderComponents: function(componentsSchema, currentValues = {}) {\n    if (!componentsSchema || !Array.isArray(componentsSchema)) {\n      console.error('Invalid components schema', componentsSchema);\n      return '';\n    }\n\n    return componentsSchema.map(component => {\n      const componentType = this.componentTypes[component.type];\n      if (!componentType) {\n        console.error(`Unknown component type: ${component.type}`);\n        return `<div class=\"error\">Unknown component type: ${component.type}</div>`;\n      }\n\n      try {\n        return componentType.render(component, currentValues);\n      } catch (error) {\n        console.error(`Error rendering component ${component.type}:`, error);\n        return `<div class=\"error\">Error rendering component: ${error.message}</div>`;\n      }\n    }).join('');\n  },\n\n  /**\n   * Bind events to components\n   */\n  bindEvents: function(container, componentsSchema, onChange) {\n    if (!componentsSchema || !Array.isArray(componentsSchema)) {\n      console.error('Invalid components schema for bindEvents', componentsSchema);\n      return;\n    }\n\n    componentsSchema.forEach(component => {\n      const componentType = this.componentTypes[component.type];\n      if (!componentType || !componentType.bindEvents) return;\n\n      try {\n        componentType.bindEvents(container, component, onChange);\n      } catch (error) {\n        console.error(`Error binding events for component ${component.type}:`, error);\n      }\n    });\n  },\n\n  /**\n   * Collect values from components\n   */\n  collectValues: function(container, componentsSchema) {\n    if (!componentsSchema || !Array.isArray(componentsSchema)) {\n      console.error('Invalid components schema for collectValues', componentsSchema);\n      return {};\n    }\n\n    return componentsSchema.reduce((values, component) => {\n      const componentType = this.componentTypes[component.type];\n      if (!componentType || !componentType.getValue) return values;\n\n      try {\n        values[component.id] = componentType.getValue(container, component);\n      } catch (error) {\n        console.error(`Error getting value for component ${component.type}:`, error);\n        values[component.id] = component.default;\n      }\n\n      return values;\n    }, {});\n  }\n};\n\n// Export the ComponentSystem\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ComponentSystem);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/components/component-system.js?")},"./src/components/settings-components.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n* SquareHero Dashboard - Settings Components\n* Reusable UI components for plugin settings\n*/\n\nconst SettingsComponents = {\n  /**\n   * Squarespace color slot mapping\n   * Maps slot numbers (1-5) to Squarespace CSS variables\n   */\n  colorSlots: {\n    slot1: 'hsla(var(--white-hsl), 1)',\n    slot2: 'hsla(var(--lightAccent-hsl), 1)',\n    slot3: 'hsla(var(--accent-hsl), 1)',\n    slot4: 'hsla(var(--darkAccent-hsl), 1)', \n    slot5: 'hsla(var(--black-hsl), 1)',\n    \n    // Maps CSS variables to slot numbers\n    getSlotFromVar: function(cssVar) {\n      if (!cssVar || typeof cssVar !== 'string') return null;\n      \n      if (cssVar.includes('--white-hsl')) return 'slot1';\n      if (cssVar.includes('--lightAccent-hsl')) return 'slot2';\n      if (cssVar.includes('--accent-hsl')) return 'slot3';\n      if (cssVar.includes('--darkAccent-hsl')) return 'slot4';\n      if (cssVar.includes('--black-hsl')) return 'slot5';\n      \n      return null;\n    },\n    \n    // Maps slot number to CSS variable\n    getVarFromSlot: function(slot) {\n      return this[slot] || null;\n    },\n    \n    // Get all available slots\n    getAllSlots: function() {\n      return ['slot1', 'slot2', 'slot3', 'slot4', 'slot5'];\n    }\n  },\n\n  /**\n   * Generate a complete settings form from schema with categories/tabs\n   */\n  generateForm: function (schema, currentValues = {}) {\n    // First, separate categories from regular settings\n    const categories = schema.filter(item => item.type === 'category');\n\n    // If there are no categories, render a simple form\n    if (categories.length === 0) {\n      return `\n        <div class=\"settings-form\">\n          ${schema.map(setting => this.renderSetting(setting, currentValues)).join('')}\n        </div>\n      `;\n    }\n\n    // Find the default category\n    const defaultCategory = categories.find(cat => cat.isDefault) || categories[0];\n\n    // Generate content for each tab - each tab contains its own settings-form\n    const tabContentsHtml = categories.map(category => {\n      // Get components from the category\n      const categorySettings = category.components || [];\n\n      return `\n        <div class=\"tab-content ${category.id === defaultCategory.id ? 'active' : ''}\" data-tab-content=\"${category.id}\">\n          <div class=\"settings-form\">\n            ${categorySettings.map(setting => this.renderSetting(setting, currentValues)).join('')}\n          </div>\n        </div>\n      `;\n    }).join('');\n\n    // Return just the tab contents (tabs themselves are added in dashboard.js)\n    return tabContentsHtml;\n  },\n\n  /**\n   * Render a setting based on its type\n   */\n  renderSetting: function (setting, currentValues) {\n    // Skip category type since it's handled in generateForm\n    if (setting.type === 'category') {\n      return '';\n    }\n\n    // Add width class if specified\n    const widthClass = setting.width ? `form-group-${setting.width}` : '';\n\n    switch (setting.type) {\n      case 'dropdown':\n        return this.renderDropdown(setting, currentValues, widthClass);\n      case 'toggle':\n        return this.renderToggle(setting, currentValues, widthClass);\n      case 'text':\n        return this.renderTextField(setting, currentValues, widthClass);\n      case 'color':\n        return this.renderColorPicker(setting, currentValues, widthClass);\n      case 'number':\n        return this.renderNumberInput(setting, currentValues, widthClass);\n      case 'radio':\n        return this.renderRadioGroup(setting, currentValues, widthClass);\n      case 'slider':\n        return this.renderSlider(setting, currentValues, widthClass);\n      case 'title':\n        return this.renderTitleField(setting, currentValues, widthClass);\n      case 'checkbox-group':\n        return this.renderCheckboxGroup(setting, currentValues, widthClass);\n      case 'custom':\n        return this.renderCustomComponent(setting, currentValues, widthClass);\n      default:\n        return `<p>Unknown setting type: ${setting.type}</p>`;\n    }\n  },\n\n  /**\n   * Custom component renderer\n   */\n  renderCustomComponent: function(setting, currentValues, widthClass) {\n    console.log(`Rendering custom component: ${setting.id}`);\n    \n    // Use a consistent ID format that matches what property-manager.js expects\n    return `\n      <div class=\"form-group ${widthClass || 'form-group-full'}\">\n        <div id=\"${setting.id}-container\" class=\"custom-component-container\" \n             data-component-id=\"${setting.id}\" \n             data-script=\"${setting.script}\">\n          <div class=\"loading-indicator\">\n            <p>Loading ${setting.label}...</p>\n          </div>\n        </div>\n        ${setting.helpText ? `<p class=\"setting-help\">${setting.helpText}</p>` : ''}\n      </div>\n    `;\n  },\n\n  /**\n   * Dropdown select component\n   */\n  renderDropdown: function (setting, currentValues, widthClass) {\n    const value = currentValues[setting.id] !== undefined ? currentValues[setting.id] : setting.default;\n    return `\n      <div class=\"form-group ${widthClass}\">\n        <label for=\"${setting.id}\">${setting.label}</label>\n        <select id=\"${setting.id}\" name=\"${setting.id}\" class=\"setting-input\">\n          ${setting.options.map(option =>\n      `<option value=\"${option.value}\" ${value === option.value ? 'selected' : ''}>${option.label}</option>`\n    ).join('')}\n        </select>\n        ${setting.helpText ? `<p class=\"setting-help\">${setting.helpText}</p>` : ''}\n      </div>\n    `;\n  },\n\n  /**\n   * Toggle switch component\n   */\n  renderToggle: function (setting, currentValues, widthClass) {\n    const checked = currentValues[setting.id] !== undefined ? currentValues[setting.id] : setting.default;\n    return `\n      <div class=\"form-group toggle-group ${widthClass}\">\n        <label class=\"toggle-label\">\n          <input type=\"checkbox\" id=\"${setting.id}\" name=\"${setting.id}\" ${checked ? 'checked' : ''}>\n          <span class=\"toggle-slider\"></span>\n          <span class=\"toggle-text\">${setting.label}</span>\n        </label>\n        ${setting.helpText ? `<p class=\"setting-help\">${setting.helpText}</p>` : ''}\n      </div>\n    `;\n  },\n\n  /**\n   * Text field component\n   */\n  renderTextField: function (setting, currentValues, widthClass) {\n    const value = currentValues[setting.id] !== undefined ? currentValues[setting.id] : (setting.default || '');\n    return `\n      <div class=\"form-group ${widthClass}\">\n        <label for=\"${setting.id}\">${setting.label}</label>\n        <input type=\"text\" id=\"${setting.id}\" name=\"${setting.id}\" value=\"${value}\" \n               class=\"setting-input\" ${setting.placeholder ? `placeholder=\"${setting.placeholder}\"` : ''}>\n        ${setting.helpText ? `<p class=\"setting-help\">${setting.helpText}</p>` : ''}\n      </div>\n    `;\n  },\n\n  /**\n   * Title component\n   */\n  renderTitleField: function (setting, currentValues, widthClass) {\n    const value = currentValues[setting.id] !== undefined ? currentValues[setting.id] : (setting.default || '');\n    return `\n      <div class=\"form-group ${widthClass}\">\n        <h4 for=\"${setting.id}\">${setting.label}</h4>\n      </div>\n    `;\n  },\n\n  /**\n   * Enhanced color picker component with Squarespace palette integration\n   */\n  renderColorPicker: function (setting, currentValues, widthClass) {\n    const value = currentValues[setting.id] !== undefined ? currentValues[setting.id] : (setting.default || '#000000');\n    \n    // Determine if this is a Squarespace CSS variable or slot reference\n    const isSquarespaceVar = typeof value === 'string' && (value.includes('hsla(var(--') || value.startsWith('slot'));\n    \n    // Find which swatch this corresponds to\n    let selectedSwatch = '';\n    \n    // Handle both direct CSS vars and slot references\n    if (isSquarespaceVar) {\n      if (value.startsWith('slot')) {\n        // It's using our slot system\n        selectedSwatch = this.colorSlots[value] || '';\n      } else {\n        // It's using the CSS variable directly\n        selectedSwatch = value;\n      }\n    }\n    \n    // Determine the display color for the main swatch\n    let displayColor = value;\n    if (isSquarespaceVar) {\n      if (value.startsWith('slot')) {\n        // Get the CSS variable from the slot\n        displayColor = this.colorSlots[value] || '#CCCCCC';\n      } else {\n        // For CSS variables, try to use the computed color\n        displayColor = `var(${value.match(/var\\((.*?)\\)/)?.[1] || '--accent'})`;\n      }\n    }\n\n    return `\n      <div class=\"form-group color-picker-group ${widthClass}\">\n        <label for=\"${setting.id}\">${setting.label}</label>\n        \n        <div class=\"color-picker-compact\" data-setting-id=\"${setting.id}\">\n          <div class=\"current-color-display\" style=\"background-color: ${displayColor};\">\n            <span class=\"color-value hidden-visually\">${isSquarespaceVar ? 'Site Color' : value}</span>\n          </div>\n          \n          <div class=\"color-picker-expanded\" style=\"display: none;\">\n            <div class=\"color-picker-tab-buttons\">\n              <button type=\"button\" class=\"tab-button ${isSquarespaceVar ? 'active' : ''}\" data-tab=\"palette\">Palette</button>\n              <button type=\"button\" class=\"tab-button ${!isSquarespaceVar ? 'active' : ''}\" data-tab=\"custom\">Custom</button>\n            </div>\n            \n            <div class=\"color-picker-tab-content\">\n              <div class=\"tab-panel ${isSquarespaceVar ? 'active' : ''}\" data-panel=\"palette\">\n                <div class=\"palette-swatches\">\n                  <button type=\"button\" class=\"color-swatch ${selectedSwatch === this.colorSlots.slot1 || value === 'slot1' ? 'selected' : ''}\" \n                          data-for=\"${setting.id}\" \n                          data-color-var=\"slot1\" \n                          style=\"background-color: ${this.colorSlots.slot1};\"></button>\n                  <button type=\"button\" class=\"color-swatch ${selectedSwatch === this.colorSlots.slot2 || value === 'slot2' ? 'selected' : ''}\" \n                          data-for=\"${setting.id}\" \n                          data-color-var=\"slot2\" \n                          style=\"background-color: ${this.colorSlots.slot2};\"></button>\n                  <button type=\"button\" class=\"color-swatch ${selectedSwatch === this.colorSlots.slot3 || value === 'slot3' ? 'selected' : ''}\" \n                          data-for=\"${setting.id}\" \n                          data-color-var=\"slot3\" \n                          style=\"background-color: ${this.colorSlots.slot3};\"></button>\n                  <button type=\"button\" class=\"color-swatch ${selectedSwatch === this.colorSlots.slot4 || value === 'slot4' ? 'selected' : ''}\" \n                          data-for=\"${setting.id}\" \n                          data-color-var=\"slot4\" \n                          style=\"background-color: ${this.colorSlots.slot4};\"></button>\n                  <button type=\"button\" class=\"color-swatch ${selectedSwatch === this.colorSlots.slot5 || value === 'slot5' ? 'selected' : ''}\" \n                          data-for=\"${setting.id}\" \n                          data-color-var=\"slot5\" \n                          style=\"background-color: ${this.colorSlots.slot5};\"></button>\n                </div>\n              </div>\n              \n              <div class=\"tab-panel ${!isSquarespaceVar ? 'active' : ''}\" data-panel=\"custom\">\n                <div class=\"color-input-container\">\n                  <input type=\"color\" id=\"${setting.id}\" name=\"${setting.id}\" \n                         value=\"${!isSquarespaceVar ? value : '#ffffff'}\" \n                         class=\"color-input\" \n                         data-used-var=\"${isSquarespaceVar ? value : ''}\">\n                  <input type=\"text\" id=\"${setting.id}-hex\" \n                         value=\"${!isSquarespaceVar ? value : '#ffffff'}\" \n                         class=\"color-hex-input\" \n                         data-color-for=\"${setting.id}\">\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        ${setting.helpText ? `<p class=\"setting-help\">${setting.helpText}</p>` : ''}\n      </div>\n    `;\n  },\n\n  /**\n   * Number input component\n   */\n  renderNumberInput: function (setting, currentValues, widthClass) {\n    const value = currentValues[setting.id] !== undefined ? currentValues[setting.id] : (setting.default || 0);\n    return `\n      <div class=\"form-group ${widthClass}\">\n        <label for=\"${setting.id}\">${setting.label}</label>\n        <input type=\"number\" id=\"${setting.id}\" name=\"${setting.id}\" value=\"${value}\" \n               min=\"${setting.min || 0}\" max=\"${setting.max || 100}\" step=\"${setting.step || 1}\" class=\"setting-input\">\n        ${setting.helpText ? `<p class=\"setting-help\">${setting.helpText}</p>` : ''}\n      </div>\n    `;\n  },\n\n  /**\n   * Radio group component\n   */\n  renderRadioGroup: function (setting, currentValues, widthClass) {\n    const value = currentValues[setting.id] !== undefined ? currentValues[setting.id] : setting.default;\n    return `\n      <div class=\"form-group ${widthClass}\">\n        <label class=\"group-label\">${setting.label}</label>\n        <div class=\"radio-group\">\n          ${setting.options.map(option => `\n            <label class=\"radio-label\">\n              <input type=\"radio\" name=\"${setting.id}\" value=\"${option.value}\" ${value === option.value ? 'checked' : ''}>\n              <span>${option.label}</span>\n            </label>\n          `).join('')}\n        </div>\n        ${setting.helpText ? `<p class=\"setting-help\">${setting.helpText}</p>` : ''}\n      </div>\n    `;\n  },\n\n  /**\n   * Slider component\n   */\n  renderSlider: function (setting, currentValues, widthClass) {\n    const value = currentValues[setting.id] !== undefined ? currentValues[setting.id] : (setting.default || 0);\n    return `\n      <div class=\"form-group ${widthClass}\">\n        <label for=\"${setting.id}\">${setting.label}</label>\n        <div class=\"slider-container\">\n          <input type=\"range\" id=\"${setting.id}\" name=\"${setting.id}\" value=\"${value}\" \n                 min=\"${setting.min || 0}\" max=\"${setting.max || 100}\" step=\"${setting.step || 1}\" \n                 class=\"slider-input\"\n                 oninput=\"this.nextElementSibling.textContent = this.value\">\n          <span class=\"slider-value\">${value}</span>\n        </div>\n        ${setting.helpText ? `<p class=\"setting-help\">${setting.helpText}</p>` : ''}\n      </div>\n    `;\n  },\n\n  /**\n   * Checkbox group component\n   */\n  renderCheckboxGroup: function (setting, currentValues, widthClass) {\n    const values = currentValues[setting.id] !== undefined ? currentValues[setting.id] : (setting.default || []);\n    return `\n      <div class=\"form-group ${widthClass}\">\n        <label class=\"group-label\">${setting.label}</label>\n        <div class=\"checkbox-group\">\n          ${setting.options.map(option => `\n            <label class=\"checkbox-label\">\n              <input type=\"checkbox\" name=\"${setting.id}[]\" value=\"${option.value}\" \n                     ${values.includes(option.value) ? 'checked' : ''}>\n              <span>${option.label}</span>\n            </label>\n          `).join('')}\n        </div>\n        ${setting.helpText ? `<p class=\"setting-help\">${setting.helpText}</p>` : ''}\n      </div>\n    `;\n  },\n\n  /**\n   * Collect all values from a form\n   */\n  collectFormValues: function(form, schema) {\n    if (!form) {\n      console.error('Cannot collect form values - form element is missing');\n      return {};\n    }\n  \n    console.log('Collecting form values with schema:', schema);\n    const formValues = {};\n    \n    // Process all form inputs\n    form.querySelectorAll('input, select, textarea').forEach(input => {\n      const id = input.id || input.name;\n      if (!id) return;\n      \n      // Find the corresponding schema item\n      const schemaItem = schema ? schema.find(item => item.id === id) : null;\n      \n      // Get value based on input type\n      let value;\n      \n      if (input.type === 'checkbox') {\n        value = input.checked;\n      } else if (input.type === 'number' || (schemaItem && schemaItem.type === 'number')) {\n        value = parseFloat(input.value);\n      } else if (input.type === 'range' || (schemaItem && schemaItem.type === 'slider')) {\n        value = parseFloat(input.value);\n      } else if (input.type === 'color') {\n        // Check if using a color slot reference\n        const usedVar = input.getAttribute('data-used-var');\n        if (usedVar && usedVar.trim() !== '') {\n          if (usedVar.startsWith('slot')) {\n            // It's a slot reference (slot1, slot2, etc)\n            value = usedVar;\n          } else {\n            // It's a direct CSS variable reference\n            value = usedVar;\n          }\n        } else {\n          value = input.value;\n        }\n      } else {\n        value = input.value;\n      }\n      \n      console.log(`Collected form value for ${id}:`, value);\n      formValues[id] = value;\n    });\n    \n    // Process checkboxes in checkbox group\n    const checkboxGroups = schema ? schema.filter(item => item.type === 'checkbox-group') : [];\n    checkboxGroups.forEach(group => {\n      const groupValues = [];\n      \n      // Find all checkboxes that belong to this group\n      form.querySelectorAll(`input[name^=\"${group.id}\"]:checked`).forEach(checkbox => {\n        groupValues.push(checkbox.value);\n      });\n      \n      formValues[group.id] = groupValues;\n    });\n    \n    return formValues;\n  },\n\n  /**\n   * Extract all settings from schema including nested ones in categories\n   */\n  extractAllSettings: function (schema) {\n    // Get all non-category settings from schema\n    const settingsSchema = schema.filter(item => item.type !== 'category');\n\n    // Extract components from categories\n    const categoryComponents = [];\n    schema.filter(item => item.type === 'category').forEach(category => {\n      if (Array.isArray(category.components)) {\n        categoryComponents.push(...category.components);\n      }\n    });\n\n    // Return combined list\n    return [...settingsSchema, ...categoryComponents];\n  },\n\n  /**\n   * Get the appropriate value based on setting type\n   */\n  getValueForType: function (form, setting) {\n    console.log(`Getting value for setting ${setting.id} (type: ${setting.type})`);\n\n    // The critical fix: search in the entire form, not just at the top level\n    // This handles the case when settings are in different tabs\n\n    // Find elements by ID first (more reliable)\n    let element = form.querySelector(`#${setting.id}`);\n\n    // If not found by ID, try by name\n    if (!element) {\n      element = form.querySelector(`[name=\"${setting.id}\"]`);\n    }\n\n    if (!element) {\n      console.log(`Element for setting ${setting.id} not found, using default: ${setting.default}`);\n      return setting.default;\n    }\n\n    switch (setting.type) {\n      case 'toggle':\n        // IMPORTANT: Explicitly convert to boolean and log the value\n        const isChecked = element.checked === true;\n        console.log(`Toggle ${setting.id} value: ${isChecked} (raw checked: ${element.checked})`);\n        return isChecked;\n\n      case 'number':\n      case 'slider':\n        const numValue = parseFloat(element.value);\n        console.log(`Number/slider ${setting.id} value: ${numValue}`);\n        return numValue;\n\n      case 'radio':\n        const checkedEl = form.querySelector(`[name=\"${setting.id}\"]:checked`);\n        const radioValue = checkedEl ? checkedEl.value : setting.default;\n        console.log(`Radio ${setting.id} value: ${radioValue}`);\n        return radioValue;\n\n      case 'checkbox-group':\n        const checkboxes = form.querySelectorAll(`[name=\"${setting.id}[]\"]:checked`);\n        const checkValues = Array.from(checkboxes).map(cb => cb.value);\n        console.log(`Checkbox group ${setting.id} value: [${checkValues.join(', ')}]`);\n        return checkValues;\n\n      case 'color':\n        // Check if using a CSS variable from palette\n        const usedVar = element.getAttribute('data-used-var');\n        if (usedVar && usedVar.trim() !== '') {\n          console.log(`Color ${setting.id} value: ${usedVar} (using CSS var)`);\n          return usedVar;\n        }\n        console.log(`Color ${setting.id} value: ${element.value}`);\n        return element.value;\n\n      default:\n        console.log(`Default ${setting.id} value: ${element.value}`);\n        return element.value;\n    }\n  },\n\n  /**\n   * Bind event handlers to form elements\n   */\n  bindEventHandlers: function (form, schema, onChange) {\n    // Add tab switching functionality\n    const tabButtons = form.querySelectorAll('.settings-tabs .tab-button');\n    if (tabButtons.length > 0) {\n      tabButtons.forEach(button => {\n        button.addEventListener('click', function () {\n          // Remove active class from all tabs and contents\n          form.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));\n          form.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));\n\n          // Add active class to current tab and content\n          button.classList.add('active');\n          const tabId = button.getAttribute('data-tab');\n          form.querySelector(`.tab-content[data-tab-content=\"${tabId}\"]`).classList.add('active');\n        });\n      });\n    }\n\n    // Skip category settings when binding element handlers\n    const nonCategorySettings = schema.filter(setting => setting.type !== 'category');\n\n    nonCategorySettings.forEach(setting => {\n      const element = form.querySelector(`[name=\"${setting.id}\"]`);\n      if (!element) return;\n\n      // Color picker special handling\n      if (setting.type === 'color') {\n        const hexInput = form.querySelector(`#${setting.id}-hex`);\n\n        // Add click handler to expand/collapse color picker\n        const colorDisplay = form.querySelector(`.color-picker-compact[data-setting-id=\"${setting.id}\"] .current-color-display`);\n        if (colorDisplay) {\n          colorDisplay.addEventListener('click', () => {\n            const expanded = form.querySelector(`.color-picker-compact[data-setting-id=\"${setting.id}\"] .color-picker-expanded`);\n            if (expanded) {\n              expanded.style.display = expanded.style.display === 'none' ? 'block' : 'none';\n            }\n          });\n        }\n\n        // Add tab button handlers\n        const tabButtons = form.querySelectorAll(`.color-picker-compact[data-setting-id=\"${setting.id}\"] .color-picker-tab-buttons .tab-button`);\n        tabButtons.forEach(button => {\n          button.addEventListener('click', e => {\n            const targetTab = e.target.getAttribute('data-tab');\n            const settingParent = e.target.closest('.color-picker-compact');\n            const settingId = settingParent.getAttribute('data-setting-id');\n\n            // Update active state on tabs\n            settingParent.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));\n            e.target.classList.add('active');\n\n            // Show the correct panel\n            const panels = settingParent.querySelectorAll('.tab-panel');\n            panels.forEach(panel => {\n              panel.classList.toggle('active', panel.getAttribute('data-panel') === targetTab);\n            });\n\n            // If switching to palette tab, clear the custom color var\n            if (targetTab === 'palette') {\n              // Nothing needed here - will be set when palette color is clicked\n            } else {\n              // If switching to custom tab, clear any palette selection\n              const swatches = settingParent.querySelectorAll('.color-swatch');\n              swatches.forEach(s => s.classList.remove('selected'));\n              element.setAttribute('data-used-var', '');\n            }\n          });\n        });\n\n        // Add swatch click handlers\n        const swatches = form.querySelectorAll('.color-swatch[data-for=\"' + setting.id + '\"]');\n        swatches.forEach(swatch => {\n          swatch.addEventListener('click', e => {\n            const colorVar = e.target.getAttribute('data-color-var');\n            const settingId = e.target.getAttribute('data-for');\n            const colorInput = form.querySelector(`#${settingId}`);\n            const hexInput = form.querySelector(`#${settingId}-hex`);\n\n            // Set the input to use the CSS variable\n            colorInput.setAttribute('data-used-var', colorVar);\n\n            // Highlight the selected swatch\n            const parentPanel = e.target.closest('.tab-panel');\n            parentPanel.querySelectorAll('.color-swatch').forEach(s => s.classList.remove('selected'));\n            swatch.classList.add('selected');\n\n            // Update the displayed color\n            const colorDisplay = form.querySelector(`.color-picker-compact[data-setting-id=\"${settingId}\"] .current-color-display`);\n            if (colorDisplay) {\n              colorDisplay.style.backgroundColor = e.target.style.backgroundColor;\n            }\n\n            // Call onChange with the CSS variable\n            if (onChange) onChange(settingId, colorVar);\n          });\n        });\n\n        // Regular color input handlers\n        element.addEventListener('input', e => {\n          // Clear any selected CSS variable\n          element.setAttribute('data-used-var', '');\n\n          // Update hex input\n          if (hexInput) hexInput.value = e.target.value;\n\n          // Remove swatch selections\n          const settingParent = e.target.closest('.color-picker-group');\n          const swatches = settingParent.querySelectorAll('.color-swatch');\n          swatches.forEach(s => s.classList.remove('selected'));\n\n          // Update the displayed color\n          const colorDisplay = form.querySelector(`.color-picker-compact[data-setting-id=\"${setting.id}\"] .current-color-display`);\n          if (colorDisplay) {\n            colorDisplay.style.backgroundColor = e.target.value;\n          }\n\n          // Call onChange handler\n          if (onChange) onChange(setting.id, e.target.value);\n        });\n\n        if (hexInput) {\n          hexInput.addEventListener('input', e => {\n            // If it looks like a CSS variable, don't try to validate as hex\n            if (e.target.value.startsWith('hsla(')) {\n              return;\n            }\n\n            // Ensure valid hex\n            if (/^#[0-9A-F]{6}$/i.test(e.target.value)) {\n              element.value = e.target.value;\n              element.setAttribute('data-used-var', '');\n\n              // Remove swatch selections\n              const settingParent = e.target.closest('.color-picker-group');\n              const swatches = settingParent.querySelectorAll('.color-swatch');\n              swatches.forEach(s => s.classList.remove('selected'));\n\n              // Update the displayed color\n              const colorDisplay = form.querySelector(`.color-picker-compact[data-setting-id=\"${setting.id}\"] .current-color-display`);\n              if (colorDisplay) {\n                colorDisplay.style.backgroundColor = e.target.value;\n              }\n\n              if (onChange) onChange(setting.id, e.target.value);\n            }\n          });\n        }\n        return;\n      }\n\n      // Slider handlers\n      if (setting.type === 'slider') {\n        const slider = form.querySelector(`#${setting.id}`);\n        const valueDisplay = slider?.closest('.slider-container')?.querySelector('.slider-value');\n\n        if (slider && valueDisplay) {\n          slider.addEventListener('input', function (e) {\n            valueDisplay.textContent = e.target.value;\n            if (onChange) {\n              onChange(setting.id, parseFloat(e.target.value));\n            }\n          });\n        }\n        return;\n      }\n\n      // Checkbox group handlers\n      if (setting.type === 'checkbox-group') {\n        const checkboxes = form.querySelectorAll(`[name=\"${setting.id}[]\"]`);\n\n        checkboxes.forEach(checkbox => {\n          checkbox.addEventListener('change', function () {\n            const checkedValues = Array.from(\n              form.querySelectorAll(`[name=\"${setting.id}[]\"]:checked`)\n            ).map(cb => cb.value);\n\n            if (onChange) {\n              onChange(setting.id, checkedValues);\n            }\n          });\n        });\n        return;\n      }\n\n      // After handling other component types:\n      if (setting.type === 'custom') {\n        const container = form.querySelector(`#${setting.id}-container`);\n        if (!container) return;\n        \n        // Load the custom script if it's not already loaded\n        const scriptPath = setting.script;\n        if (scriptPath && !document.querySelector(`script[src=\"${scriptPath}\"]`)) {\n          // Create a script element to load the custom component\n          const script = document.createElement('script');\n          script.src = scriptPath;\n          script.onload = function() {\n            console.log(`Custom component script loaded: ${scriptPath}`);\n            // The script will handle its own initialization\n          };\n          script.onerror = function() {\n            console.error(`Failed to load custom component script: ${scriptPath}`);\n            if (container) {\n              container.innerHTML = `\n                <div class=\"error-message\">\n                  <p>Failed to load component. Please check the console for details.</p>\n                </div>\n              `;\n            }\n          };\n          document.head.appendChild(script);\n        }\n      }\n\n      // All other elements\n      const eventType = setting.type === 'toggle' ? 'change' : 'input';\n      element.addEventListener(eventType, e => {\n        const value = this.getValueForType(form, setting);\n        if (onChange) onChange(setting.id, value);\n      });\n    });\n  }\n};\n\n// Add proper module export\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SettingsComponents);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/components/settings-components.js?")},"./src/components/wizard-component.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _component_system_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component-system.js */ \"./src/components/component-system.js\");\n/**\n * SquareHero Wizard Component Extension\n * Extends the ComponentSystem to support wizard-based setup flows\n * With improved conditional navigation, fixed progress indicators, and validation\n */\n\n// Import ComponentSystem\n\n\n// Create a WizardComponent object to export\nconst WizardComponent = {\n  // Track if the wizard component has been initialized\n  initialized: false,\n  \n  // Initialize the component\n  init() {\n    if (this.initialized) return;\n    \n    // Register the component types\n    this.registerComponents();\n    \n    // Mark as initialized\n    this.initialized = true;\n    \n    return this;\n  },\n  \n  // Register all wizard-related components\n  registerComponents() {\n    this.registerWizardComponent();\n    this.registerButtonGroupComponent();\n  },\n  \n  // Register the wizard component\n  registerWizardComponent() {\n    _component_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerComponentType('wizard', {\n      // Render the wizard container\n      render: function (setting, currentValues) {\n        // Get the wizard steps\n        const steps = setting.steps || [];\n\n        // Determine current step (default to first or stored value)\n        const currentStep = currentValues[`${setting.id}-current-step`] || 0;\n        \n        // Count how many dots we need (one for each main step in the flow)\n        // For a basic 3-step wizard (welcome, choice, complete) we need 3 dots\n        const progressDotCount = 3; // Hardcoded for simplicity\n\n        // Create wizard container with fixed progress dots at bottom\n        return `\n            <div class=\"wizard-container\" data-wizard-id=\"${setting.id}\" data-current-step=\"${currentStep}\">\n              <div class=\"wizard-content\">\n                \x3c!-- Step content will be inserted here --\x3e\n              </div>\n              \n              \x3c!-- Fixed progress dots container --\x3e\n              <div class=\"wizard-progress-container\">\n                <div class=\"wizard-progress\">\n                  ${Array(progressDotCount).fill().map((_, index) => \n                    `<span class=\"wizard-progress-dot\"></span>`\n                  ).join('')}\n                </div>\n              </div>\n            </div>\n          `;\n      },\n\n      // Bind events to the wizard\n      bindEvents: function (form, setting, onChange) {\n        // Get the wizard container\n        const wizardContainer = form.querySelector(`.wizard-container[data-wizard-id=\"${setting.id}\"]`);\n        if (!wizardContainer) return;\n\n        // Get the wizard steps\n        const steps = setting.steps || [];\n\n        // Get current step (default to first or stored value)\n        let currentStep = parseInt(wizardContainer.getAttribute('data-current-step') || 0);\n\n        // Keep track of path history for back button navigation\n        const navigationHistory = [];\n\n        // This tracks which visual step (dot) we're on (0-2 for a 3-dot wizard)\n        let visualStep = 0;\n\n        // Update the current step value whenever it changes\n        const updateCurrentStep = (newStep) => {\n          currentStep = newStep;\n          wizardContainer.setAttribute('data-current-step', newStep);\n          if (onChange) {\n            onChange(`${setting.id}-current-step`, newStep);\n          }\n        };\n\n        // Update progress dots based on visual step\n        const updateProgressDots = (visualStepIndex) => {\n          const progressDots = wizardContainer.querySelectorAll('.wizard-progress-dot');\n          \n          progressDots.forEach((dot, index) => {\n            // A dot is active if it represents the current visual step\n            dot.classList.toggle('active', index === visualStepIndex);\n            \n            // A dot is completed if it comes before the current visual step\n            dot.classList.toggle('completed', index < visualStepIndex);\n          });\n        };\n\n        // Function to render a specific step\n        const renderStep = (stepIndex, addToHistory = true) => {\n          console.log(`Rendering step ${stepIndex}`);\n\n          // Validate step index\n          if (stepIndex < 0 || stepIndex >= steps.length) {\n            console.error(`Invalid step index: ${stepIndex}`);\n            return;\n          }\n\n          // Add current step to history if we're not going back\n          if (addToHistory && currentStep !== stepIndex) {\n            navigationHistory.push(currentStep);\n            console.log(`Added step ${currentStep} to history. History: ${navigationHistory}`);\n          }\n\n          // Get the step\n          const step = steps[stepIndex];\n          console.log(`Step ID: ${step.id}, conditional: ${!!step.conditional}`);\n\n          // Get the wizard content container\n          const contentContainer = wizardContainer.querySelector('.wizard-content');\n\n          // Create step content with navigation included with content\n          let stepHtml = `\n              <div class=\"wizard-step\" data-step-id=\"${step.id}\">\n                ${step.image ? `<div class=\"wizard-step-image\"><img src=\"${step.image}\" alt=\"${step.title || ''}\"></div>` : ''}\n                \n                <div class=\"wizard-step-header\">\n                  ${step.title ? `<h2 class=\"wizard-step-title\">${step.title}</h2>` : ''}\n                </div>\n                \n                <div class=\"wizard-step-body\">\n                  ${step.content ? `<p class=\"wizard-step-content\">${step.content}</p>` : ''}\n                  \n                  <div class=\"wizard-step-components\">\n                    ${(step.components || []).map(component => {\n                      return _component_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].renderComponents([component], {});\n                    }).join('')}\n                  </div>\n                </div>\n                \n                \x3c!-- Navigation stays with the content --\x3e\n                <div class=\"wizard-navigation\">\n                  <button type=\"button\" class=\"wizard-back-button ${stepIndex === 0 ? 'hidden' : ''}\">Back</button>\n                  <button type=\"button\" class=\"wizard-next-button\">${stepIndex === steps.length - 1 ? 'Finish' : 'Continue'}</button>\n                </div>\n              </div>\n            `;\n\n          // Update the content container\n          contentContainer.innerHTML = stepHtml;\n\n          // Bind events to the step components\n          if (step.components && step.components.length > 0) {\n            _component_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].bindEvents(contentContainer, step.components, onChange);\n\n            // For conditional button groups, add data-next-step attributes\n            if (step.conditional) {\n              const buttonComponents = step.components.filter(c => c.type === 'button-group');\n\n              buttonComponents.forEach(buttonComponent => {\n                const buttonGroup = contentContainer.querySelector(`.button-group-container[data-component-id=\"${buttonComponent.id}\"]`);\n                if (buttonGroup) {\n                  const options = buttonGroup.querySelectorAll('.button-option');\n\n                  options.forEach(option => {\n                    const value = option.getAttribute('data-value');\n                    const optionData = buttonComponent.options.find(o => o.value === value);\n\n                    if (optionData && optionData.nextStep) {\n                      option.setAttribute('data-next-step', optionData.nextStep);\n                      console.log(`Set data-next-step=\"${optionData.nextStep}\" for option ${value}`);\n                    }\n                  });\n                }\n              });\n            }\n          }\n\n          // Set visual step based on step ID\n          // This maps specific steps to visual dots\n          if (step.id === 'welcome') {\n            visualStep = 0;\n          } else if (step.id === 'existing-collection' || step.id === 'create-collection') {\n            visualStep = 1;\n          } else if (step.id === 'complete') {\n            visualStep = 2;\n          }\n\n          // Update progress dots\n          updateProgressDots(visualStep);\n\n          // Store the current step\n          updateCurrentStep(stepIndex);\n          \n          // Find and bind the navigation buttons within this step\n          bindNavigationButtons(contentContainer);\n        };\n        \n        // Helper functions for validation errors\n        const showValidationError = (container, message) => {\n          // Remove any existing error messages first\n          hideValidationError(container);\n          \n          // Create error message element\n          const errorElement = document.createElement('div');\n          errorElement.className = 'wizard-validation-error';\n          errorElement.textContent = message;\n          \n          // Find where to insert it - before the navigation buttons\n          const navigationDiv = container.querySelector('.wizard-navigation');\n          if (navigationDiv) {\n            navigationDiv.parentNode.insertBefore(errorElement, navigationDiv);\n          } else {\n            // If no navigation div, append to container\n            container.appendChild(errorElement);\n          }\n          \n          // Highlight the options that need to be selected\n          const buttonGroup = container.querySelector('.button-group');\n          if (buttonGroup) {\n            buttonGroup.classList.add('validation-highlight');\n          }\n        };\n        \n        const hideValidationError = (container) => {\n          // Remove error message if exists\n          const errorElement = container.querySelector('.wizard-validation-error');\n          if (errorElement) {\n            errorElement.remove();\n          }\n          \n          // Remove highlighting from button group\n          const buttonGroup = container.querySelector('.button-group');\n          if (buttonGroup) {\n            buttonGroup.classList.remove('validation-highlight');\n          }\n        };\n        \n        // Helper function to bind navigation buttons\n        const bindNavigationButtons = (container) => {\n          const backButton = container.querySelector('.wizard-back-button');\n          const nextButton = container.querySelector('.wizard-next-button');\n          \n          if (backButton) {\n            backButton.addEventListener('click', () => {\n              if (navigationHistory.length > 0) {\n                // Pop the previous step from history\n                const previousStep = navigationHistory.pop();\n                console.log(`Going back to step ${previousStep}. Remaining history: ${navigationHistory}`);\n                renderStep(previousStep, false); // Don't add to history when going back\n              }\n            });\n          }\n          \n          if (nextButton) {\n            // Check if step is conditional and preemptively disable the button if no selection\n            const step = steps[currentStep];\n            if (step && step.conditional === true) {\n              const buttonContainer = container.querySelector('.button-group-container');\n              if (buttonContainer) {\n                const selectedOption = buttonContainer.querySelector('.button-option.selected');\n                if (!selectedOption) {\n                  // Add visual indication that a selection is needed\n                  const buttonGroup = buttonContainer.querySelector('.button-group');\n                  if (buttonGroup) {\n                    buttonGroup.classList.add('selection-required');\n                  }\n                }\n              }\n            }\n            \n            nextButton.addEventListener('click', handleNextButtonClick);\n          }\n        };\n        \n        // Handle next button click with proper navigation logic\n        const handleNextButtonClick = () => {\n          console.log('----------------------------------------');\n          console.log('NEXT BUTTON CLICKED - NAVIGATION LOGIC:');\n          \n          // Get current step\n          const step = steps[currentStep];\n          console.log(`Current step: ${step.id} (index: ${currentStep})`);\n          \n          // Handle last step completion\n          if (currentStep === steps.length - 1) {\n            console.log('This is the last step - handling completion');\n            \n            // Call onComplete handler if exists\n            if (setting.onComplete && typeof setting.onComplete === 'function') {\n              const values = _component_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].collectValues(form, setting.steps.flatMap(s => s.components || []));\n              setting.onComplete(form, values);\n            }\n            \n            // Set wizard as completed\n            if (setting.id) {\n              localStorage.setItem(`${setting.id}_completed`, 'true');\n              \n              // Call the completion callback if provided\n              if (setting.completionCallback && typeof window[setting.completionCallback] === 'function') {\n                const values = _component_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].collectValues(form, setting.steps.flatMap(s => s.components || []));\n                window[setting.completionCallback](values);\n              }\n            }\n            \n            // Hide the wizard container if specified\n            if (setting.hideOnComplete) {\n              wizardContainer.style.display = 'none';\n            }\n            \n            return;\n          }\n          \n          // Direct schema check for conditional steps\n          if (step.conditional === true) {\n            console.log('This step is CONDITIONAL - checking selected button');\n            \n            // Find the selected button value\n            const contentContainer = wizardContainer.querySelector('.wizard-content');\n            const selectedButton = contentContainer.querySelector('.button-option.selected');\n            \n            if (!selectedButton) {\n              console.log('ERROR: No button is selected!');\n              \n              // Show validation error message\n              showValidationError(contentContainer, \"Please select an option to continue\");\n              return; // Prevent proceeding without selection\n            } else {\n              // If previously showed an error, hide it now\n              hideValidationError(contentContainer);\n              \n              const selectedValue = selectedButton.getAttribute('data-value');\n              console.log(`Selected button value: ${selectedValue}`);\n              \n              // Check for data-next-step attribute directly\n              const dataNextStep = selectedButton.getAttribute('data-next-step');\n              if (!dataNextStep) {\n                console.log('WARNING: No data-next-step attribute found on button element');\n              } else {\n                console.log(`Found data-next-step attribute: ${dataNextStep}`);\n                \n                // Find the step index by ID\n                const nextStepIndex = steps.findIndex(s => s.id === dataNextStep);\n                \n                if (nextStepIndex === -1) {\n                  console.log(`ERROR: Step with ID \"${dataNextStep}\" not found in steps array!`);\n                  console.log('Available step IDs:', steps.map(s => s.id));\n                } else {\n                  console.log(`SUCCESS! Navigating to step index: ${nextStepIndex} (id: ${dataNextStep})`);\n                  renderStep(nextStepIndex);\n                  return;\n                }\n              }\n              \n              // Find the button component in the step\n              const buttonComponent = step.components.find(c => \n                c.type === 'button-group' && c.options && c.options.some(o => o.value === selectedValue)\n              );\n              \n              if (!buttonComponent) {\n                console.log('ERROR: Could not find button component in step schema!');\n              } else {\n                // Find the selected option in the schema\n                const selectedOption = buttonComponent.options.find(o => o.value === selectedValue);\n                \n                if (!selectedOption) {\n                  console.log(`ERROR: Could not find option with value \"${selectedValue}\" in schema!`);\n                } else if (!selectedOption.nextStep) {\n                  console.log('ERROR: The selected option does not have a nextStep property in schema!');\n                  console.log('Schema option:', selectedOption);\n                } else {\n                  console.log(`Found nextStep in schema: ${selectedOption.nextStep}`);\n                  \n                  // Find the step index by ID\n                  const nextStepIndex = steps.findIndex(s => s.id === selectedOption.nextStep);\n                  \n                  if (nextStepIndex === -1) {\n                    console.log(`ERROR: Step with ID \"${selectedOption.nextStep}\" not found in steps array!`);\n                    console.log('Available step IDs:', steps.map(s => s.id));\n                  } else {\n                    console.log(`SUCCESS! Navigating to step index: ${nextStepIndex} (id: ${selectedOption.nextStep})`);\n                    renderStep(nextStepIndex);\n                    return;\n                  }\n                }\n              }\n            }\n          } else {\n            console.log('This step is NOT conditional');\n          }\n          \n          // Use direct nextStep property if available\n          if (step.nextStep) {\n            console.log(`Step has direct nextStep property: ${step.nextStep}`);\n            const nextStepIndex = steps.findIndex(s => s.id === step.nextStep);\n            if (nextStepIndex !== -1) {\n              console.log(`Navigating to step index: ${nextStepIndex}`);\n              renderStep(nextStepIndex);\n              return;\n            } else {\n              console.log(`ERROR: Step with ID \"${step.nextStep}\" not found in steps array!`);\n            }\n          }\n          \n          // Default to sequential navigation\n          console.log(`Falling back to sequential navigation: going to step ${currentStep + 1}`);\n          renderStep(currentStep + 1);\n        };\n\n        // Initialize progress dots\n        updateProgressDots(visualStep);\n\n        // Render the initial step\n        renderStep(currentStep, false);\n\n        // Add click handlers to progress dots if clickable\n        if (setting.clickableDots) {\n          const progressDots = wizardContainer.querySelectorAll('.wizard-progress-dot');\n          progressDots.forEach((dot, index) => {\n            dot.style.cursor = 'pointer';\n            dot.addEventListener('click', () => {\n              // Find the step index corresponding to the dot\n              let targetStepIndex;\n              \n              // Simple mapping from dot index to step ID\n              if (index === 0) {\n                targetStepIndex = steps.findIndex(s => s.id === 'welcome');\n              } else if (index === 1) {\n                // For the second dot, use the step the user previously visited if possible\n                const pathStep = steps.find(s => \n                  (s.id === 'existing-collection' || s.id === 'create-collection') && \n                  navigationHistory.includes(steps.findIndex(step => step.id === s.id))\n                );\n                \n                if (pathStep) {\n                  targetStepIndex = steps.findIndex(s => s.id === pathStep.id);\n                } else {\n                  // Default to the first option if no history\n                  targetStepIndex = steps.findIndex(s => s.id === 'existing-collection');\n                }\n              } else if (index === 2) {\n                targetStepIndex = steps.findIndex(s => s.id === 'complete');\n              }\n              \n              if (targetStepIndex >= 0) {\n                // Clear navigation history when directly clicking a dot\n                navigationHistory.length = 0;\n                renderStep(targetStepIndex, false);\n              }\n            });\n          });\n        }\n      },\n\n      // Get the wizard values\n      getValue: function (form, setting) {\n        // For wizard component, we just return the current step\n        const wizardContainer = form.querySelector(`.wizard-container[data-wizard-id=\"${setting.id}\"]`);\n        if (!wizardContainer) return 0;\n\n        // Get current step from data attribute\n        const currentStep = wizardContainer.getAttribute('data-current-step') || 0;\n\n        return currentStep;\n      },\n\n      // Default settings\n      defaults: {\n        clickableDots: false,\n        hideOnComplete: false\n      }\n    });\n  },\n  \n  // Register the button group component\n  registerButtonGroupComponent() {\n    _component_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerComponentType('button-group', {\n      render: function (setting, currentValues) {\n        const value = currentValues[setting.id] !== undefined ? currentValues[setting.id] : setting.default;\n\n        // For debugging\n        console.log('Rendering button group with options:', setting.options);\n\n        return `\n          <div class=\"button-group-container\" data-component-id=\"${setting.id}\">\n            <div class=\"button-group\">\n              ${setting.options.map(option => {\n                // Log each option for debugging\n                console.log('Option:', option.value, 'nextStep:', option.nextStep);\n\n                return `\n                  <div class=\"button-option ${value === option.value ? 'selected' : ''}\" \n                       data-value=\"${option.value}\" \n                       ${option.nextStep ? `data-next-step=\"${option.nextStep}\"` : ''}>\n                    ${option.icon ? `<div class=\"button-option-icon\">${option.icon}</div>` : ''}\n                    <div class=\"button-option-content\">\n                      <div class=\"button-option-label\">${option.label}</div>\n                      ${option.description ? `<div class=\"button-option-description\">${option.description}</div>` : ''}\n                    </div>\n                  </div>`;\n              }).join('')}\n            </div>\n            ${setting.helpText ? `<p class=\"setting-help\">${setting.helpText}</p>` : ''}\n          </div>\n        `;\n      },\n\n      bindEvents: function (form, setting, onChange) {\n        const container = form.querySelector(`.button-group-container[data-component-id=\"${setting.id}\"]`);\n        if (!container) return;\n\n        const options = container.querySelectorAll('.button-option');\n\n        // For debugging\n        console.log('Button group options found:', options.length);\n        options.forEach(option => {\n          console.log('DOM Option:', option.getAttribute('data-value'),\n            'data-next-step:', option.getAttribute('data-next-step'));\n        });\n\n        options.forEach(option => {\n          option.addEventListener('click', () => {\n            // Log button click for debugging\n            console.log(`Button option clicked: ${option.getAttribute('data-value')}`);\n            console.log(`Next step: ${option.getAttribute('data-next-step') || 'none'}`);\n\n            // Remove selected class from all options\n            options.forEach(opt => opt.classList.remove('selected'));\n\n            // Add selected class to clicked option\n            option.classList.add('selected');\n\n            // Get the value\n            const value = option.getAttribute('data-value');\n\n            // Call onChange\n            if (onChange) {\n              onChange(setting.id, value);\n            }\n          });\n        });\n      },\n\n      getValue: function (form, setting) {\n        const container = form.querySelector(`.button-group-container[data-component-id=\"${setting.id}\"]`);\n        if (!container) return setting.default || '';\n\n        const selectedOption = container.querySelector('.button-option.selected');\n        return selectedOption ? selectedOption.getAttribute('data-value') : (setting.default || '');\n      }\n    });\n  }\n};\n\n// Helper functions\n// Helper to check if wizard setup is needed for a plugin\nfunction isWizardSetupRequired(wizardId) {\n  // Allow force enabling for testing\n  if (localStorage.getItem('force_wizard_setup') === 'true') {\n    return true;\n  }\n\n  // Check if setup has been completed\n  const setupCompleted = localStorage.getItem(`${wizardId}_completed`) === 'true';\n  return !setupCompleted;\n}\n\n// Helper to reset wizard state (for testing)\nfunction resetWizardState(wizardId) {\n  localStorage.removeItem(`${wizardId}_completed`);\n  console.log(`Wizard state reset for: ${wizardId}`);\n  return true;\n}\n\n// Helper to force wizard mode for testing\nfunction setWizardTestMode(mode) {\n  if (mode === 'force') {\n    localStorage.setItem('force_wizard_setup', 'true');\n    console.log('Wizard forced to show for testing');\n    return true;\n  } else {\n    localStorage.removeItem('force_wizard_setup');\n    console.log('Wizard test mode reset');\n    return false;\n  }\n}\n\n// Enable console debug mode for easier debugging\nfunction enableWizardDebug() {\n  localStorage.setItem('wizard_debug', 'true');\n  console.log('Wizard debug mode enabled');\n  return true;\n}\n\n// Disable debug mode\nfunction disableWizardDebug() {\n  localStorage.removeItem('wizard_debug');\n  console.log('Wizard debug mode disabled');\n  return false;\n}\n\n// Make helpers globally available\nwindow.isWizardSetupRequired = isWizardSetupRequired;\nwindow.resetWizardState = resetWizardState;\nwindow.setWizardTestMode = setWizardTestMode;\nwindow.enableWizardDebug = enableWizardDebug;\nwindow.disableWizardDebug = disableWizardDebug;\n\n// Initialize WizardComponent and export it\nWizardComponent.init();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WizardComponent);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/components/wizard-component.js?")},"./src/dashboard.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/index.js */ \"./src/modules/index.js\");\n/**\n * SquareHero Plugin Dashboard - Main Entry Point\n * This file serves as the entry point for the dashboard application\n * and initializes all required modules.\n */\n\n// Import modules from the modular system\n\n\n// Initialize dashboard when DOM is ready\ndocument.addEventListener('DOMContentLoaded', async () => {\n    console.log('SquareHero Dashboard: Initializing...');\n    \n    try {\n        // Initialize core modules\n        await _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.Dashboard.init();\n        \n        // Initialize UI components\n        _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.PluginCards.initialize();\n        _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.SettingsPanel.initialize();\n        _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.DiscoverPlugins.initialize();\n        \n        // Initialize additional systems\n        _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.LicensingSystem.initialize();\n        _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.WizardSystem.initialize();\n        \n        console.log('SquareHero Dashboard: Initialization complete');\n    } catch (error) {\n        console.error('SquareHero Dashboard: Error during initialization', error);\n        _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.NotificationSystem.showError('Failed to initialize dashboard. Please refresh the page or contact support.');\n    }\n});\n\n// Add window-level API for backward compatibility if needed\nwindow.SquareHeroDashboard = {\n    Dashboard: _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.Dashboard,\n    LocalStorageService: _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.LocalStorageService,\n    SquarespaceStorageService: _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.SquarespaceStorageService,\n    NotificationSystem: _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.NotificationSystem,\n    PluginRegistry: _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.PluginRegistry,\n    refreshPlugins: () => _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.Dashboard.loadPlugins(),\n    openSettings: (pluginId) => _modules_index_js__WEBPACK_IMPORTED_MODULE_0__.SettingsPanel.openSettingsPanel(pluginId)\n};\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/dashboard.js?")},"./src/injector.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scss_dashboard_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/dashboard.scss */ "./scss/dashboard.scss");\n/* harmony import */ var _modules_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/index.js */ "./src/modules/index.js");\n/* harmony import */ var _components_settings_components_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/settings-components.js */ "./src/components/settings-components.js");\n/**\n * SquareHero Dashboard Injector\n * This file is responsible for injecting the SquareHero dashboard into a target div\n * on a Squarespace page with ID \'squarehero-dashboard-container\'\n */\n\n// Import main SCSS file (this will be processed by webpack)\n\n\n// Import our modular dashboard components\n\n\n/**\n * Import SettingsComponents\n */\n\n\n// Create a self-executing function to avoid polluting the global namespace\n(function () {\n  // Get the base URL from the current script\n  const getBaseUrl = () => {\n    // When served from CDN, the path will be like:\n    // https://cdn.jsdelivr.net/gh/squarehero-store/dashboard@latest/squarehero-dashboard-bundle.js\n    const scripts = document.getElementsByTagName(\'script\');\n    const currentScript = scripts[scripts.length - 1];\n    const scriptSrc = currentScript.src;\n\n    // Extract the base path from the script URL (everything up to the last /)\n    const baseUrl = scriptSrc.substring(0, scriptSrc.lastIndexOf(\'/\') + 1);\n    console.log(\'SquareHero Dashboard: Using base URL:\', baseUrl);\n    \n    // Store the base URL globally so it can be accessed by other components\n    window.squareHeroBaseUrl = baseUrl;\n    \n    return baseUrl;\n  };\n\n  // Store the base URL for use throughout the injector\n  const BASE_URL = getBaseUrl();\n\n  // Cache busting function - adds timestamp to URL to prevent caching\n  const addCacheBuster = (url) => {\n    // Always add cache busting during development\n    // This includes localhost, Squarespace admin/preview environments\n    const timestamp = new Date().getTime();\n    const separator = url.includes(\'?\') ? \'&\' : \'?\';\n    return `${url}${separator}_cb=${timestamp}`;\n  };\n\n  // Check if we\'re in a development environment\n  const isLocalDevelopment = window.location.hostname === \'localhost\' ||\n    window.location.hostname === \'127.0.0.1\' ||\n    window.location.protocol === \'file:\';\n\n  // Track whether styles have been loaded\n  let stylesLoaded = false;\n\n  // Track preloaded resources\n  let scriptsPreloaded = false;\n\n  // Hide edit etc\n  // Add custom style to hide elements in the toolbar\n  function injectCustomStyles() {\n    try {\n      // Try to access top window first\n      if (window.top && window.top.document) {\n        const customStyle = window.top.document.createElement(\'style\');\n        customStyle.id = \'squarehero-custom-styles\';\n        customStyle.textContent = `\n        [data-test="frameToolbarEdit"] {display:none!important}\n        [data-guidance-engine="guidance-engine-device-view-button-container"] {display:none!important}\n      `;\n\n        // Only add if it doesn\'t exist already\n        if (!window.top.document.getElementById(\'squarehero-custom-styles\')) {\n          // Add to top window\'s head\n          window.top.document.head.appendChild(customStyle);\n          console.log(\'SquareHero Dashboard: Custom styles injected into top window\');\n        } else {\n          // Update existing style content\n          window.top.document.getElementById(\'squarehero-custom-styles\').textContent = customStyle.textContent;\n          console.log(\'SquareHero Dashboard: Updated existing custom styles\');\n        }\n      } else {\n        console.warn(\'SquareHero Dashboard: Cannot access top window to inject custom styles\');\n      }\n    } catch (error) {\n      console.error(\'SquareHero Dashboard: Error injecting custom styles:\', error);\n    }\n  }\n\n  // Function to preload resources in the background while on login screen\n  async function preloadDashboardResources() {\n    console.log(\'SquareHero Dashboard: Starting background preloading of dashboard resources\');\n\n    // Only preload once\n    if (scriptsPreloaded) {\n      console.log(\'SquareHero Dashboard: Resources already preloaded\');\n      return;\n    }\n\n    try {\n      // Preload all dashboard scripts\n      console.log(\'SquareHero Dashboard: Preloading dashboard scripts\');\n      const scripts = [\n        { src: `${BASE_URL}auth.js` },\n        // Removed references to files now in src directory\n        { src: `${BASE_URL}licensing.js` },\n        { src: `${BASE_URL}firebase-docs-integration.js` }\n        // Removed dashboard.js since it\'s now handled by webpack\n      ];\n\n      // Create link elements for each script to preload them\n      scripts.forEach(script => {\n        const preloadLink = document.createElement(\'link\');\n        preloadLink.rel = \'preload\';\n        preloadLink.as = \'script\';\n        preloadLink.href = addCacheBuster(script.src);\n        document.head.appendChild(preloadLink);\n\n        console.log(`SquareHero Dashboard: Preloaded ${script.src}`);\n      });\n\n      // Mark as preloaded\n      scriptsPreloaded = true;\n      console.log(\'SquareHero Dashboard: All resources preloaded\');\n    } catch (error) {\n      console.error(\'SquareHero Dashboard: Error during preloading:\', error);\n    }\n  }\n\n  // Function to load external CSS file\n  function loadExternalCSS(url) {\n    return new Promise((resolve) => {\n      const link = document.createElement(\'link\');\n      link.rel = \'stylesheet\';\n      link.href = url;\n\n      // Set up onload handler\n      link.onload = function () {\n        console.log(\'SquareHero Dashboard: CSS loaded:\', url);\n        stylesLoaded = true;\n        resolve(true);\n      };\n\n      // Set up error handler\n      link.onerror = function () {\n        console.error(\'SquareHero Dashboard: Failed to load CSS:\', url);\n        resolve(false);\n      };\n\n      document.head.appendChild(link);\n\n      // Fallback resolve in case onload doesn\'t fire\n      setTimeout(() => {\n        if (!stylesLoaded) {\n          console.warn(\'SquareHero Dashboard: CSS load timeout, continuing anyway\');\n          resolve(true);\n        }\n      }, 3000);\n    });\n  }\n\n  // Load all required CSS first, before any HTML is injected\n  async function loadAllStyles() {\n    console.log(\'SquareHero Dashboard: Loading CSS files...\');\n\n    // Load the main bundled CSS\n    await loadExternalCSS(addCacheBuster(`${BASE_URL}squarehero-dashboard-styles.css`));\n\n    console.log(\'SquareHero Dashboard: All CSS loaded\');\n    return true;\n  }\n\n  // Initialize when DOM is ready with revised flow:\n  // 1. Load CSS first\n  // 2. Check authentication\n  // 3. Show appropriate UI (login or dashboard)\n  async function init() {\n    console.log(\'SquareHero Dashboard: Initializing...\');\n\n    // Load CSS files first to ensure proper styling from the start\n    await loadAllStyles();\n\n    // After CSS is loaded, check authentication and display appropriate UI\n    const isAuthenticated = await checkAuthentication();\n\n    if (isAuthenticated) {\n      console.log(\'SquareHero Dashboard: User is authenticated, showing dashboard\');\n      injectDashboard();\n    } else {\n      console.log(\'SquareHero Dashboard: User is not authenticated, showing login screen\');\n      createLoginUI();\n    }\n  }\n\n  if (document.readyState === \'loading\') {\n    document.addEventListener(\'DOMContentLoaded\', init);\n  } else {\n    init();\n  }\n\n  // Function to inject dashboard\n  function injectDashboard() {\n    console.log(\'SquareHero Dashboard: Injecting dashboard UI...\');\n\n    // First, add the dashboard container if it doesn\'t exist\n    let container = document.getElementById(\'squarehero-dashboard-container\');\n\n    if (!container) {\n      console.log(\'SquareHero Dashboard: Creating container element\');\n      container = document.createElement(\'div\');\n      container.id = \'squarehero-dashboard-container\';\n      document.body.appendChild(container);\n    }\n\n    // Clear any existing content (like login UI)\n    container.innerHTML = \'\';\n\n    // Add special styles to make dashboard visible\n    const dashboardStyle = document.createElement(\'style\');\n    dashboardStyle.textContent = `\n      .dashboard-wrapper {\n        opacity: 1 !important;\n        visibility: visible !important;\n      }\n    `;\n    document.head.appendChild(dashboardStyle);\n\n    // Create dashboard wrapper and inject the HTML structure\n    const dashboardWrapper = document.createElement(\'div\');\n    dashboardWrapper.className = \'squarehero-dashboard-wrapper\';\n\n    // Start building the HTML structure\n    let dashboardHTML = \'\';\n\n    // Only include the admin placeholder in local development\n    if (isLocalDevelopment) {\n      dashboardHTML += `\n        <div class="sqs-admin-placeholder">\n          <img src="${BASE_URL}assets/sqs-placeholder.jpg" alt="Squarespace Admin">\n        </div>\n      `;\n      console.log(\'SquareHero Dashboard: Including admin placeholder for local development\');\n    }\n\n    // Add the main dashboard structure\n    dashboardHTML += `\n      <div class="dashboard-wrapper visible" data-wizard-enabled="false">\n        <header class="dashboard-header">\n          <img src="${BASE_URL}assets/sh-logo.png" alt="SquareHero Logo" class="logo">\n          <div class="title-section">\n            <h1 class="dashboard-title">SquareHero Hub</h1>\n          </div>\n          <div class="header-buttons">\n            <button class="support-button">SquareHero Support</button>\n          </div>\n        </header>\n\n        <div class="dashboard-tabs">\n          <button class="dashboard-tab active" data-tab="plugins">Your Plugins</button>\n          <button class="dashboard-tab" data-tab="discover-plugins">Discover Plugins</button>\n          <button class="dashboard-tab" data-tab="settings">Settings</button>\n        </div>\n\n        <main class="dashboard-container">\n          <section class="plugins-column dashboard-tab-content active" id="plugins-tab">\n            <div class="column-header">\n              <h2 class="column-title">Manage your plugins</h2>\n              <p class="column-description">Your plugins are shown below. Click any plugin to adjust settings or view documentation.</p>\n            </div>\n\n            <div id="plugin-cards-container" class="plugin-cards-container">\n              \x3c!-- Plugin cards will be rendered here --\x3e\n              <div class="loading-indicator">\n                <p>Loading plugins...</p>\n              </div>\n            </div>\n          </section>\n\n          <section class="discover-plugins-column dashboard-tab-content" id="discover-plugins-tab">\n            <div class="column-header">\n              <h2 class="column-title">Explore plugins with our no-risk trial</h2>\n              <p class="column-description">Simple setup, instant results - just one click. No code, no downloads, no emails, no commitment.</p>\n            </div>\n            <div id="discover-plugins-content" class="discover-plugins-content">\n              \x3c!-- Discover plugins content will be rendered here --\x3e\n              <div class="loading-indicator">\n                <p>Loading available plugins...</p>\n              </div>\n            </div>\n          </section>\n\n          <section class="news-column dashboard-tab-content" id="news-tab">\n            <div class="column-header">\n              <h2 class="column-title">What\'s new</h2>\n              <p class="column-description">Stay updated on the latest announcements, feature releases, and important plugin updates from the SquareHero team.</p>\n            </div>\n\n            <div id="news-items-container" class="news-items-container">\n              \x3c!-- News items will be rendered here --\x3e\n              <div class="loading-indicator">\n                <p>Loading updates...</p>\n              </div>\n            </div>\n          </section>\n\n          <section class="settings-column dashboard-tab-content" id="settings-tab">\n            <div class="column-header">\n              <h2 class="column-title">Settings</h2>\n              <p class="column-description">General settings for this dashboard.</p>\n            </div>\n            <div id="settings-content" class="settings-content">\n              <p>Settings content will go here.</p>\n              <button class="logout-button" id="logout-button">Logout</button>\n            </div>\n          </section>\n        </main>\n\n        <div class="settings-panel" id="settings-panel">\n          <div class="panel-header">\n            <h2 class="panel-title" id="plugin-settings-title">Plugin Settings</h2>\n            <button class="close-button" id="close-panel">&times;</button>\n          </div>\n          <div class="panel-content" id="panel-content">\n            \x3c!-- Settings panel content will be rendered here --\x3e\n          </div>\n        </div>\n\n        <div class="overlay" id="overlay"></div>\n      </div>\n    `;\n\n    // Set the innerHTML of the dashboard wrapper\n    dashboardWrapper.innerHTML = dashboardHTML;\n\n    // Append the dashboard to the container\n    container.appendChild(dashboardWrapper);\n\n    // Expose Dashboard globally for backward compatibility\n    window.Dashboard = _modules_index_js__WEBPACK_IMPORTED_MODULE_1__.Dashboard;\n    \n    // Initialize the dashboard without waiting for Firebase\n    console.log(\'Initializing Dashboard from modular system\');\n    \n    // Make the modules available globally\n    window.PluginRegistry = _modules_index_js__WEBPACK_IMPORTED_MODULE_1__.PluginRegistry;\n    window.SettingsPanel = _modules_index_js__WEBPACK_IMPORTED_MODULE_1__.SettingsPanel;\n    window.NotificationSystem = _modules_index_js__WEBPACK_IMPORTED_MODULE_1__.NotificationSystem;\n    window.PluginCards = _modules_index_js__WEBPACK_IMPORTED_MODULE_1__.PluginCards;\n    window.DiscoverPlugins = _modules_index_js__WEBPACK_IMPORTED_MODULE_1__.DiscoverPlugins;\n    window.LicensingSystem = _modules_index_js__WEBPACK_IMPORTED_MODULE_1__.LicensingSystem;\n    window.WizardSystem = _modules_index_js__WEBPACK_IMPORTED_MODULE_1__.WizardSystem;\n    window.ComponentSystem = _modules_index_js__WEBPACK_IMPORTED_MODULE_1__.ComponentSystem; \n    \n    // Make SettingsComponents available globally - this is critical for plugin settings\n    window.SettingsComponents = _components_settings_components_js__WEBPACK_IMPORTED_MODULE_2__["default"];\n    \n    // Initialize the dashboard\n    _modules_index_js__WEBPACK_IMPORTED_MODULE_1__.Dashboard.init();\n  }\n\n  // Function to check authentication status - simplified without Firebase dependency\n  function checkAuthentication() {\n    console.log(\'SquareHero Dashboard: Checking authentication (simplified)...\');\n    \n    // For testing, we\'ll just return true to always show the dashboard\n    // Later this can be replaced with a proper authentication check\n    return Promise.resolve(true);\n  }\n\n  // Function for local storage initialization - replaces loadFirebase\n  function loadLocalStorage() {\n    console.log(\'LocalStorage: Initializing local storage for settings...\');\n    \n    // Create dummy user data to ensure settings work\n    const dummyUser = {\n      uid: \'local-user\',\n      email: \'local@squarehero.test\'\n    };\n    \n    // Store in session storage\n    sessionStorage.setItem(\'squarehero_current_user\', JSON.stringify(dummyUser));\n    \n    // Simulate Firebase ready event for backward compatibility\n    window.dispatchEvent(new Event(\'firebase-ready\'));\n    \n    return Promise.resolve();\n  }\n})();\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/injector.js?')},"./src/modules/core/dashboard-core.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _squarespace_storage_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./squarespace-storage-service.js */ \"./src/modules/core/squarespace-storage-service.js\");\n/* harmony import */ var _notification_system_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notification-system.js */ \"./src/modules/core/notification-system.js\");\n/* harmony import */ var _plugin_registry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plugin-registry.js */ \"./src/modules/core/plugin-registry.js\");\n/* harmony import */ var _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/settings-panel.js */ \"./src/modules/ui/settings-panel.js\");\n/* harmony import */ var _ui_discover_plugins_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ui/discover-plugins.js */ \"./src/modules/ui/discover-plugins.js\");\n/* harmony import */ var _ui_cards_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ui/cards.js */ \"./src/modules/ui/cards.js\");\n/* harmony import */ var _local_storage_service_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./local-storage-service.js */ \"./src/modules/core/local-storage-service.js\");\n/**\n * Dashboard Core Module\n * Main controller for the SquareHero dashboard\n */\n\n\n\n\n\n\n\n\n// Keep LocalStorageService for backwards compatibility\n\n\nclass DashboardClass {\n    constructor() {\n        this.initialized = false;\n        this.activeTab = 'plugins';\n        this.availablePlugins = [];\n        this.installedPlugins = [];\n        this.activePanel = null;\n        this.hasUnsavedChanges = false;\n        this.notificationBar = null;\n        this.notificationTimeout = null;\n        this.attentionTimeout = null;\n        this.loadingStates = {};\n        this.isInitializationInProgress = false;\n        this.elements = {};\n        this.storageInitialized = false;\n        this.uiInitialized = false;\n        this.hashProcessed = false;\n        \n        // Expose PluginRegistry for plugins to use\n        this.PluginRegistry = _plugin_registry_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n\n        // Listen for authentication events\n        document.addEventListener('user-logged-in', this.handleUserLoggedIn.bind(this));\n        document.addEventListener('firebase-auth-state-changed', this.handleAuthStateChanged.bind(this));\n    }\n\n    /**\n     * Handle user logged in event coming from Firebase auth state change\n     * @param {CustomEvent} event - Event containing user data\n     */\n    handleUserLoggedIn(event) {\n        console.log('Dashboard: User logged in event received', event.detail);\n        \n        // Check if this is a fresh login or if the dashboard is already initialized\n        const isFreshLogin = !this.initialized && !this.isInitializationInProgress;\n        \n        // Only show a notification if this is a fresh login, not for already logged in users\n        if (isFreshLogin) {\n            // Show a hexagon notification for login\n            _notification_system_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].showLogin(`Logged in as ${event.detail.email || 'user'}`);\n        }\n        \n        // If dashboard is already initialized, reload plugins to ensure they're properly loaded\n        if (this.initialized) {\n            console.log('Dashboard: Reloading plugins after login');\n            this.loadPlugins().then(() => {\n                this.renderPluginCards();\n                // Show the active tab again to ensure UI is properly updated\n                this.showTab(this.activeTab);\n            });\n        } else if (!this.isInitializationInProgress) {\n            // If not initialized and not in progress, initialize now\n            console.log('Dashboard: Initializing after login');\n            this.init();\n        }\n    }\n\n    /**\n     * Handle auth state changed event\n     * @param {CustomEvent} event - Event containing auth state data\n     */\n    handleAuthStateChanged(event) {\n        console.log('Dashboard: Auth state changed event received', event.detail);\n        \n        // If user is now logged in, initialize dashboard if needed\n        if (event.detail.user && !this.initialized && !this.isInitializationInProgress) {\n            console.log('Dashboard: Initializing after auth state change');\n            this.init();\n        }\n    }\n\n    /**\n     * Initialize the dashboard\n     */\n    async init() {\n        if (this.initialized) {\n            console.log('Dashboard: Already initialized');\n            return;\n        }\n\n        console.log('Dashboard: Initializing...');\n        this.isInitializationInProgress = true;\n        window.dashboardInitialized = true;\n        \n        // Expose PluginRegistry to global window scope for plugins to use\n        window.PluginRegistry = _plugin_registry_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n\n        try {\n            // Initialize Squarespace Storage Service (new storage method)\n            await _squarespace_storage_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].initialize();\n            this.storageInitialized = true;\n            \n            // Initialize Local Storage Service for backward compatibility\n            await _local_storage_service_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].initialize();\n            \n            // Initialize notification system\n            _notification_system_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].initialize();\n            \n            // Wait for DOM to be fully rendered\n            // This is critical to ensure all elements are available\n            await this.waitForElement('.dashboard-tabs');\n            console.log('Dashboard: Dashboard tabs found, continuing initialization');\n            \n            // Cache DOM elements\n            this.cacheElements();\n\n            // Set up skeleton loader for plugin cards - only if containers exist\n            if (this.elements.pluginCardsContainer && this.elements.newsItemsContainer) {\n                await this.loadSkeletonLoader();\n                \n                // Show skeleton loaders BEFORE loading any data\n                if (window.SkeletonLoader) {\n                    console.log('🎯 [Dashboard] Creating skeleton loaders');\n                    this.loadingStates.plugins = window.SkeletonLoader.show('plugin-cards-container', 'pluginCard', 3);\n                    this.loadingStates.news = window.SkeletonLoader.show('news-items-container', 'newsItem', 4);\n                    console.log('🎯 [Dashboard] Skeleton loaders created:', this.loadingStates);\n                }\n            } else {\n                console.warn('🎯 [Dashboard] Container elements not found, skipping skeleton loader');\n            }\n\n            // Load plugins\n            await this.loadPlugins();\n            \n            // Set up UI event listeners - only if elements exist\n            this.setupEventListeners();\n            \n            // Initialize tab event listeners\n            if (this.elements.dashboardTabs) {\n                this.initTabEventListeners();\n                this.uiInitialized = true;\n            } else {\n                console.warn('Dashboard: dashboardTabs element not found, skipping tab initialization');\n            }\n            \n            // Mark as initialized\n            this.initialized = true;\n            \n            // Add hash change listener for navigation\n            window.addEventListener('hashchange', this.handleHashChange.bind(this));\n            \n            // Check for URL hash and navigate if needed\n            this.processInitialHash();\n            \n            // If no hash was processed, show default tab\n            if (!this.hashProcessed) {\n                this.showTab(this.activeTab);\n            }\n            \n            // Render plugin cards if container exists\n            if (this.elements.pluginCardsContainer) {\n                await this.renderPluginCards();\n            } else {\n                console.warn('Dashboard: pluginCardsContainer not found, skipping renderPluginCards');\n            }\n\n            // Render discover plugin cards if container exists\n            if (document.getElementById('discover-plugins-content')) {\n                _ui_discover_plugins_js__WEBPACK_IMPORTED_MODULE_4__.DiscoverPlugins.renderDiscoverPluginCards(this.availablePlugins, this.installedPlugins);\n            } else {\n                console.warn('Dashboard: discover-plugins-content not found, skipping renderDiscoverPluginCards');\n            }\n            \n            console.log('Dashboard: Initialization complete');\n            \n            // Fire initialized event\n            this.fireEvent('dashboard-initialized');\n            \n            this.isInitializationInProgress = false;\n            return true;\n        } catch (error) {\n            console.error('Dashboard: Error during initialization', error);\n            _notification_system_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].showError('Error initializing dashboard');\n            this.isInitializationInProgress = false;\n            return false;\n        }\n    }\n\n    /**\n     * Wait for an element to exist in the DOM\n     * @param {string} selector - CSS selector for the element to wait for\n     * @param {number} timeout - Maximum time to wait in milliseconds\n     * @returns {Promise<Element>} - Promise that resolves with the element\n     */\n    waitForElement(selector, timeout = 10000) {\n        console.log(`Waiting for element: ${selector}`);\n        return new Promise((resolve, reject) => {\n            // Check if element already exists\n            const element = document.querySelector(selector);\n            if (element) {\n                console.log(`Element ${selector} already exists`);\n                return resolve(element);\n            }\n            \n            // Set timeout to reject promise if element doesn't appear\n            const timeoutId = setTimeout(() => {\n                observer.disconnect();\n                console.warn(`Timeout waiting for element: ${selector}`);\n                \n                // Don't reject, just resolve with null to allow dashboard to continue\n                resolve(null);\n            }, timeout);\n            \n            // Set up mutation observer to watch for element\n            const observer = new MutationObserver((mutations, observerInstance) => {\n                const element = document.querySelector(selector);\n                if (element) {\n                    console.log(`Element ${selector} found in DOM`);\n                    clearTimeout(timeoutId);\n                    observerInstance.disconnect();\n                    resolve(element);\n                }\n            });\n            \n            // Start observing\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true\n            });\n        });\n    }\n\n    /**\n     * Cache DOM elements\n     * Ensure elements are properly found even if they don't exist yet\n     */\n    cacheElements() {\n        try {\n            console.log('Dashboard: Caching DOM elements');\n            \n            // Find each element, but don't fail if one is missing\n            this.elements = {\n                pluginCardsContainer: document.getElementById('plugin-cards-container'),\n                newsItemsContainer: document.getElementById('news-items-container'),\n                settingsPanel: document.getElementById('settings-panel'),\n                panelContent: document.getElementById('panel-content'),\n                closeButton: document.getElementById('close-panel'),\n                overlay: document.getElementById('overlay'),\n                dashboardTabs: document.querySelector('.dashboard-tabs'),\n                dashboardTabContents: document.querySelectorAll('.dashboard-tab-content')\n            };\n            \n            // Log which elements were not found\n            Object.entries(this.elements).forEach(([key, element]) => {\n                if (!element) {\n                    console.warn(`Dashboard: Element '${key}' not found during caching`);\n                }\n            });\n\n            console.log(\"dashboardTabs:\", this.elements.dashboardTabs);\n            console.log(\"dashboardTabContents:\", this.elements.dashboardTabContents);\n        } catch (error) {\n            console.error('Dashboard: Error while caching elements:', error);\n        }\n    }\n\n    /**\n     * Load the skeleton loader library if not already loaded\n     */\n    async loadSkeletonLoader() {\n        console.log('🎯 [Dashboard] Loading skeleton loader');\n\n        // Check if SkeletonLoader is already available\n        if (window.SkeletonLoader) {\n            console.log('🎯 [Dashboard] SkeletonLoader already loaded');\n            return;\n        }\n\n        // Load both CSS and JS\n        return new Promise((resolve, reject) => {\n            // Load the skeleton styles first\n            const style = document.createElement('link');\n            style.rel = 'stylesheet';\n            style.href = 'skeleton-loader.css';\n\n            // If local CSS fails, try CDN\n            style.onerror = () => {\n                console.log('🎯 [Dashboard] Local skeleton CSS failed, trying CDN');\n                style.href = 'https://cdn.jsdelivr.net/gh/squarehero-store/dashboard@0/skeleton-loader.min.css';\n            };\n\n            // Once CSS is loaded, load the script\n            style.onload = () => {\n                console.log('🎯 [Dashboard] Skeleton CSS loaded');\n\n                // Now load the script\n                const script = document.createElement('script');\n                script.src = 'skeleton-loader.js';\n                script.onerror = reject;\n                script.onload = () => {\n                    console.log('🎯 [Dashboard] Skeleton script loaded');\n                    // Wait a brief moment for script to initialize\n                    setTimeout(() => {\n                        if (window.SkeletonLoader) {\n                            console.log('🎯 [Dashboard] SkeletonLoader ready');\n                            resolve();\n                        } else {\n                            reject(new Error('SkeletonLoader not initialized'));\n                        }\n                    }, 100);\n                };\n                document.body.appendChild(script);\n            };\n\n            document.head.appendChild(style);\n        });\n    }\n\n    /**\n     * Fire a custom event\n     * @param {string} eventName - Name of the event to fire\n     * @param {any} detail - Event details\n     */\n    fireEvent(eventName, detail = {}) {\n        const event = new CustomEvent(eventName, {\n            detail: detail,\n            bubbles: true\n        });\n        document.dispatchEvent(event);\n        console.log(`Dashboard: Fired event \"${eventName}\"`, detail);\n    }\n\n    /**\n     * Load all plugins\n     */\n    async loadPlugins() {\n        console.log('Dashboard: Loading plugins...');\n\n        try {\n            // Load available plugins from plugins.json\n            const availablePlugins = await this.fetchAvailablePlugins();\n            this.availablePlugins = availablePlugins;\n            \n            // Detect installed plugins\n            let installedPlugins = this.detectInstalledPlugins(availablePlugins);\n            \n            // Load plugin settings from Squarespace storage\n            await this.loadPluginSettings(installedPlugins);\n            \n            // Make installedPlugins globally available\n            this.installedPlugins = installedPlugins;\n            window.installedPlugins = this.installedPlugins;\n            \n            // Initialize plugin registry\n            _plugin_registry_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].initialize(availablePlugins, this.installedPlugins);\n            \n            // Add PluginRegistry to window and this for backwards compatibility with existing plugins\n            window.PluginRegistry = _plugin_registry_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n            \n            console.log('Dashboard: Loaded plugins', {\n                available: availablePlugins.length,\n                installed: this.installedPlugins.length\n            });\n            \n            return true;\n        } catch (error) {\n            console.error('Dashboard: Error loading plugins', error);\n            _notification_system_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].showError('Failed to load plugins');\n            return false;\n        }\n    }\n\n    /**\n     * Load plugin settings from Squarespace storage\n     * @param {Array} plugins - Array of detected plugins\n     */\n    async loadPluginSettings(plugins) {\n        console.log('Dashboard: Loading plugin settings...');\n        \n        // If not signed in, use default settings\n        if (!_squarespace_storage_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getCurrentUser()) {\n            console.warn('Dashboard: No user signed in, using default settings for plugins');\n            \n            // Initialize default settings for all plugins\n            plugins.forEach(plugin => {\n                plugin.settings = plugin.settings || { enabled: true }; // Default settings\n                plugin.status = 'enabled'; // Default status\n            });\n            \n            return;\n        }\n        \n        // Try to load settings for each plugin from Squarespace storage\n        for (const plugin of plugins) {\n            try {\n                // Get settings from Squarespace storage (falls back to LocalStorage if needed)\n                const settings = await _squarespace_storage_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getPluginSettings(plugin.id);\n                \n                if (settings) {\n                    console.log(`Dashboard: Loaded settings for plugin ${plugin.id}:`, settings);\n                    plugin.settings = settings;\n                    \n                    // Set status based on enabled setting\n                    plugin.status = settings.enabled !== false ? 'enabled' : 'disabled';\n                } else {\n                    console.log(`Dashboard: No settings found for plugin ${plugin.id}, creating default settings`);\n                    \n                    // Create default settings\n                    const defaultSettings = { enabled: true };\n                    plugin.settings = defaultSettings;\n                    plugin.status = 'enabled';\n                    \n                    // Save default settings to Squarespace storage\n                    await _squarespace_storage_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updatePluginSettings(plugin.id, defaultSettings);\n                }\n            } catch (error) {\n                console.error(`Dashboard: Error loading settings for plugin ${plugin.id}:`, error);\n                \n                // Use default settings on error\n                plugin.settings = { enabled: true };\n                plugin.status = 'enabled';\n            }\n        }\n    }\n\n    /**\n     * Fetch available plugins\n     */\n    async fetchAvailablePlugins() {\n        try {\n            // Check if we're in a local test environment\n            const isLocalTest = window.location.hostname === 'localhost' || \n                               window.location.pathname.includes('local.html') ||\n                               window.location.pathname.includes('local-install-test');\n            \n            console.log(`🔄 [DEBUG-FETCH] Environment check: isLocalTest=${isLocalTest}, hostname=${window.location.hostname}, pathname=${window.location.pathname}`);\n            \n            // Create cache buster\n            const timestamp = new Date().getTime();\n            \n            // Determine plugins.json URL based on environment\n            let pluginsJsonUrl;\n            if (isLocalTest) {\n                // For local testing, load from root directory\n                pluginsJsonUrl = `./plugins/plugins.json?_=${timestamp}`;\n                console.log('🔄 [DEBUG-FETCH] Using local plugins.json path for testing');\n            } else {\n                // For production, load from CDN with latest tag\n                pluginsJsonUrl = `https://cdn.jsdelivr.net/gh/squarehero-store/dashboard@latest/dist/plugins/plugins.json?_=${timestamp}`;\n                console.log('🔄 [DEBUG-FETCH] Using production CDN path with @latest tag');\n            }\n            \n            console.log('🔄 [DEBUG-FETCH] Final plugins.json URL:', pluginsJsonUrl);\n            \n            const response = await fetch(pluginsJsonUrl);\n            if (!response.ok) {\n                console.error('❌ [DEBUG-FETCH] Failed to load plugins.json:', response.status, response.statusText);\n                \n                // If the main URL fails and we're in production, try with fixed version as fallback\n                if (!isLocalTest) {\n                    console.log('🔄 [DEBUG-FETCH] Trying fallback URL with fixed version @0');\n                    const fallbackUrl = `https://cdn.jsdelivr.net/gh/squarehero-store/dashboard@0/dist/plugins/plugins.json?_=${timestamp}`;\n                    \n                    try {\n                        const fallbackResponse = await fetch(fallbackUrl);\n                        if (fallbackResponse.ok) {\n                            console.log('✅ [DEBUG-FETCH] Fallback URL successful');\n                            const data = await fallbackResponse.json();\n                            const plugins = data.plugins || [];\n                            console.log(`📋 [DEBUG-FETCH] Loaded ${plugins.length} plugins from fallback JSON`);\n                            return plugins;\n                        } else {\n                            console.error('❌ [DEBUG-FETCH] Fallback URL also failed:', fallbackResponse.status);\n                        }\n                    } catch (fallbackError) {\n                        console.error('❌ [DEBUG-FETCH] Error with fallback URL:', fallbackError);\n                    }\n                }\n                \n                throw new Error(`Failed to fetch plugins.json: ${response.statusText}`);\n            }\n            \n            console.log('✅ [DEBUG-FETCH] Successfully loaded plugins.json');\n            \n            const data = await response.json();\n            const plugins = data.plugins || [];\n            console.log(`📋 [DEBUG-FETCH] Loaded ${plugins.length} plugins from JSON:`, plugins);\n            return plugins;\n        } catch (error) {\n            console.error('Dashboard: Error fetching available plugins', error);\n            return [];\n        }\n    }\n\n    /**\n     * Detect installed plugins based on script tags\n     */\n    detectInstalledPlugins(allPlugins) {\n        // Find all script tags with our custom attribute\n        const installedIds = [];\n        console.log('🔍 [DEBUG-INSTALLED] Looking for script tags with data-squarehero-plugin attribute');\n        document.querySelectorAll('script[data-squarehero-plugin]').forEach(script => {\n            const pluginId = script.getAttribute('data-squarehero-plugin');\n            installedIds.push(pluginId);\n            console.log(`🔍 [DEBUG-INSTALLED] Found installed plugin: ${pluginId}`);\n        });\n\n        console.log('🔍 [DEBUG-INSTALLED] All detected installed plugin IDs:', installedIds);\n\n        // Filter available plugins to only include those that are installed\n        const detectedPlugins = allPlugins.filter(plugin => installedIds.includes(plugin.id));\n        console.log('🔍 [DEBUG-INSTALLED] Matched installed plugins from available plugins:', detectedPlugins.map(p => p.id));\n\n        // For development/testing purposes only:\n        // If we're in development mode, show a message but still return empty array\n        if (detectedPlugins.length === 0 && window.location.hostname === 'localhost') {\n            console.log('🔍 [DEBUG-INSTALLED] No installed plugins detected. In production, no plugins would be shown.');\n            // Uncomment the next line during development to see all plugins anyway\n            return allPlugins; // For testing, show all plugins\n        }\n\n        return detectedPlugins;\n    }\n\n    /**\n     * Render plugin cards\n     */\n    async renderPluginCards() {\n        // Don't show any text loading indicators or hide skeleton loader here\n        // The skeleton loader will be hidden after all settings are loaded\n        console.log('🔍 [DEBUG-RENDER] Rendering plugin cards with installedPlugins:', this.installedPlugins?.length);\n        console.log('🔍 [DEBUG-RENDER] Plugin data being rendered:', JSON.stringify(this.installedPlugins.map(p => ({\n            id: p.id,\n            status: p.status,\n            settings: p.settings?.enabled\n        }))));\n\n        if (!this.installedPlugins || !this.installedPlugins.length) {\n            this.elements.pluginCardsContainer.innerHTML = '<p>No plugins installed on this site. Visit the SquareHero plugin store to browse available plugins.</p>';\n\n            // Hide skeleton loader if no plugins are installed\n            if (this.loadingStates.plugins) {\n                console.log('🎯 [Dashboard] Hiding plugin card skeletons (no plugins)');\n                this.loadingStates.plugins.hide();\n            }\n            return;\n        }\n\n        try {\n            // Initialize PluginCards with the installedPlugins\n            _ui_cards_js__WEBPACK_IMPORTED_MODULE_5__.PluginCards.initialize(this.installedPlugins);\n            \n            // Render the plugin cards\n            await _ui_cards_js__WEBPACK_IMPORTED_MODULE_5__.PluginCards.renderPluginCards();\n            \n            // Hide skeleton loader after cards are rendered\n            if (this.loadingStates.plugins) {\n                console.log('🔍 [DEBUG-RENDER] Hiding plugin card skeletons after rendering cards');\n                this.loadingStates.plugins.hide();\n            }\n        } catch (error) {\n            console.error('Error rendering plugin cards:', error);\n            this.elements.pluginCardsContainer.innerHTML = '<p>Error loading plugins. Please try again later.</p>';\n\n            // Hide skeleton loader on error\n            if (this.loadingStates.plugins) {\n                this.loadingStates.plugins.hide();\n            }\n        }\n    }\n\n    /**\n     * Initialize tab event listeners\n     */\n    initTabEventListeners() {\n        console.log(\"initTabEventListeners called\");\n        this.elements.dashboardTabs.addEventListener('click', (event) => {\n            if (event.target.classList.contains('dashboard-tab')) {\n                const tabId = event.target.getAttribute('data-tab');\n                this.showTab(tabId);\n            }\n        });\n    }\n\n    /**\n     * Set up UI event listeners\n     */\n    setupEventListeners() {\n        console.log('Dashboard: Setting up event listeners');\n\n        // Tab navigation\n        const tabButtons = document.querySelectorAll('.dashboard-tab');\n        if (tabButtons.length > 0) {\n            tabButtons.forEach(button => {\n                button.addEventListener('click', (e) => {\n                    const tabName = e.target.dataset.tab;\n                    this.showTab(tabName);\n                });\n            });\n        } else {\n            console.warn('Dashboard: No tab buttons found');\n        }\n\n        // Logout button\n        const logoutButton = document.getElementById('logout-button');\n        if (logoutButton) {\n            logoutButton.addEventListener('click', () => {\n                this.logout();\n            });\n        } else {\n            console.warn('Dashboard: Logout button not found');\n        }\n\n        // Support button\n        const supportButton = document.querySelector('.support-button');\n        if (supportButton) {\n            supportButton.addEventListener('click', () => {\n                window.open('https://support.squarehero.net', '_blank');\n            });\n        } else {\n            console.warn('Dashboard: Support button not found');\n        }\n\n        // Close panel button\n        if (this.elements.closeButton) {\n            this.elements.closeButton.addEventListener('click', () => {\n                this.handleClosePanel();\n            });\n        } else {\n            console.warn('Dashboard: Close panel button not found');\n        }\n\n        // Overlay click to close panel\n        if (this.elements.overlay) {\n            this.elements.overlay.addEventListener('click', () => {\n                this.handleClosePanel();\n            });\n        } else {\n            console.warn('Dashboard: Overlay element not found');\n        }\n\n        // Handle escape key to close panel\n        document.addEventListener('keydown', (event) => {\n            if (event.key === 'Escape' && this.activePanel) {\n                this.handleClosePanel();\n            }\n        });\n    }\n\n    /**\n     * Handle close panel event with attention animation\n     */\n    handleClosePanel() {\n        console.log(\"handleClosePanel called, hasUnsavedChanges =\", this.hasUnsavedChanges);\n\n        // Check if SettingsPanel hasUnsavedChanges\n        const hasUnsavedChanges = _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_3__.SettingsPanel.hasUnsavedChanges;\n\n        // If there are unsaved changes, show attention animation instead of closing\n        if (hasUnsavedChanges) {\n            console.log(\"Preventing panel close due to unsaved changes\");\n            _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_3__.SettingsPanel.showAttention();\n            return; // Don't close the panel\n        }\n\n        // If no unsaved changes, close the panel\n        console.log(\"Closing panel - no unsaved changes\");\n        this.closeSettingsPanel();\n    }\n\n    /**\n     * Close settings panel\n     */\n    closeSettingsPanel() {\n        this.elements.settingsPanel.classList.remove('visible');\n        this.elements.overlay.classList.remove('visible');\n\n        // For accessibility\n        this.elements.settingsPanel.setAttribute('aria-hidden', 'true');\n\n        // Clear active panel\n        this.activePanel = null;\n\n        // Clear the window.activePanel global variable\n        window.activePanel = null;\n        console.log('Active panel ID cleared on panel close');\n\n        // Remove the data attribute\n        if (this.elements.settingsPanel) {\n            this.elements.settingsPanel.removeAttribute('data-plugin-id');\n        }\n\n        this.hasUnsavedChanges = false;\n        _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_3__.SettingsPanel.hideNotification();\n\n        // Reset hash to the current tab to ensure we stay on the plugins tab\n        // This maintains visibility of plugin cards when closing the settings panel\n        if (this.activeTab) {\n            this.updateUrlHash(this.activeTab);\n        }\n\n        // Clear content after animation (300ms)\n        setTimeout(() => {\n            this.elements.panelContent.innerHTML = '';\n        }, 300);\n    }\n\n    /**\n     * Show a specific tab\n     * @param {string} tabName - Name of the tab to show\n     * @param {boolean} updateHash - Whether to update the URL hash (default: true)\n     */\n    showTab(tabName, updateHash = true) {\n        // Skip if already on this tab\n        if (tabName === this.activeTab) {\n            return;\n        }\n\n        console.log(`Dashboard: Showing tab \"${tabName}\"`);\n\n        // Update active tab\n        this.activeTab = tabName;\n\n        // Update tab buttons\n        const tabButtons = document.querySelectorAll('.dashboard-tab');\n        tabButtons.forEach(button => {\n            if (button.dataset.tab === tabName) {\n                button.classList.add('active');\n            } else {\n                button.classList.remove('active');\n            }\n        });\n\n        // Update tab content\n        const tabContents = document.querySelectorAll('.dashboard-tab-content');\n        tabContents.forEach(content => {\n            if (content.id === `${tabName}-tab`) {\n                content.classList.add('active');\n            } else {\n                content.classList.remove('active');\n            }\n        });\n\n        // Update URL hash without triggering the hashchange event (if requested)\n        if (updateHash) {\n            this.updateUrlHash(tabName);\n        }\n\n        // Fire tab changed event\n        this.fireEvent('tab-changed', { tab: tabName });\n    }\n\n    /**\n     * Update URL hash without triggering the hashchange event\n     * @param {string} hash - The hash to set (without the # symbol)\n     */\n    updateUrlHash(hash) {\n        // Skip the hashchange event by temporarily removing the listener\n        const hashChangeHandler = this.handleHashChange.bind(this);\n        window.removeEventListener('hashchange', hashChangeHandler);\n        \n        // Update URL hash\n        window.location.hash = hash;\n        \n        // Re-add the event listener\n        setTimeout(() => {\n            window.addEventListener('hashchange', hashChangeHandler);\n        }, 0);\n    }\n\n    /**\n     * Load a plugin's settings module and open the panel\n     * @param {string} pluginId - ID of the plugin to load settings for\n     */\n    loadPluginSettingsModule(pluginId) {\n        // First, make sure the plugins tab has the 'settings-open' class\n        const pluginsTab = document.getElementById('plugins-tab');\n        if (pluginsTab) {\n            pluginsTab.classList.add('settings-open');\n        }\n        \n        // Make sure the plugins tab button stays highlighted\n        const pluginsTabButton = document.querySelector('.dashboard-tab[data-tab=\"plugins\"]');\n        if (pluginsTabButton) {\n            pluginsTabButton.classList.add('active');\n        }\n        \n        // Open the settings panel\n        _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_3__.SettingsPanel.openSettingsPanel(pluginId, this.installedPlugins);\n    }\n\n    /**\n     * Helper function to get the current active plugin ID using various methods\n     */\n    getActivePluginId() {\n        // First check direct global variable\n        if (window.activePanel) {\n            return window.activePanel;\n        }\n\n        // Then check Dashboard property\n        if (this.activePanel) {\n            return this.activePanel;\n        }\n\n        // Then check DOM for data attribute\n        const settingsPanel = document.querySelector('.settings-panel.visible');\n        if (settingsPanel && settingsPanel.hasAttribute('data-plugin-id')) {\n            return settingsPanel.getAttribute('data-plugin-id');\n        }\n\n        // Then try to determine from panel title\n        const panelTitle = document.getElementById('plugin-settings-title')?.textContent.trim();\n        if (panelTitle && window.installedPlugins) {\n            const matchingPlugin = window.installedPlugins.find(p => p.name === panelTitle);\n            if (matchingPlugin) {\n                return matchingPlugin.id;\n            }\n        }\n\n        // No plugin ID could be determined\n        return null;\n    }\n\n    /**\n     * Logout the current user\n     */\n    async logout() {\n        console.log('Dashboard: Logging out user');\n\n        try {\n            // Confirm logout\n            _notification_system_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].confirm(\n                'Are you sure you want to log out?',\n                async () => {\n                    try {\n                        // Sign out from both storage services for compatibility\n                        if (_squarespace_storage_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n                            await _squarespace_storage_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].signOut();\n                        }\n                        \n                        // Also sign out from local storage for backward compatibility\n                        if (_local_storage_service_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]) {\n                            await _local_storage_service_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].signOut();\n                        }\n                        \n                        // Clear session storage\n                        sessionStorage.removeItem('squarehero_user_email');\n                        sessionStorage.removeItem('squarehero_current_user');\n                        \n                        // Show logout notification with hexagon style\n                        _notification_system_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].showLogout('Successfully logged out');\n                        \n                        // Reload page after short delay\n                        setTimeout(() => {\n                            window.location.reload();\n                        }, 1000);\n                    } catch (error) {\n                        console.error('Dashboard: Error during logout', error);\n                        _notification_system_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].showError('Failed to log out');\n                    }\n                }\n            );\n        } catch (error) {\n            console.error('Dashboard: Error during logout confirmation', error);\n        }\n    }\n\n    /**\n     * Handle hash change event\n     */\n    handleHashChange() {\n        const hash = window.location.hash.substring(1);\n        console.log(`Dashboard: Hash changed to \"${hash}\"`);\n        \n        // Check if hash has plugin settings format: plugins:pluginId\n        if (hash.startsWith('plugins:')) {\n            const pluginId = hash.substring(8); // Remove \"plugins:\" prefix\n            \n            // First make sure the plugins tab is active\n            if (this.activeTab !== 'plugins') {\n                this.showTab('plugins', false); // false means don't update URL hash again\n            }\n            \n            // Then open the settings panel for this plugin\n            if (pluginId && this.installedPlugins.some(p => p.id === pluginId)) {\n                this.loadPluginSettingsModule(pluginId);\n            }\n            return;\n        }\n        \n        // Check legacy format plugin:pluginId for backwards compatibility\n        if (hash.startsWith('plugin:')) {\n            const pluginId = hash.substring(7); // Remove \"plugin:\" prefix\n            \n            // First make sure the plugins tab is active\n            if (this.activeTab !== 'plugins') {\n                this.showTab('plugins', false); // false means don't update URL hash again\n            }\n            \n            // Then open the settings panel for this plugin\n            if (pluginId && this.installedPlugins.some(p => p.id === pluginId)) {\n                this.loadPluginSettingsModule(pluginId);\n            }\n            return;\n        }\n        \n        // For regular tab navigation\n        const validTabs = ['plugins', 'discover', 'settings'];\n        if (validTabs.includes(hash)) {\n            this.showTab(hash);\n        }\n    }\n\n    /**\n     * Process initial URL hash\n     */\n    processInitialHash() {\n        const hash = window.location.hash.substring(1);\n        if (!hash) return;\n\n        console.log(`Dashboard: Processing initial hash \"${hash}\"`);\n        \n        // Check if hash has the preferred format for plugin settings: \"plugins:pluginId\"\n        if (hash.startsWith('plugins:')) {\n            const pluginId = hash.substring(8); // Remove \"plugins:\" prefix\n            \n            // Switch to the plugins tab\n            this.showTab('plugins');\n            \n            // Then open the settings panel for this plugin if it exists\n            if (pluginId && this.installedPlugins.some(p => p.id === pluginId)) {\n                setTimeout(() => {\n                    this.loadPluginSettingsModule(pluginId);\n                }, 300); // Small delay to ensure the tab has switched\n            }\n            \n            this.hashProcessed = true;\n            return;\n        }\n        \n        // Support legacy format \"plugin:pluginId\" for backwards compatibility\n        if (hash.startsWith('plugin:')) {\n            const pluginId = hash.substring(7); // Remove \"plugin:\" prefix\n            \n            // First switch to the plugins tab\n            this.showTab('plugins');\n            \n            // Then open the settings panel for this plugin if it exists\n            if (pluginId && this.installedPlugins.some(p => p.id === pluginId)) {\n                setTimeout(() => {\n                    this.loadPluginSettingsModule(pluginId);\n                }, 300); // Small delay to ensure the tab has switched\n            }\n            \n            this.hashProcessed = true;\n            return;\n        }\n        \n        // Otherwise treat it as a regular tab name\n        const validTabs = ['plugins', 'discover', 'settings'];\n        if (validTabs.includes(hash)) {\n            this.showTab(hash);\n            this.hashProcessed = true;\n        }\n    }\n}\n\n// Create singleton instance\nconst Dashboard = new DashboardClass();\n\n// Export the singleton\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dashboard);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/modules/core/dashboard-core.js?")},"./src/modules/core/hexagon-notification-system.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Hexagon Notification System\n * Displays hexagon notifications for login, logout, and plugin installation events\n */\n\nclass HexagonNotificationSystem {\n  constructor() {\n    this.container = null;\n    this.activeNotification = null;\n    this.queue = [];\n    this.isProcessing = false;\n    this.defaultDuration = 4000;\n    this.lastLoginTime = 0; // Track when the last login notification was shown\n  }\n\n  /**\n   * Initialize the hexagon notification system\n   */\n  initialize() {\n    console.log('[DEBUG] HexagonNotificationSystem.initialize called');\n    \n    // Check if container already exists\n    if (document.getElementById('sh-hexagon-notification-container')) {\n      this.container = document.getElementById('sh-hexagon-notification-container');\n      console.log('[DEBUG] Using existing hexagon notification container');\n      return;\n    }\n\n    // Create container\n    this.container = document.createElement('div');\n    this.container.id = 'sh-hexagon-notification-container';\n    this.container.className = 'sh-hexagon-notification-container';\n    \n    // Always append to body for maximum visibility\n    document.body.appendChild(this.container);\n    console.log('[DEBUG] Hexagon notification container appended to document body');\n\n    console.log('HexagonNotificationSystem: Initialized');\n  }\n\n  /**\n   * Show a login notification\n   * @param {string} message - Message to display\n   * @param {number} duration - Duration to show in ms\n   */\n  showLogin(message = 'Successfully logged in', duration = this.defaultDuration) {\n    // Prevent duplicate login notifications within a short time window (5 seconds)\n    const now = Date.now();\n    if (now - this.lastLoginTime < 5000) {\n      console.log('[DEBUG] Suppressing duplicate login notification');\n      return;\n    }\n    \n    this.lastLoginTime = now;\n    this.show(message, 'login', this.getLogoIcon(), duration);\n  }\n\n  /**\n   * Show a logout notification\n   * @param {string} message - Message to display\n   * @param {number} duration - Duration to show in ms\n   */\n  showInstall(message = 'Plugin installed successfully', duration = this.defaultDuration) {\n    this.show(message, 'install', this.getLogoIcon(), duration);\n  }\n\n  /**\n   * Show a license activation notification\n   * @param {string} message - Message to display\n   * @param {number} duration - Duration to show in ms\n   */\n  showLicense(message = 'License successfully activated', duration = this.defaultDuration) {\n    this.show(message, 'license', this.getLogoIcon(), duration);\n  }\n\n  /**\n   * Show a custom notification\n   * @param {string} message - Message to display\n   * @param {string} type - Notification type (login, logout, install, license)\n   * @param {string} iconSvg - SVG icon markup\n   * @param {number} duration - Duration to show in ms\n   */\n  show(message, type = 'info', iconSvg = null, duration = this.defaultDuration) {\n    // Ensure container exists\n    if (!this.container) {\n      this.initialize();\n    }\n\n    // Set default icon if none provided\n    if (!iconSvg) {\n      iconSvg = this.getLogoIcon();\n    }\n\n    // Add notification to queue\n    this.queue.push({\n      message,\n      type,\n      iconSvg,\n      duration\n    });\n\n    // Process queue if not already processing\n    if (!this.isProcessing) {\n      this.processQueue();\n    }\n  }\n\n  /**\n   * Process the notification queue\n   */\n  async processQueue() {\n    if (this.queue.length === 0) {\n      this.isProcessing = false;\n      return;\n    }\n\n    this.isProcessing = true;\n    const notification = this.queue.shift();\n    await this.displayNotification(\n      notification.message,\n      notification.type,\n      notification.iconSvg,\n      notification.duration\n    );\n\n    // Process next notification after the current one is removed\n    this.processQueue();\n  }\n\n  /**\n   * Display a notification with hexagon animation\n   * @param {string} message - Message to display\n   * @param {string} type - Notification type\n   * @param {string} iconSvg - SVG icon markup\n   * @param {number} duration - Duration to show in ms\n   * @returns {Promise} - Promise that resolves when notification is closed\n   */\n  displayNotification(message, type, iconSvg, duration) {\n    return new Promise((resolve) => {\n      // Create notification element (dynamic island)\n      const dynamicIsland = document.createElement('div');\n      dynamicIsland.className = 'dynamic-island circle';\n      \n      // Create logo container\n      const logoContainer = document.createElement('div');\n      logoContainer.className = 'logo-container';\n      logoContainer.innerHTML = iconSvg;\n      \n      // Create content background\n      const contentBackground = document.createElement('div');\n      contentBackground.className = 'content-background';\n      \n      // Create notification content\n      const notificationContent = document.createElement('div');\n      notificationContent.className = 'notification-content';\n      \n      // Create message text\n      const messageText = document.createElement('div');\n      messageText.className = 'message-text';\n      \n      // Type-specific label (optional)\n      let typeLabel = '';\n      switch (type) {\n        case 'login':\n          typeLabel = 'Logged In';\n          break;\n        case 'logout':\n          typeLabel = 'Logged Out';\n          break;\n        case 'install':\n          typeLabel = 'Installed';\n          break;\n        case 'license':\n          typeLabel = 'License';\n          break;\n        default:\n          typeLabel = type.charAt(0).toUpperCase() + type.slice(1);\n      }\n      \n      // Add strong title and message content\n      messageText.innerHTML = `<strong>${typeLabel}</strong><p>${message}</p>`;\n      \n      // Add all elements together\n      notificationContent.appendChild(messageText);\n      dynamicIsland.appendChild(logoContainer);\n      dynamicIsland.appendChild(contentBackground);\n      dynamicIsland.appendChild(notificationContent);\n      \n      // Add to container\n      if (this.container) {\n        // First remove any existing notification\n        if (this.activeNotification && this.activeNotification.parentNode) {\n          this.activeNotification.parentNode.removeChild(this.activeNotification);\n        }\n        \n        this.container.appendChild(dynamicIsland);\n        this.activeNotification = dynamicIsland;\n        \n        // OPEN ANIMATION SEQUENCE:\n        \n        // 1. Display it without visible class first (hidden at bottom)\n        dynamicIsland.style.display = 'flex';\n        \n        // 2. Add visible class to slide up after a tiny delay\n        setTimeout(() => {\n          dynamicIsland.classList.add('visible');\n          \n          // 3. Then expand after a short delay\n          setTimeout(() => {\n            dynamicIsland.classList.remove('circle');\n            dynamicIsland.classList.add('expanded');\n            \n            // 4. Show content with a slight delay\n            setTimeout(() => {\n              notificationContent.classList.add('visible');\n              \n              // 5. Start hiding after specified duration\n              setTimeout(() => {\n                // CLOSE ANIMATION SEQUENCE:\n                \n                // First hide the content text\n                notificationContent.classList.remove('visible');\n                \n                // Then after a delay, collapse the background\n                setTimeout(() => {\n                  // This triggers our width transition to 0\n                  dynamicIsland.classList.add('circle');\n                  dynamicIsland.classList.remove('expanded');\n                  \n                  // Then after the collapse animation completes, slide down\n                  setTimeout(() => {\n                    dynamicIsland.classList.remove('visible');\n                    \n                    // Then hide completely and remove\n                    setTimeout(() => {\n                      if (dynamicIsland.parentNode) {\n                        dynamicIsland.parentNode.removeChild(dynamicIsland);\n                      }\n                      this.activeNotification = null;\n                      resolve();\n                    }, 500);\n                  }, 500); // Increased to 500ms to give more time for collapse animation\n                }, 200); // Slight delay after content fades out before collapsing\n              }, duration);\n            }, 200);\n          }, 500);\n        }, 10);\n      } else {\n        console.error('Container does not exist when trying to display notification');\n        resolve(); // Resolve the promise anyway to prevent hanging\n      }\n    });\n  }\n\n  /**\n   * Get the logo SVG icon\n   * @returns {string} - SVG markup\n   */\n  getLogoIcon() {\n    return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"70\" height=\"80\" fill=\"none\" viewBox=\"0 0 50 57\"><path fill=\"#001E45\" d=\"M46.744 40.77V16.1L25.145 3.764 3.546 16.099v24.67l21.6 12.335 21.598-12.335Z\"/><path fill=\"#87C4CC\" d=\"M46.744 40.77V16.1L25.145 3.764 3.546 16.099v24.67l21.6 12.335 21.598-12.335Z\"/><path fill=\"#011E45\" d=\"M50 42.75v-28.5L25 0 0 14.25v28.5L25 57l25-14.25Z\"/><path fill=\"#0CC2ED\" d=\"M10.582 12.108a16.724 16.724 0 0 0 6.155 6.092 16.957 16.957 0 0 0 8.41 2.23c2.953 0 5.854-.77 8.41-2.23a16.724 16.724 0 0 0 6.156-6.092L25.146 3.765l-14.572 8.324.008.02ZM25.145 36.465a17.025 17.025 0 0 0-8.404 2.239 16.791 16.791 0 0 0-6.16 6.082l14.564 8.316 14.567-8.316a16.794 16.794 0 0 0-6.161-6.083 17.028 17.028 0 0 0-8.406-2.238Z\"/><path fill=\"#001E45\" d=\"M41.051 12.864a18.267 18.267 0 0 1-6.721 6.65 18.52 18.52 0 0 1-9.183 2.434 18.52 18.52 0 0 1-9.183-2.434 18.267 18.267 0 0 1-6.722-6.65L3.546 16.1v24.67l5.696 3.253a18.264 18.264 0 0 1 6.72-6.651 18.518 18.518 0 0 1 9.185-2.435c3.224 0 6.391.84 9.183 2.435a18.264 18.264 0 0 1 6.721 6.651l5.696-3.253v-24.67l-5.696-3.235Z\"/><path fill=\"#fff\" d=\"M47.515 14.775 25.919 2.443 25.145 2l-.773.443L2.81 14.756l-.033.019-.776.44v26.44l.417.237.356.202 21.6 12.335.772.443.774-.443 14.567-8.319 1.34-.762.828-.47 4.872-2.784.773-.44V15.217l-.784-.442Zm-6.463 29.248a18.263 18.263 0 0 0-6.721-6.652 18.517 18.517 0 0 0-9.184-2.434c-3.224 0-6.392.84-9.184 2.434a18.263 18.263 0 0 0-6.721 6.652L3.547 40.77V16.1l5.695-3.234a18.265 18.265 0 0 0 6.722 6.65 18.52 18.52 0 0 0 9.183 2.434c3.224 0 6.39-.84 9.183-2.434a18.265 18.265 0 0 0 6.722-6.65l5.695 3.235v24.67l-5.695 3.253ZM25.145 3.765l14.573 8.324a16.725 16.725 0 0 1-6.155 6.092 16.957 16.957 0 0 1-8.41 2.23c-2.953 0-5.854-.77-8.41-2.23a16.725 16.725 0 0 1-6.156-6.092l14.558-8.324Zm0 49.34-14.563-8.317a16.725 16.725 0 0 1 6.155-6.092 16.958 16.958 0 0 1 8.41-2.23c2.953 0 5.853.77 8.41 2.23a16.724 16.724 0 0 1 6.155 6.092l-14.567 8.316Z\"/><path fill=\"#fff\" d=\"M43.255 24.09 27.54 27.08l5.236 2.992 10.48-5.983ZM7.038 24.09l15.716 2.991-5.24 2.992L7.038 24.09ZM35.628 40.387l-15.716 2.991 5.24 2.992 10.476-5.983Z\"/></svg>`;\n  }\n}\n\n// Create and export singleton instance\nconst HexagonNotification = new HexagonNotificationSystem();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (HexagonNotification);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/modules/core/hexagon-notification-system.js?")},"./src/modules/core/local-storage-service.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Local Storage Service Module\n * Handles all local storage interactions as a temporary replacement for Firebase\n */\n\nclass LocalStorageServiceClass {\n    constructor() {\n        this.initialized = false;\n        this.storagePrefix = 'squarehero_';\n        this.currentUser = null;\n    }\n\n    /**\n     * Initialize Local Storage service\n     */\n    async initialize() {\n        if (this.initialized) {\n            console.log('LocalStorageService: Already initialized');\n            return true;\n        }\n\n        console.log('LocalStorageService: Initializing...');\n        \n        try {\n            // Set dummy user data if not present\n            if (!this.getCurrentUser()) {\n                this.currentUser = {\n                    uid: 'local-user',\n                    email: 'local@squarehero.test'\n                };\n                \n                // Store in session storage\n                sessionStorage.setItem(\n                    `${this.storagePrefix}current_user`, \n                    JSON.stringify(this.currentUser)\n                );\n                \n                // Fire a logged in event for backward compatibility\n                const event = new CustomEvent('user-logged-in', {\n                    detail: this.currentUser,\n                    bubbles: true\n                });\n                document.dispatchEvent(event);\n            }\n            \n            this.initialized = true;\n            console.log('LocalStorageService: Initialization complete');\n            \n            // Fire event for auth state change\n            const authEvent = new CustomEvent('firebase-auth-state-changed', {\n                detail: { user: this.currentUser },\n                bubbles: true\n            });\n            document.dispatchEvent(authEvent);\n            \n            return true;\n        } catch (error) {\n            console.error('LocalStorageService: Initialization error', error);\n            this.initialized = false;\n            return false;\n        }\n    }\n\n    /**\n     * Get the current user\n     * @returns {Object|null} - The user object or null if not authenticated\n     */\n    getCurrentUser() {\n        // Try to get from instance first\n        if (this.currentUser) {\n            return this.currentUser;\n        }\n        \n        // Try to get from session storage\n        const storedUser = sessionStorage.getItem(`${this.storagePrefix}current_user`);\n        if (storedUser) {\n            try {\n                this.currentUser = JSON.parse(storedUser);\n                return this.currentUser;\n            } catch (e) {\n                console.error('Error parsing stored user:', e);\n            }\n        }\n        \n        return null;\n    }\n\n    /**\n     * Get plugin settings from local storage\n     * @param {string} pluginId - Plugin ID\n     * @returns {Promise<Object|null>} - Plugin settings or null if not found\n     */\n    async getPluginSettings(pluginId) {\n        console.log(`LocalStorageService: Getting settings for plugin ${pluginId}`);\n        \n        try {\n            const key = `${this.storagePrefix}plugin_${pluginId}`;\n            const storedSettings = localStorage.getItem(key);\n            \n            if (!storedSettings) {\n                console.log(`LocalStorageService: No settings found for plugin ${pluginId}`);\n                return null;\n            }\n            \n            return JSON.parse(storedSettings);\n        } catch (error) {\n            console.error('LocalStorageService: Error fetching plugin settings', error);\n            return null;\n        }\n    }\n\n    /**\n     * Update plugin settings in local storage\n     * @param {string} pluginId - Plugin ID\n     * @param {Object} settings - Plugin settings to update\n     * @returns {Promise<boolean>} - True if update was successful\n     */\n    async updatePluginSettings(pluginId, settings) {\n        console.log(`LocalStorageService: Updating settings for plugin ${pluginId}`, settings);\n        \n        try {\n            const key = `${this.storagePrefix}plugin_${pluginId}`;\n            localStorage.setItem(key, JSON.stringify(settings));\n            \n            // Fire an event to notify other components\n            const event = new CustomEvent('plugin-settings-updated', {\n                detail: { \n                    pluginId: pluginId,\n                    settings: settings\n                },\n                bubbles: true\n            });\n            document.dispatchEvent(event);\n            \n            return true;\n        } catch (error) {\n            console.error('LocalStorageService: Error updating plugin settings', error);\n            return false;\n        }\n    }\n\n    /**\n     * Log user action (stub)\n     * @param {string} action - Action name\n     * @param {Object} data - Additional data\n     */\n    async logUserAction(action, data = {}) {\n        console.log(`LocalStorageService: Action logged (stub): ${action}`, data);\n        return true;\n    }\n}\n\n// Create singleton instance\nconst LocalStorageService = new LocalStorageServiceClass();\n\n// Export the singleton\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LocalStorageService);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/modules/core/local-storage-service.js?")},"./src/modules/core/notification-system.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _hexagon_notification_system_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hexagon-notification-system.js */ \"./src/modules/core/hexagon-notification-system.js\");\n/**\n * Notification System Module\n * Handles user notifications and alerts\n */\n\n\n\nclass NotificationSystemClass {\n    constructor() {\n        this.container = null;\n        this.timeout = null;\n        this.defaultDuration = 4000; // Default duration in ms\n    }\n\n    /**\n     * Initialize the notification system\n     */\n    initialize() {\n        // Initialize hexagon notifications\n        _hexagon_notification_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].initialize();\n\n        // We're not creating the old container anymore\n        console.log('NotificationSystem: Initialized');\n    }\n\n    /**\n     * Show a success notification\n     * @param {string} message - The message to display\n     * @param {number} duration - Duration to show in ms\n     */\n    showSuccess(message, duration = this.defaultDuration) {\n        this.show(message, 'success', duration);\n    }\n\n    /**\n     * Show an error notification\n     * @param {string} message - The message to display\n     * @param {number} duration - Duration to show in ms\n     */\n    showError(message, duration = this.defaultDuration) {\n        this.show(message, 'error', duration);\n    }\n\n    /**\n     * Show a warning notification\n     * @param {string} message - The message to display\n     * @param {number} duration - Duration to show in ms\n     */\n    showWarning(message, duration = this.defaultDuration) {\n        this.show(message, 'warning', duration);\n    }\n\n    /**\n     * Show an info notification\n     * @param {string} message - The message to display\n     * @param {number} duration - Duration to show in ms\n     */\n    showInfo(message, duration = this.defaultDuration) {\n        this.show(message, 'info', duration);\n    }\n\n    /**\n     * Show an attention notification (for changes that need saving)\n     * @param {string} message - The message to display\n     * @param {number} duration - Duration to show in ms\n     */\n    showAttention(message = 'You have unsaved changes', duration = this.defaultDuration) {\n        this.show(message, 'attention', duration);\n    }\n\n    /**\n     * Show a login notification\n     * @param {string} message - Message to display\n     * @param {number} duration - Duration to show in ms\n     * @param {boolean} useHexagon - Whether to use hexagon notification (default: true)\n     */\n    showLogin(message = 'Successfully logged in', duration = this.defaultDuration, useHexagon = true) {\n        if (useHexagon) {\n            _hexagon_notification_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].showLogin(message, duration);\n        } else {\n            this.show(message, 'success', duration);\n        }\n    }\n\n    /**\n     * Show a logout notification\n     * @param {string} message - Message to display\n     * @param {number} duration - Duration to show in ms\n     * @param {boolean} useHexagon - Whether to use hexagon notification (default: true)\n     */\n    showLogout(message = 'Successfully logged out', duration = this.defaultDuration, useHexagon = true) {\n        if (useHexagon) {\n            _hexagon_notification_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].showLogout(message, duration);\n        } else {\n            this.show(message, 'success', duration);\n        }\n    }\n\n    /**\n     * Show a plugin installation notification\n     * @param {string} message - Message to display\n     * @param {number} duration - Duration to show in ms\n     * @param {boolean} useHexagon - Whether to use hexagon notification (default: true)\n     */\n    showInstall(message = 'Plugin installed successfully', duration = this.defaultDuration, useHexagon = true) {\n        if (useHexagon) {\n            _hexagon_notification_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].showInstall(message, duration);\n        } else {\n            this.show(message, 'success', duration);\n        }\n    }\n\n    /**\n     * Show a license activation notification\n     * @param {string} message - Message to display\n     * @param {number} duration - Duration to show in ms\n     * @param {boolean} useHexagon - Whether to use hexagon notification (default: true)\n     */\n    showLicense(message = 'License successfully activated', duration = this.defaultDuration, useHexagon = true) {\n        console.log('[DEBUG] NotificationSystem.showLicense called with message:', message);\n        if (useHexagon) {\n            console.log('[DEBUG] Calling HexagonNotification.showLicense');\n            _hexagon_notification_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].showLicense(message, duration);\n        } else {\n            this.show(message, 'success', duration);\n        }\n        console.log('[DEBUG] NotificationSystem.showLicense completed');\n    }\n\n    /**\n     * Show a notification\n     * @param {string} message - The message to display\n     * @param {string} type - The type of notification ('success', 'error', 'warning', 'info', 'attention')\n     * @param {number} duration - Duration to show in ms\n     */\n    show(message, type = 'info', duration = this.defaultDuration) {\n        // Now we only use hexagon notifications\n        _hexagon_notification_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].show(message, type, null, duration);\n    }\n\n    /**\n     * Get the appropriate icon SVG for notification type\n     * @param {string} type - Notification type\n     * @returns {string} - SVG icon markup\n     */\n    getIconForType(type) {\n        switch (type) {\n            case 'success':\n                return `<svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                    <path fill=\"currentColor\" d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8-8-3.59 8-8 8zm-2-12l-4 4 1.41 1.41L10 10.83l6.59 6.59L18 16l-8-8z\"/>\n                </svg>`;\n            case 'error':\n                return `<svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                    <path fill=\"currentColor\" d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8-8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z\"/>\n                </svg>`;\n            case 'warning':\n                return `<svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                    <path fill=\"currentColor\" d=\"M12 2L1 21h22L12 2zm0 3.92L19.08 19H4.92L12 5.92zM11 10h2v5h-2zm0 6h2v2h-2z\"/>\n                </svg>`;\n            case 'attention':\n                return `<svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                    <path fill=\"currentColor\" d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8-8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z\"/>\n                </svg>`;\n            default: // info\n                return `<svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n                    <path fill=\"currentColor\" d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8-8-3.59 8-8 8zm-1-9h2V7h-2v4zm0 4h2v2h-2v-2z\"/>\n                </svg>`;\n        }\n    }\n\n    /**\n     * Get the license activation icon\n     * @returns {string} - SVG icon markup\n     */\n    getLicenseIcon() {\n        return `<svg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n            <path fill=\"currentColor\" d=\"M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm0 4c1.86 0 3.41 1.28 3.86 3H16c.55 0 1 .45 1 1s-.45 1-1 1h-.14c-.45 1.72-2 3-3.86 3s-3.41-1.28-3.86-3H8c-.55 0-1-.45-1-1s.45-1 1-1h.14c.45-1.72 2-3 3.86-3zm0 2c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1z\"/>\n        </svg>`;\n    }\n\n    /**\n     * Close a notification\n     * @param {HTMLElement} notification - The notification element to close\n     */\n    close(notification) {\n        // Add closing class for animation\n        notification.classList.add('closing');\n        \n        // Remove after animation completes\n        setTimeout(() => {\n            if (notification && notification.parentNode) {\n                notification.parentNode.removeChild(notification);\n            }\n        }, 300);\n    }\n\n    /**\n     * Close all notifications\n     */\n    closeAll() {\n        const notifications = this.container.querySelectorAll('.sh-notification');\n        notifications.forEach(notification => {\n            this.close(notification);\n        });\n    }\n\n    /**\n     * Show a confirmation dialog\n     * @param {string} message - The message to display\n     * @param {Function} onConfirm - Function to call when confirmed\n     * @param {Function} onCancel - Function to call when canceled\n     * @param {Object} options - Additional options\n     */\n    confirm(message, onConfirm, onCancel = null, options = {}) {\n        const defaults = {\n            confirmText: 'Confirm',\n            cancelText: 'Cancel',\n            title: 'Confirm Action'\n        };\n        \n        const settings = { ...defaults, ...options };\n        \n        // Create overlay\n        const overlay = document.createElement('div');\n        overlay.className = 'sh-modal-overlay';\n        \n        // Create modal\n        const modal = document.createElement('div');\n        modal.className = 'sh-modal sh-confirm-modal';\n        \n        // Set modal content\n        modal.innerHTML = `\n            <div class=\"sh-modal-header\">\n                <h3>${settings.title}</h3>\n                <button class=\"sh-modal-close\">&times;</button>\n            </div>\n            <div class=\"sh-modal-content\">\n                <p>${message}</p>\n            </div>\n            <div class=\"sh-modal-footer\">\n                <button class=\"sh-modal-button sh-cancel-button\">${settings.cancelText}</button>\n                <button class=\"sh-modal-button sh-confirm-button\">${settings.confirmText}</button>\n            </div>\n        `;\n        \n        // Add modal to overlay, then add overlay to DOM\n        overlay.appendChild(modal);\n        document.body.appendChild(overlay);\n        \n        // Add event listeners\n        const closeButton = modal.querySelector('.sh-modal-close');\n        const cancelButton = modal.querySelector('.sh-cancel-button');\n        const confirmButton = modal.querySelector('.sh-confirm-button');\n        \n        // Function to close modal\n        const closeModal = () => {\n            modal.classList.add('closing');\n            overlay.classList.add('closing');\n            \n            setTimeout(() => {\n                document.body.removeChild(overlay);\n            }, 300);\n        };\n        \n        // Close button\n        closeButton.addEventListener('click', (e) => {\n            e.stopPropagation();\n            closeModal();\n            if (onCancel) onCancel();\n        });\n        \n        // Cancel button\n        cancelButton.addEventListener('click', (e) => {\n            e.stopPropagation();\n            closeModal();\n            if (onCancel) onCancel();\n        });\n        \n        // Confirm button\n        confirmButton.addEventListener('click', (e) => {\n            e.stopPropagation();\n            closeModal();\n            if (onConfirm) onConfirm();\n        });\n        \n        // Close on overlay click\n        overlay.addEventListener('click', (e) => {\n            if (e.target === overlay) {\n                closeModal();\n                if (onCancel) onCancel();\n            }\n        });\n\n        // Focus the confirm button\n        setTimeout(() => {\n            confirmButton.focus();\n        }, 100);\n    }\n}\n\n// Create singleton instance\nconst NotificationSystem = new NotificationSystemClass();\n\n// Export the singleton\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (NotificationSystem);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/modules/core/notification-system.js?")},"./src/modules/core/plugin-registry.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./local-storage-service.js */ \"./src/modules/core/local-storage-service.js\");\n/* harmony import */ var _notification_system_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notification-system.js */ \"./src/modules/core/notification-system.js\");\n/* harmony import */ var _utils_path_utils_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/path-utils/index.js */ \"./src/utils/path-utils/index.js\");\n/**\n * Plugin Registry Module\n * Manages plugin information and provides utilities for plugin management\n */\n\n\n\n\n\nclass PluginRegistryClass {\n    constructor() {\n        this.plugins = []; // Available plugins\n        this.installedPlugins = []; // Installed plugins\n        this.settingsSchemas = {}; // Store for settings schemas\n    }\n\n    /**\n     * Initialize the plugin registry\n     * @param {Array} availablePlugins - List of all available plugins\n     * @param {Array} installedPlugins - List of installed plugins\n     */\n    initialize(availablePlugins = [], installedPlugins = []) {\n        this.plugins = availablePlugins;\n        this.installedPlugins = installedPlugins;\n        console.log('PluginRegistry: Initialized with', \n            this.plugins.length, 'available plugins and', \n            this.installedPlugins.length, 'installed plugins');\n        return this;\n    }\n    \n    /**\n     * Get a plugin by ID\n     * @param {string} pluginId - The plugin ID to find\n     * @returns {Object|null} - The plugin object or null if not found\n     */\n    getPluginById(pluginId) {\n        const plugin = this.plugins.find(p => p.id === pluginId);\n        return plugin || null;\n    }\n    \n    /**\n     * Get an installed plugin by ID\n     * @param {string} pluginId - The plugin ID to find\n     * @returns {Object|null} - The installed plugin object or null if not found\n     */\n    getInstalledPluginById(pluginId) {\n        const plugin = this.installedPlugins.find(p => p.id === pluginId);\n        return plugin || null;\n    }\n    \n    /**\n     * Check if a plugin is installed\n     * @param {string} pluginId - The plugin ID to check\n     * @returns {boolean} - True if plugin is installed\n     */\n    isPluginInstalled(pluginId) {\n        return this.installedPlugins.some(p => p.id === pluginId);\n    }\n    \n    /**\n     * Get plugin status (enabled/disabled)\n     * @param {string} pluginId - The plugin ID to check\n     * @returns {string} - Plugin status: 'enabled', 'disabled', or 'not-installed'\n     */\n    getPluginStatus(pluginId) {\n        const plugin = this.getInstalledPluginById(pluginId);\n        if (!plugin) {\n            return 'not-installed';\n        }\n        return plugin.status || 'enabled';\n    }\n    \n    /**\n     * Toggle plugin status\n     * @param {string} pluginId - The plugin ID to toggle\n     * @returns {Promise<string>} - The new status after toggle\n     */\n    async togglePluginStatus(pluginId) {\n        const plugin = this.getInstalledPluginById(pluginId);\n        if (!plugin) {\n            console.error('PluginRegistry: Cannot toggle status for non-installed plugin', pluginId);\n            return 'not-installed';\n        }\n        \n        try {\n            // Get current status\n            const currentStatus = plugin.status || 'enabled';\n            const newStatus = currentStatus === 'enabled' ? 'disabled' : 'enabled';\n            \n            // Update plugin status\n            plugin.status = newStatus;\n            \n            // Update settings in LocalStorage\n            await this.updatePluginSettings(pluginId, {\n                ...plugin.settings,\n                enabled: newStatus === 'enabled'\n            });\n            \n            console.log(`PluginRegistry: Toggled plugin ${pluginId} status to ${newStatus}`);\n            \n            // Show notification\n            _notification_system_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].showSuccess(`Plugin ${newStatus}`);\n            \n            return newStatus;\n        } catch (error) {\n            console.error('PluginRegistry: Error toggling plugin status', error);\n            \n            // Revert status change\n            plugin.status = plugin.status === 'enabled' ? 'disabled' : 'enabled';\n            \n            _notification_system_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].showError('Failed to update plugin status');\n            throw error;\n        }\n    }\n    \n    /**\n     * Update plugin settings\n     * @param {string} pluginId - The plugin ID\n     * @param {Object} settings - New settings object\n     * @returns {Promise<boolean>} - True if update was successful\n     */\n    async updatePluginSettings(pluginId, settings) {\n        try {\n            // Update LocalStorage\n            await _local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updatePluginSettings(pluginId, settings);\n            \n            // Update local plugin settings\n            const plugin = this.getInstalledPluginById(pluginId);\n            if (plugin) {\n                plugin.settings = settings;\n            }\n            \n            // Log the action\n            _local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].logUserAction('update_plugin_settings', {\n                pluginId: pluginId,\n                settingsUpdated: Object.keys(settings)\n            });\n            \n            return true;\n        } catch (error) {\n            console.error('PluginRegistry: Error updating plugin settings', error);\n            throw error;\n        }\n    }\n    \n    /**\n     * Get plugin settings\n     * @param {string} pluginId - The plugin ID\n     * @returns {Object} - Plugin settings or empty object if not found\n     */\n    getPluginSettings(pluginId) {\n        const plugin = this.getInstalledPluginById(pluginId);\n        if (!plugin) {\n            return {};\n        }\n        return plugin.settings || {};\n    }\n    \n    /**\n     * Filter plugins by category\n     * @param {string} category - The category to filter by\n     * @returns {Array} - Filtered plugins\n     */\n    getPluginsByCategory(category) {\n        if (!category) {\n            return this.plugins;\n        }\n        return this.plugins.filter(plugin => \n            plugin.categories && plugin.categories.includes(category)\n        );\n    }\n    \n    /**\n     * Get all plugin categories\n     * @returns {Array} - List of unique categories\n     */\n    getAllCategories() {\n        const categories = new Set();\n        \n        this.plugins.forEach(plugin => {\n            if (plugin.categories && Array.isArray(plugin.categories)) {\n                plugin.categories.forEach(category => categories.add(category));\n            }\n        });\n        \n        return Array.from(categories).sort();\n    }\n    \n    /**\n     * Search plugins by term\n     * @param {string} searchTerm - The search term\n     * @returns {Array} - Search results\n     */\n    searchPlugins(searchTerm) {\n        if (!searchTerm || typeof searchTerm !== 'string') {\n            return this.plugins;\n        }\n        \n        const term = searchTerm.toLowerCase();\n        \n        return this.plugins.filter(plugin => {\n            // Search in name, description, tags\n            return (\n                (plugin.name && plugin.name.toLowerCase().includes(term)) ||\n                (plugin.description && plugin.description.toLowerCase().includes(term)) ||\n                (plugin.tags && plugin.tags.some(tag => tag.toLowerCase().includes(term)))\n            );\n        });\n    }\n\n    /**\n     * Register settings schema for a plugin\n     * @param {string} pluginId - The plugin ID\n     * @param {Array} schema - Settings schema to register\n     * @param {Object} options - Additional options like event handlers\n     * @returns {boolean} - True if registration was successful\n     */\n    registerSettingsSchema(pluginId, schema, options = {}) {\n        if (!pluginId || !schema) {\n            console.error('PluginRegistry: Cannot register settings schema - missing required parameters');\n            return false;\n        }\n        \n        console.log(`PluginRegistry: Registering settings schema for ${pluginId}`);\n        \n        // Store schema in memory\n        this.settingsSchemas[pluginId] = {\n            schema,\n            options\n        };\n        \n        return true;\n    }\n    \n    /**\n     * Get settings schema for a plugin\n     * @param {string} pluginId - The plugin ID\n     * @returns {Array|null} - Settings schema or null if not found\n     */\n    getSettingsSchema(pluginId) {\n        console.log(`PluginRegistry: Getting settings schema for ${pluginId}`, \n            this.settingsSchemas[pluginId] ? 'Found' : 'Not found');\n            \n        if (!this.settingsSchemas[pluginId]) {\n            // Try to load the schema directly from the plugin's settings.js file\n            console.log(`PluginRegistry: Attempting to load settings for ${pluginId} from script`);\n            \n            try {\n                // Use the PathUtils module to get the correct path regardless of environment\n                const settingsUrl = _utils_path_utils_index_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].resolvePath(`plugins/${pluginId}/settings.js`);\n                console.log(`PluginRegistry: Loading settings from ${settingsUrl}`);\n                \n                // Use a script element to load the settings.js file\n                const scriptElement = document.createElement('script');\n                scriptElement.src = settingsUrl;\n                scriptElement.id = `${pluginId}-settings-loader`;\n                scriptElement.type = 'application/javascript'; // Explicitly set the MIME type\n                scriptElement.async = true;\n                \n                // If script already exists, remove it first\n                const existingScript = document.getElementById(`${pluginId}-settings-loader`);\n                if (existingScript) {\n                    existingScript.remove();\n                }\n                \n                // Add event listeners for success/failure\n                scriptElement.onload = () => {\n                    console.log(`PluginRegistry: Successfully loaded settings script for ${pluginId}`);\n                    // The script should call registerSettingsSchema, which will update this.settingsSchemas\n                };\n                \n                scriptElement.onerror = (error) => {\n                    console.error(`PluginRegistry: Failed to load settings script for ${pluginId}`, error);\n                };\n                \n                // Append script to document to start loading\n                document.head.appendChild(scriptElement);\n                \n                // Wait a short time to see if the settings script registers the schema\n                return new Promise(resolve => {\n                    setTimeout(() => {\n                        if (this.settingsSchemas[pluginId]) {\n                            console.log(`PluginRegistry: Schema for ${pluginId} registered after loading script`);\n                            resolve(this.settingsSchemas[pluginId].schema);\n                        } else {\n                            console.log(`PluginRegistry: No schema registered for ${pluginId} after script load`);\n                            resolve(null);\n                        }\n                    }, 300); // Wait 300ms for script to execute\n                });\n            } catch (error) {\n                console.error(`PluginRegistry: Error loading settings schema for ${pluginId}`, error);\n                return null;\n            }\n        }\n        \n        return this.settingsSchemas[pluginId]?.schema || null;\n    }\n    \n    /**\n     * Get options for a plugin's settings schema\n     * @param {string} pluginId - The plugin ID\n     * @returns {Object} - Settings options or empty object if not found\n     */\n    getSettingsSchemaOptions(pluginId) {\n        return this.settingsSchemas[pluginId]?.options || {};\n    }\n}\n\n// Create singleton instance\nconst PluginRegistry = new PluginRegistryClass();\n\n// Export the singleton\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PluginRegistry);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/modules/core/plugin-registry.js?")},"./src/modules/core/squarespace-storage-service.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Squarespace Storage Service Module\n * Handles storing plugin settings in Squarespace's file system using JSON files\n * Replaces the previous LocalStorageService\n */\n\nclass SquarespaceStorageServiceClass {\n    constructor() {\n        this.initialized = false;\n        this.filePrefix = 'squarehero-';\n        this.currentUser = null;\n        this.siteId = null;\n        this.fileIds = {}; // Store file IDs for each plugin\n        this.storagePrefix = 'squarehero_file_ids_'; // Prefix for localStorage keys storing file IDs\n        this.debug = true; // Enable debug logging\n    }\n\n    /**\n     * Log message if debug is enabled\n     * @param {string} message - Message to log\n     * @param {any} data - Optional data to log\n     */\n    log(message, data) {\n        if (this.debug) {\n            if (data !== undefined) {\n                console.log(`SquarespaceStorage: ${message}`, data);\n            } else {\n                console.log(`SquarespaceStorage: ${message}`);\n            }\n        }\n    }\n\n    /**\n     * Log error message\n     * @param {string} message - Error message\n     * @param {Error|any} error - Error object or data\n     */\n    logError(message, error) {\n        console.error(`SquarespaceStorage ERROR: ${message}`, error);\n    }\n\n    /**\n     * Initialize Squarespace Storage service\n     */\n    async initialize() {\n        if (this.initialized) {\n            this.log('Already initialized');\n            return true;\n        }\n\n        this.log('Initializing...');\n        \n        try {\n            // Set dummy user data if not present\n            if (!this.getCurrentUser()) {\n                this.currentUser = {\n                    uid: 'local-user',\n                    email: 'local@squarehero.test'\n                };\n                \n                // Store in session storage for backwards compatibility\n                sessionStorage.setItem(\n                    'squarehero_current_user', \n                    JSON.stringify(this.currentUser)\n                );\n            }\n            \n            // Try to get the site ID from the Squarespace environment\n            this.siteId = this.getSiteId();\n            this.log(`Using site ID: ${this.siteId}`);\n            \n            // Load file IDs from localStorage\n            this.loadFileIds();\n            \n            this.initialized = true;\n            this.log('Initialization complete');\n            \n            // Fire events for backward compatibility\n            const authEvent = new CustomEvent('firebase-auth-state-changed', {\n                detail: { user: this.currentUser },\n                bubbles: true\n            });\n            document.dispatchEvent(authEvent);\n            \n            return true;\n        } catch (error) {\n            this.logError('Initialization error', error);\n            this.initialized = false;\n            return false;\n        }\n    }\n\n    /**\n     * Load all stored file IDs from localStorage\n     */\n    loadFileIds() {\n        try {\n            // Find all localStorage keys matching our pattern\n            Object.keys(localStorage).forEach(key => {\n                if (key.startsWith(this.storagePrefix)) {\n                    const pluginId = key.substring(this.storagePrefix.length);\n                    const fileId = localStorage.getItem(key);\n                    if (fileId) {\n                        this.fileIds[pluginId] = fileId;\n                        this.log(`Loaded file ID for ${pluginId}: ${fileId}`);\n                    }\n                }\n            });\n            \n            this.log('Loaded file IDs:', this.fileIds);\n        } catch (error) {\n            this.logError('Error loading file IDs', error);\n        }\n    }\n\n    /**\n     * Save file ID for a plugin\n     * @param {string} pluginId - Plugin ID\n     * @param {string} fileId - File ID from Squarespace\n     */\n    saveFileId(pluginId, fileId) {\n        if (!pluginId || !fileId) return;\n        \n        try {\n            // Store in memory\n            this.fileIds[pluginId] = fileId;\n            \n            // Store in localStorage for persistence\n            localStorage.setItem(`${this.storagePrefix}${pluginId}`, fileId);\n            this.log(`Saved file ID for ${pluginId}: ${fileId}`);\n        } catch (error) {\n            this.logError(`Error saving file ID for ${pluginId}`, error);\n        }\n    }\n\n    /**\n     * Get file ID for a plugin\n     * @param {string} pluginId - Plugin ID\n     * @returns {string|null} - File ID or null if not found\n     */\n    getFileId(pluginId) {\n        // First check memory cache\n        if (this.fileIds[pluginId]) {\n            return this.fileIds[pluginId];\n        }\n        \n        // Then check localStorage\n        try {\n            const fileId = localStorage.getItem(`${this.storagePrefix}${pluginId}`);\n            if (fileId) {\n                // Update memory cache\n                this.fileIds[pluginId] = fileId;\n                return fileId;\n            }\n        } catch (error) {\n            this.logError(`Error getting file ID for ${pluginId}`, error);\n        }\n        \n        return null;\n    }\n\n    /**\n     * Clear file ID for a plugin\n     * @param {string} pluginId - Plugin ID\n     */\n    clearFileId(pluginId) {\n        if (!pluginId) return;\n        \n        try {\n            // Clear from memory\n            delete this.fileIds[pluginId];\n            \n            // Clear from localStorage\n            localStorage.removeItem(`${this.storagePrefix}${pluginId}`);\n            this.log(`Cleared file ID for ${pluginId}`);\n        } catch (error) {\n            this.logError(`Error clearing file ID for ${pluginId}`, error);\n        }\n    }\n\n    /**\n     * Get the current site ID from Squarespace\n     * @returns {string} - The site ID or a generated ID if not available\n     */\n    getSiteId() {\n        // Check if Static.SQUARESPACE_CONTEXT exists (Squarespace 7.1)\n        if (window.Static && window.Static.SQUARESPACE_CONTEXT && window.Static.SQUARESPACE_CONTEXT.website) {\n            return window.Static.SQUARESPACE_CONTEXT.website.id;\n        }\n        \n        // Check for SQS_CONTEXT (older Squarespace)\n        if (window.SQS_CONTEXT && window.SQS_CONTEXT.website) {\n            return window.SQS_CONTEXT.website.id;\n        }\n        \n        // Check for Squarespace object\n        if (window.Squarespace && window.Squarespace.Constants && window.Squarespace.Constants.WEBSITE_ID) {\n            return window.Squarespace.Constants.WEBSITE_ID;\n        }\n        \n        // Try to extract from the URL\n        const hostnameParts = window.location.hostname.split('.');\n        if (hostnameParts[0] !== 'www' && hostnameParts[0] !== 'localhost') {\n            return hostnameParts[0];\n        }\n        \n        // If all else fails, create a consistent fallback ID based on domain\n        return `site-${window.location.hostname.replace(/[^a-z0-9]/gi, '-')}`;\n    }\n\n    /**\n     * Get CSRF token required for Squarespace API calls\n     * @returns {string|null} - CSRF token from cookies\n     */\n    getCsrfToken() {\n        const crumb = document.cookie.split(';')\n            .find(c => c.trim().startsWith('crumb='))\n            ?.split('=')[1];\n        \n        if (!crumb) {\n            this.logError(\"Could not find crumb cookie for CSRF protection\");\n            return null;\n        }\n        \n        return crumb;\n    }\n\n    /**\n     * Get the current user\n     * @returns {Object|null} - The user object or null if not authenticated\n     */\n    getCurrentUser() {\n        // Try to get from instance first\n        if (this.currentUser) {\n            return this.currentUser;\n        }\n        \n        // Try to get from session storage (for backwards compatibility)\n        const storedUser = sessionStorage.getItem('squarehero_current_user');\n        if (storedUser) {\n            try {\n                this.currentUser = JSON.parse(storedUser);\n                return this.currentUser;\n            } catch (e) {\n                this.logError('Error parsing stored user:', e);\n            }\n        }\n        \n        return null;\n    }\n\n    /**\n     * Delete file by ID from Squarespace\n     * @param {string} fileId - ID of the file to delete\n     * @returns {Promise<boolean>} - True if deletion was successful\n     */\n    async deleteFileById(fileId) {\n        if (!fileId) {\n            this.log(\"No file ID provided for deletion\");\n            return false;\n        }\n        \n        const crumb = this.getCsrfToken();\n        if (!crumb) {\n            this.logError(\"Cannot delete file without CSRF token\");\n            return false;\n        }\n        \n        try {\n            this.log(`Deleting file with ID: ${fileId}`);\n            const response = await fetch(`${window.location.origin}/api/content-items/${fileId}`, {\n                method: \"DELETE\",\n                headers: {\n                    \"accept\": \"application/json\",\n                    \"x-csrf-token\": crumb\n                },\n                credentials: \"include\"\n            });\n            \n            if (!response.ok) {\n                this.logError(`Failed to delete file: ${response.status} ${response.statusText}`);\n                return false;\n            }\n            \n            this.log(`Successfully deleted file with ID: ${fileId}`);\n            return true;\n        } catch (error) {\n            this.logError(\"Error deleting file:\", error);\n            return false;\n        }\n    }\n\n    /**\n     * Rename a file in Squarespace\n     * @param {string} fileId - ID of the file to rename\n     * @param {string} newFileName - New filename to use\n     * @returns {Promise<Object|null>} - Updated file info or null if failed\n     */\n    async renameFile(fileId, newFileName) {\n        if (!fileId) {\n            this.logError('No file ID provided for renaming');\n            return null;\n        }\n        \n        const crumb = this.getCsrfToken();\n        if (!crumb) {\n            this.logError('Cannot rename file without CSRF token');\n            return null;\n        }\n        \n        try {\n            // Step 1: Get current file info\n            this.log(`Getting file info for ID: ${fileId}`);\n            const fileInfoUrl = `${window.location.origin}/api/content-items/${fileId}`;\n            \n            const infoResponse = await fetch(fileInfoUrl, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'x-csrf-token': crumb,\n                    'Cache-Control': 'no-cache'\n                },\n                credentials: 'include'\n            });\n            \n            if (!infoResponse.ok) {\n                throw new Error(`Failed to get file info: ${infoResponse.status} ${infoResponse.statusText}`);\n            }\n            \n            const fileInfo = await infoResponse.json();\n            this.log('Original file info:', fileInfo);\n            \n            // Step 2: Update the file info with the new filename\n            // Important: We need to update both the filename and urlId properties\n            const updatedFileInfo = {\n                ...fileInfo,\n                filename: newFileName,\n                urlId: newFileName\n            };\n            \n            // Step 3: Send the update to the API\n            this.log(`Renaming file to: ${newFileName}`);\n            const updateResponse = await fetch(fileInfoUrl, {\n                method: 'PUT',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'x-csrf-token': crumb\n                },\n                body: JSON.stringify(updatedFileInfo),\n                credentials: 'include'\n            });\n            \n            if (!updateResponse.ok) {\n                throw new Error(`Failed to rename file: ${updateResponse.status} ${updateResponse.statusText}`);\n            }\n            \n            const updatedInfo = await updateResponse.json();\n            this.log('File renamed successfully:', updatedInfo);\n            \n            return updatedInfo;\n        } catch (error) {\n            this.logError('Error renaming file:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Create a JSON file with the given content\n     * @param {string} fileName - Name of the file to create\n     * @param {Object} jsonData - JSON data to store in the file\n     * @returns {Promise<Object|null>} - Upload result with fileId or null if failed\n     */\n    async createJsonFile(fileName, jsonData) {\n        this.log(`Creating JSON file ${fileName}`);\n        \n        const jsonString = JSON.stringify(jsonData, null, 2);\n        const blob = new Blob([jsonString], { type: \"application/json\" });\n        const file = new File([blob], fileName, { type: \"application/json\" });\n        \n        return this.uploadToSquarespace(file);\n    }\n\n    /**\n     * Upload a file to Squarespace's file system\n     * @param {File} file - File object to upload\n     * @returns {Promise<Object|null>} - Upload result with fileId or null if failed\n     */\n    async uploadToSquarespace(file) {\n        this.log(`Uploading file ${file.name}`);\n        \n        const crumb = this.getCsrfToken();\n        if (!crumb) {\n            this.logError(\"Cannot proceed without CSRF token\");\n            return null;\n        }\n        \n        const formData = new FormData();\n        // We'll try with useFilenameAsUrlId since we now expect unique filenames with suffixes\n        formData.append('useFilenameAsUrlId', 'true');\n        formData.append('contentType', file.type);\n        formData.append('fileName', file.name);\n        formData.append('fileSize', file.size);\n        formData.append('Filedata', file);\n        \n        try {\n            const response = await fetch(`${window.location.origin}/api/uploads/files`, {\n                method: \"POST\",\n                headers: {\n                    \"accept\": \"application/json, text/plain, */*\",\n                    \"x-csrf-token\": crumb\n                },\n                body: formData,\n                credentials: \"include\"\n            });\n            \n            if (!response.ok) {\n                throw new Error(`Upload failed: ${response.status} ${response.statusText}`);\n            }\n            \n            const result = await response.json();\n            this.log(\"Upload result:\", result);\n            \n            // Extract the file ID and URL\n            const fileId = result?.media?.[0]?.id;\n            const fileUrl = result?.media?.[0]?.url;\n            \n            if (!fileId) {\n                this.logError(\"File ID not found in upload response\");\n                return null;\n            }\n            \n            this.log(`File uploaded successfully with ID: ${fileId} and URL: ${fileUrl}`);\n            return { result, fileId, fileUrl };\n        } catch (error) {\n            this.logError(\"Error uploading file:\", error);\n            return null;\n        }\n    }\n\n    /**\n     * Check if a file exists at the given path\n     * @param {string} fileName - Name of the file to check\n     * @returns {Promise<boolean>} - True if file exists\n     */\n    async checkFileExists(fileName) {\n        const url = `${window.location.origin}/s/${fileName}`;\n        this.log(`Checking if file exists: ${url}`);\n        \n        try {\n            const response = await fetch(url, {\n                method: 'HEAD',\n                cache: 'no-store'\n            });\n            \n            const exists = response.ok;\n            this.log(`File ${fileName} exists: ${exists}`);\n            return exists;\n        } catch (error) {\n            this.log(`Error checking if file exists: ${fileName}`, error);\n            return false;\n        }\n    }\n\n    /**\n     * Fetch content from a URL\n     * @param {string} url - URL to fetch from\n     * @returns {Promise<Object|null>} - Parsed JSON or null if failed\n     */\n    async fetchFileContent(url) {\n        try {\n            // Add cache buster\n            const cacheBuster = `?_=${Date.now()}`;\n            \n            this.log(`Fetching content from: ${url}${cacheBuster}`);\n            const response = await fetch(`${url}${cacheBuster}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Cache-Control': 'no-cache'\n                }\n            });\n            \n            if (!response.ok) {\n                this.log(`Failed to fetch content: ${response.status} ${response.statusText}`);\n                return null;\n            }\n            \n            const data = await response.json();\n            this.log(`Successfully fetched content from ${url}`);\n            return data;\n        } catch (error) {\n            this.logError(`Error fetching content from ${url}`, error);\n            return null;\n        }\n    }\n\n    /**\n     * Get plugin settings from Squarespace file system\n     * First tries latest timestamped file, then falls back to other formats\n     * @param {string} pluginId - Plugin ID\n     * @returns {Promise<Object|null>} - Plugin settings or null if not found\n     */\n    async getPluginSettings(pluginId) {\n        this.log(`Getting settings for plugin ${pluginId}`);\n        \n        try {\n            // First check if we have a file ID stored\n            const fileId = this.getFileId(pluginId);\n            \n            if (fileId) {\n                this.log(`Found stored file ID for ${pluginId}: ${fileId}`);\n                \n                try {\n                    // Get the file info to confirm it exists and get the asset URL\n                    const fileInfoUrl = `${window.location.origin}/api/content-items/${fileId}`;\n                    \n                    const infoResponse = await fetch(fileInfoUrl, {\n                        method: 'GET',\n                        headers: {\n                            'Accept': 'application/json',\n                            'x-csrf-token': this.getCsrfToken(),\n                            'Cache-Control': 'no-cache'\n                        },\n                        credentials: 'include'\n                    });\n                    \n                    if (infoResponse.ok) {\n                        const fileInfo = await infoResponse.json();\n                        \n                        // Extract the file URL from the response\n                        const fileUrl = fileInfo?.assetUrl || fileInfo?.urlId;\n                        \n                        if (fileUrl) {\n                            // Fetch the actual file content\n                            const contentUrl = fileUrl.startsWith('http') \n                                ? fileUrl \n                                : `${window.location.origin}${fileUrl.startsWith('/') ? '' : '/'}${fileUrl}`;\n                            \n                            this.log(`Fetching settings content from ID-based URL: ${contentUrl}`);\n                            const cacheBuster = `?_=${Date.now()}`;\n                            const response = await fetch(`${contentUrl}${cacheBuster}`, {\n                                method: 'GET',\n                                headers: {\n                                    'Accept': 'application/json',\n                                    'Cache-Control': 'no-cache'\n                                }\n                            });\n                            \n                            if (response.ok) {\n                                const settingsData = await response.json();\n                                this.log(`Successfully loaded settings for ${pluginId} from ID-based URL`, settingsData);\n                                return settingsData.settings || null;\n                            }\n                        }\n                    } else if (infoResponse.status === 404) {\n                        // File ID is no longer valid\n                        this.log(`File with ID ${fileId} not found, clearing stored ID`);\n                        this.clearFileId(pluginId);\n                    }\n                } catch (idLookupError) {\n                    this.log(`Error with ID lookup method: ${idLookupError.message}`);\n                    // Continue to URL-based approaches\n                }\n            }\n            \n            // Fallback to searching for existing files via URL\n            \n            // Try to find latest timestamped file first (should match our new naming pattern)\n            this.log(`Trying to find latest timestamped file for ${pluginId}`);\n            \n            // Get a list of files for the plugin via the Squarespace API\n            const searchUrl = `${window.location.origin}/api/content/website-items/query`;\n            const crumb = this.getCsrfToken();\n            \n            if (crumb) {\n                try {\n                    const searchResponse = await fetch(searchUrl, {\n                        method: 'POST',\n                        headers: {\n                            'Accept': 'application/json',\n                            'Content-Type': 'application/json',\n                            'x-csrf-token': crumb\n                        },\n                        body: JSON.stringify({\n                            query: `${this.filePrefix}${pluginId}-settings-`,\n                            recordTypes: [19], // File/attachment record type\n                            limit: 10,\n                            sortOrder: 'updatedOn desc'\n                        }),\n                        credentials: 'include'\n                    });\n                    \n                    if (searchResponse.ok) {\n                        const results = await searchResponse.json();\n                        if (results && results.items && results.items.length > 0) {\n                            this.log(`Found ${results.items.length} settings files for ${pluginId}`);\n                            \n                            // Get the most recent file\n                            const latestFile = results.items[0];\n                            this.log(`Using latest file: ${latestFile.filename}`);\n                            \n                            // Store this ID for future lookups\n                            this.saveFileId(pluginId, latestFile.id);\n                            \n                            // Get the content\n                            const fileUrl = latestFile.assetUrl;\n                            if (fileUrl) {\n                                const settingsData = await this.fetchFileContent(fileUrl);\n                                if (settingsData) {\n                                    this.log(`Successfully loaded settings from latest file`, settingsData);\n                                    return settingsData.settings || null;\n                                }\n                            }\n                        }\n                    }\n                } catch (searchError) {\n                    this.log(`Error searching for files: ${searchError.message}`);\n                    // Continue to other fallback methods\n                }\n            }\n            \n            // Try the alternating A/B files (for backward compatibility)\n            const fileNameA = `${this.filePrefix}${pluginId}-settings-a.json`;\n            const fileNameB = `${this.filePrefix}${pluginId}-settings-b.json`;\n            \n            this.log(`Trying alternating filenames: A and B`);\n            const urlA = `${window.location.origin}/s/${fileNameA}`;\n            const settingsA = await this.fetchFileContent(urlA);\n            \n            if (settingsA) {\n                this.log(`Found settings in file A (${fileNameA})`);\n                return settingsA.settings || null;\n            }\n            \n            const urlB = `${window.location.origin}/s/${fileNameB}`;\n            const settingsB = await this.fetchFileContent(urlB);\n            \n            if (settingsB) {\n                this.log(`Found settings in file B (${fileNameB})`);\n                return settingsB.settings || null;\n            }\n            \n            // Try the original format (for backward compatibility)\n            const originalFileName = `${this.filePrefix}${pluginId}-settings.json`;\n            const originalUrl = `${window.location.origin}/s/${originalFileName}`;\n            const originalSettings = await this.fetchFileContent(originalUrl);\n            \n            if (originalSettings) {\n                this.log(`Found settings in original filename format (${originalFileName})`);\n                return originalSettings.settings || null;\n            }\n            \n            // Final fallback to localStorage\n            this.log(`All Squarespace methods failed, checking localStorage fallback for ${pluginId}`);\n            const localKey = `squarehero_plugin_${pluginId}`;\n            const storedSettings = localStorage.getItem(localKey);\n            \n            if (!storedSettings) {\n                this.log(`No settings found for plugin ${pluginId} in localStorage either`);\n                return null;\n            }\n            \n            // If found in localStorage, parse and return\n            const settings = JSON.parse(storedSettings);\n            this.log(`Found settings in localStorage for ${pluginId}`, settings);\n            \n            // DO NOT automatically migrate from localStorage during dashboard load\n            // We'll only migrate when explicitly saving settings\n            \n            return settings;\n        } catch (error) {\n            this.logError('Error fetching plugin settings', error);\n            \n            // Try localStorage as absolute last resort after all errors\n            try {\n                const localKey = `squarehero_plugin_${pluginId}`;\n                const storedSettings = localStorage.getItem(localKey);\n                \n                if (storedSettings) {\n                    return JSON.parse(storedSettings);\n                }\n            } catch (e) {\n                this.logError('Error fetching from localStorage fallback', e);\n            }\n            \n            return null;\n        }\n    }\n\n    /**\n     * Migrate settings from localStorage to Squarespace storage\n     * Only done when explicitly saving settings, not during dashboard load\n     * @param {string} pluginId - Plugin ID\n     * @param {Object} settings - Settings to migrate\n     * @param {boolean} forceSave - Whether to force saving even if not triggered by user action\n     */\n    async migrateToSquarespaceStorage(pluginId, settings, forceSave = false) {\n        // Skip automatic migration unless forceSave is true\n        // This prevents creating new files during dashboard load\n        if (!forceSave) {\n            this.log(`Skipping automatic migration for ${pluginId} during dashboard load`);\n            return false;\n        }\n        \n        this.log(`Migrating settings for ${pluginId} from localStorage to Squarespace storage`);\n        \n        // Create the full settings object in the required format\n        const fullSettings = {\n            plugin: pluginId,\n            siteId: this.siteId,\n            state: settings.licenseStatus || 'unlicensed',\n            settings: settings,\n            updatedAt: new Date().toISOString()\n        };\n        \n        // Add trial info if present\n        if (settings.trialExpires) {\n            fullSettings.trial = {\n                expires: settings.trialExpires\n            };\n        }\n        \n        // Save to Squarespace storage\n        const success = await this.updatePluginSettings(pluginId, settings);\n        \n        if (success) {\n            this.log(`Successfully migrated settings for ${pluginId} to Squarespace storage`);\n        }\n        \n        return success;\n    }\n\n    /**\n     * Find an existing file in Squarespace's file system\n     * @param {string} fileName - Name of the file to find\n     * @returns {Promise<string|null>} - URL of the file or null if not found\n     */\n    async findExistingFile(fileName) {\n        // This is a simplified implementation - in a production environment\n        // you might want to maintain an index of files or use Squarespace's\n        // Content API to find files more efficiently\n        \n        // For now, we'll try a few common paths where Squarespace might store files\n        const possiblePaths = [\n            `/s/${fileName}`,\n            `/uploads/files/${fileName}`,\n            `/uploads/${fileName}`\n        ];\n        \n        for (const path of possiblePaths) {\n            try {\n                const url = `${window.location.origin}${path}`;\n                this.log(`Checking for file at ${url}`);\n                \n                const response = await fetch(url, {\n                    method: 'HEAD',\n                    cache: 'no-store'\n                });\n                \n                if (response.ok) {\n                    this.log(`Found file at ${url}`);\n                    return url;\n                }\n            } catch (error) {\n                this.log(`File not found at ${path}`);\n            }\n        }\n        \n        this.log(`Could not find file ${fileName} in any expected locations`);\n        return null;\n    }\n\n    /**\n     * Update plugin settings in Squarespace file system\n     * Uses a unique variable in the filename that is also stored in the script tag\n     * @param {string} pluginId - Plugin ID\n     * @param {Object} settings - Plugin settings to update\n     * @returns {Promise<boolean>} - True if update was successful\n     */\n    async updatePluginSettings(pluginId, settings) {\n        this.log(`Updating settings for plugin ${pluginId}`, settings);\n        \n        try {\n            // Generate a unique ID for this settings file\n            // We'll use this both in the filename and in the script tag attribute\n            const uniqueId = `v${Date.now().toString(36)}${Math.random().toString(36).substring(2, 7)}`;\n            \n            // Create the full settings object in the required format\n            const fullSettings = {\n                plugin: pluginId,\n                siteId: this.siteId,\n                state: settings.licenseStatus || 'unlicensed',\n                settings: settings,\n                // Store the uniqueId inside the settings file too for reference\n                uniqueId: uniqueId,\n                updatedAt: new Date().toISOString()\n            };\n            \n            // Add trial info if present\n            if (settings.trialExpires) {\n                fullSettings.trial = {\n                    expires: settings.trialExpires\n                };\n            }\n            \n            // Create filename with the unique ID\n            const fileName = `${this.filePrefix}${pluginId}-settings-${uniqueId}.json`;\n            \n            // Step 1: Create new file with the unique ID in the filename\n            this.log(`Creating settings file: ${fileName}`);\n            const uploadResult = await this.createJsonFile(fileName, fullSettings);\n            \n            if (!uploadResult || !uploadResult.fileId) {\n                throw new Error('File upload failed or missing file ID');\n            }\n            \n            const newFileId = uploadResult.fileId;\n            this.log(`Successfully created new settings file with ID: ${newFileId}`);\n            \n            // Step 2: Store the new file ID and unique ID\n            this.saveFileId(pluginId, newFileId);\n            this.saveUniqueId(pluginId, uniqueId);\n            \n            // Step 3: Update the script tag in the code injection if enabled\n            if (settings.updateScriptTag !== false) {\n                try {\n                    await this.updateScriptTagInInjection(pluginId, uniqueId);\n                } catch (injectionError) {\n                    this.logError(`Warning: Could not update script tag in code injection: ${injectionError.message}`);\n                    // Continue despite this error as the file is still created successfully\n                }\n            }\n            \n            // Step 4: Clean up old files (keeping most recent ones)\n            await this.cleanupOldSettingsFiles(pluginId, newFileId);\n            \n            // For backward compatibility, also save to localStorage\n            const localKey = `squarehero_plugin_${pluginId}`;\n            localStorage.setItem(localKey, JSON.stringify(settings));\n            \n            // Store the current unique ID in localStorage too for easy reference\n            localStorage.setItem(`squarehero_uniqueid_${pluginId}`, uniqueId);\n            \n            // Fire an event to notify other components\n            const event = new CustomEvent('plugin-settings-updated', {\n                detail: { \n                    pluginId: pluginId,\n                    settings: settings,\n                    uniqueId: uniqueId\n                },\n                bubbles: true\n            });\n            document.dispatchEvent(event);\n            \n            this.log(`Successfully saved settings for ${pluginId} to Squarespace storage with uniqueId: ${uniqueId}`);\n            return true;\n        } catch (error) {\n            this.logError('Error updating plugin settings', error);\n            \n            // Save to localStorage as fallback\n            try {\n                const localKey = `squarehero_plugin_${pluginId}`;\n                localStorage.setItem(localKey, JSON.stringify(settings));\n                this.log('Saved to localStorage as fallback');\n            } catch (e) {\n                this.logError('Error saving to localStorage fallback', e);\n            }\n            \n            return false;\n        }\n    }\n\n    /**\n     * Save unique ID for a plugin's settings\n     * @param {string} pluginId - Plugin ID\n     * @param {string} uniqueId - Unique ID for the settings file\n     */\n    saveUniqueId(pluginId, uniqueId) {\n        if (!pluginId || !uniqueId) return;\n        \n        try {\n            // Store in localStorage for persistence and easy access\n            localStorage.setItem(`squarehero_uniqueid_${pluginId}`, uniqueId);\n            this.log(`Saved unique ID for ${pluginId}: ${uniqueId}`);\n        } catch (error) {\n            this.logError(`Error saving unique ID for ${pluginId}`, error);\n        }\n    }\n\n    /**\n     * Get unique ID for a plugin's settings\n     * @param {string} pluginId - Plugin ID\n     * @returns {string|null} - Unique ID or null if not found\n     */\n    getUniqueId(pluginId) {\n        try {\n            const uniqueId = localStorage.getItem(`squarehero_uniqueid_${pluginId}`);\n            if (uniqueId) {\n                this.log(`Found unique ID for ${pluginId}: ${uniqueId}`);\n                return uniqueId;\n            }\n        } catch (error) {\n            this.logError(`Error getting unique ID for ${pluginId}`, error);\n        }\n        \n        return null;\n    }\n\n    /**\n     * Update the script tag in Squarespace's code injection\n     * @param {string} pluginId - Plugin ID \n     * @param {string} uniqueId - Unique ID to set in the settings attribute\n     * @returns {Promise<boolean>} - True if successful\n     */\n    async updateScriptTagInInjection(pluginId, uniqueId) {\n        this.log(`Updating script tag for ${pluginId} with uniqueId: ${uniqueId}`);\n        \n        const crumb = this.getCsrfToken();\n        if (!crumb) {\n            throw new Error(\"Cannot update code injection without CSRF token\");\n        }\n        \n        try {\n            // First, retrieve current injection settings\n            const settingsResponse = await fetch(`${window.location.origin}/api/config/GetInjectionSettings`, {\n                method: \"GET\",\n                headers: {\n                    \"x-csrf-token\": crumb,\n                    \"accept\": \"application/json, text/plain, */*\"\n                },\n                credentials: \"include\"\n            });\n            \n            if (!settingsResponse.ok) {\n                throw new Error(`Failed to get injection settings: ${settingsResponse.status}`);\n            }\n            \n            const currentSettings = await settingsResponse.json();\n            this.log(\"Current Injection Settings retrieved\");\n            \n            // Define patterns to search for different script tag variations\n            // 1. Script tags with settings attribute\n            const scriptTagWithSettingsPattern = new RegExp(\n                `<script[^>]*data-squarehero-plugin=[\"']${pluginId}[\"'][^>]*settings=[\"'][^\"']*[\"'][^>]*>`, \n                'g'\n            );\n            \n            // 2. Script tags without settings attribute\n            const scriptTagWithoutSettingsPattern = new RegExp(\n                `<script[^>]*data-squarehero-plugin=[\"']${pluginId}[\"'][^>]*(?!settings=)([^>]*)>`,\n                'g'\n            );\n            \n            // Track whether we made any changes\n            let madeChanges = false;\n            let updatedHeader = currentSettings.header || '';\n            let updatedFooter = currentSettings.footer || '';\n            \n            // First check for script tags with settings attribute and update them\n            if (updatedHeader.includes(`data-squarehero-plugin=\"${pluginId}\"`) || \n                updatedHeader.includes(`data-squarehero-plugin='${pluginId}'`)) {\n                \n                // Check and update tags with settings attribute\n                if (updatedHeader.match(scriptTagWithSettingsPattern)) {\n                    updatedHeader = updatedHeader.replace(scriptTagWithSettingsPattern, (match) => {\n                        madeChanges = true;\n                        // Replace just the settings attribute\n                        return match.replace(/settings=[\"'][^\"']*[\"']/, `settings=\"${uniqueId}\"`);\n                    });\n                } \n                // Check and update tags without settings attribute\n                else if (updatedHeader.match(scriptTagWithoutSettingsPattern)) {\n                    updatedHeader = updatedHeader.replace(scriptTagWithoutSettingsPattern, (match, p1) => {\n                        madeChanges = true;\n                        // Add the settings attribute before the closing >\n                        return match.replace(p1 + '>', `${p1} settings=\"${uniqueId}\">`);\n                    });\n                }\n            }\n            \n            // Check footer for script tags\n            if (updatedFooter.includes(`data-squarehero-plugin=\"${pluginId}\"`) || \n                updatedFooter.includes(`data-squarehero-plugin='${pluginId}'`)) {\n                \n                // Check and update tags with settings attribute\n                if (updatedFooter.match(scriptTagWithSettingsPattern)) {\n                    updatedFooter = updatedFooter.replace(scriptTagWithSettingsPattern, (match) => {\n                        madeChanges = true;\n                        // Replace just the settings attribute\n                        return match.replace(/settings=[\"'][^\"']*[\"']/, `settings=\"${uniqueId}\"`);\n                    });\n                } \n                // Check and update tags without settings attribute\n                else if (updatedFooter.match(scriptTagWithoutSettingsPattern)) {\n                    updatedFooter = updatedFooter.replace(scriptTagWithoutSettingsPattern, (match, p1) => {\n                        madeChanges = true;\n                        // Add the settings attribute before the closing >\n                        return match.replace(p1 + '>', `${p1} settings=\"${uniqueId}\">`);\n                    });\n                }\n            }\n            \n            // Only send an update if we made changes\n            if (madeChanges) {\n                this.log(`Found and updated script tag for ${pluginId}`);\n                \n                // Prepare form-urlencoded body\n                const formBody = new URLSearchParams({\n                    header: updatedHeader,\n                    footer: updatedFooter,\n                    lockPage: currentSettings.lockPage || '',\n                    postItem: currentSettings.postItem || ''\n                });\n                \n                // Save updated settings\n                const saveResponse = await fetch(`${window.location.origin}/api/config/SaveInjectionSettings`, {\n                    method: \"POST\",\n                    headers: {\n                        \"content-type\": \"application/x-www-form-urlencoded\",\n                        \"x-csrf-token\": crumb\n                    },\n                    body: formBody.toString(),\n                    credentials: \"include\"\n                });\n                \n                if (!saveResponse.ok) {\n                    throw new Error(`Failed to save injection settings: ${saveResponse.status}`);\n                }\n                \n                this.log(`Successfully updated script tag for ${pluginId} in code injection`);\n                return true;\n            } else {\n                this.log(`No script tag found for ${pluginId} in code injection`);\n                return false;\n            }\n        } catch (error) {\n            this.logError('Error updating script tag in code injection:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Clean up old settings files for a plugin\n     * @param {string} pluginId - Plugin ID\n     * @param {string} currentFileId - ID of the current file to keep\n     * @returns {Promise<boolean>} - True if cleanup was successful\n     */\n    async cleanupOldSettingsFiles(pluginId, currentFileId) {\n        this.log(`Cleaning up old settings files for ${pluginId}`);\n        \n        const crumb = this.getCsrfToken();\n        if (!crumb) {\n            this.logError(\"Cannot clean up files without CSRF token\");\n            return false;\n        }\n        \n        try {\n            // Search for all settings files for this plugin\n            const searchUrl = `${window.location.origin}/api/content/website-items/query`;\n            \n            const searchResponse = await fetch(searchUrl, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'x-csrf-token': crumb\n                },\n                body: JSON.stringify({\n                    query: `${this.filePrefix}${pluginId}-settings-`,\n                    recordTypes: [19], // File/attachment record type\n                    limit: 50, // Increased limit to ensure we find all old files\n                    sortOrder: 'updatedOn desc'\n                }),\n                credentials: 'include'\n            });\n            \n            if (!searchResponse.ok) {\n                throw new Error(`Search failed: ${searchResponse.status}`);\n            }\n            \n            const results = await searchResponse.json();\n            \n            if (!results || !results.items || !results.items.length) {\n                this.log(`No settings files found for ${pluginId}`);\n                return true;\n            }\n            \n            this.log(`Found ${results.items.length} settings files for ${pluginId}`);\n            \n            // Only keep the current file, delete all others\n            let deletedCount = 0;\n            let deletePromises = [];\n            \n            // Process all files except the current one\n            for (const file of results.items) {\n                if (file.id !== currentFileId) {\n                    this.log(`Deleting old settings file: ${file.filename} (ID: ${file.id})`);\n                    // Use Promise.all to delete files in parallel for efficiency\n                    deletePromises.push(\n                        this.deleteFileById(file.id)\n                            .then(success => {\n                                if (success) deletedCount++;\n                                return success;\n                            })\n                    );\n                }\n            }\n            \n            // Wait for all deletions to complete\n            await Promise.all(deletePromises);\n            \n            this.log(`Cleanup complete. Kept current file, deleted ${deletedCount} old files`);\n            return true;\n        } catch (error) {\n            this.logError('Error cleaning up old settings files:', error);\n            return false;\n        }\n    }\n    \n    /**\n     * Sign out (stub for compatibility with previous service)\n     */\n    async signOut() {\n        this.log('Sign out called (compatibility method)');\n        \n        // Just clear the current user from session\n        sessionStorage.removeItem('squarehero_current_user');\n        this.currentUser = null;\n        \n        return true;\n    }\n\n    /**\n     * Log user action (stub for compatibility)\n     * @param {string} action - Action name\n     * @param {Object} data - Additional data\n     */\n    async logUserAction(action, data = {}) {\n        this.log(`Action logged (stub): ${action}`, data);\n        return true;\n    }\n}\n\n// Create singleton instance\nconst SquarespaceStorageService = new SquarespaceStorageServiceClass();\n\n// Export the singleton\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SquarespaceStorageService);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/modules/core/squarespace-storage-service.js?")},"./src/modules/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ComponentSystem: () => (/* reexport safe */ _components_component_system_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]),\n/* harmony export */   Dashboard: () => (/* reexport safe */ _core_dashboard_core_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   DiscoverPlugins: () => (/* reexport safe */ _ui_discover_plugins_js__WEBPACK_IMPORTED_MODULE_6__.DiscoverPlugins),\n/* harmony export */   HelpDocsLoader: () => (/* reexport default from dynamic */ _utils_help_docs_loader_js__WEBPACK_IMPORTED_MODULE_10___default.a),\n/* harmony export */   LicensingSystem: () => (/* reexport safe */ _licensing_licensing_system_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   LocalStorageService: () => (/* reexport safe */ _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   NotificationSystem: () => (/* reexport safe */ _core_notification_system_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   PluginCards: () => (/* reexport safe */ _ui_cards_js__WEBPACK_IMPORTED_MODULE_5__.PluginCards),\n/* harmony export */   PluginRegistry: () => (/* reexport safe */ _core_plugin_registry_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   SettingsComponents: () => (/* reexport safe */ _components_settings_components_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]),\n/* harmony export */   SettingsPanel: () => (/* reexport safe */ _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_7__.SettingsPanel),\n/* harmony export */   SkeletonLoader: () => (/* reexport default from dynamic */ _utils_skeleton_loader_js__WEBPACK_IMPORTED_MODULE_11___default.a),\n/* harmony export */   SquarespaceStorageService: () => (/* reexport safe */ _core_squarespace_storage_service_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   WizardComponent: () => (/* reexport safe */ _components_wizard_component_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n/* harmony export */   WizardSystem: () => (/* reexport safe */ _wizards_wizard_system_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _core_dashboard_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/dashboard-core.js */ \"./src/modules/core/dashboard-core.js\");\n/* harmony import */ var _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/local-storage-service.js */ \"./src/modules/core/local-storage-service.js\");\n/* harmony import */ var _core_squarespace_storage_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/squarespace-storage-service.js */ \"./src/modules/core/squarespace-storage-service.js\");\n/* harmony import */ var _core_notification_system_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/notification-system.js */ \"./src/modules/core/notification-system.js\");\n/* harmony import */ var _core_plugin_registry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/plugin-registry.js */ \"./src/modules/core/plugin-registry.js\");\n/* harmony import */ var _ui_cards_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui/cards.js */ \"./src/modules/ui/cards.js\");\n/* harmony import */ var _ui_discover_plugins_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui/discover-plugins.js */ \"./src/modules/ui/discover-plugins.js\");\n/* harmony import */ var _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui/settings-panel.js */ \"./src/modules/ui/settings-panel.js\");\n/* harmony import */ var _licensing_licensing_system_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./licensing/licensing-system.js */ \"./src/modules/licensing/licensing-system.js\");\n/* harmony import */ var _wizards_wizard_system_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./wizards/wizard-system.js */ \"./src/modules/wizards/wizard-system.js\");\n/* harmony import */ var _utils_help_docs_loader_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/help-docs-loader.js */ \"./src/utils/help-docs-loader.js\");\n/* harmony import */ var _utils_help_docs_loader_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_utils_help_docs_loader_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _utils_skeleton_loader_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/skeleton-loader.js */ \"./src/utils/skeleton-loader.js\");\n/* harmony import */ var _utils_skeleton_loader_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_utils_skeleton_loader_js__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var _components_component_system_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../components/component-system.js */ \"./src/components/component-system.js\");\n/* harmony import */ var _components_settings_components_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/settings-components.js */ \"./src/components/settings-components.js\");\n/* harmony import */ var _components_wizard_component_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/wizard-component.js */ \"./src/components/wizard-component.js\");\n/**\n * SquareHero Dashboard Modules Index\n * This file exports all dashboard modules to make imports cleaner\n */\n\n// Core modules\n\n\n\n\n\n\n// UI modules\n\n\n\n\n// Licensing module\n\n\n// Wizard module\n\n\n// Utility modules\n\n\n\n// Component modules\n\n\n\n\n// Export all modules\n\n\n/**\n * A global handler for color swatches that will run when the DOM is fully loaded\n */\ndocument.addEventListener('DOMContentLoaded', function() {\n  console.log('SquareHero: Setting up color swatch functionality when DOM is ready');\n  setTimeout(initializeColorSwatches, 500);\n  \n  // Add click listener to the document to close color pickers when clicking outside\n  document.addEventListener('click', function(e) {\n    // If the click is outside a color picker and not on a color display\n    if (!e.target.closest('.color-picker-expanded') && \n        !e.target.closest('.current-color-display') &&\n        !e.target.closest('.color-picker-close')) {\n      \n      // Close all expanded color pickers\n      document.querySelectorAll('.color-picker-expanded').forEach(expanded => {\n        expanded.style.display = 'none';\n      });\n    }\n  });\n});\n\n// Also initialize color swatches when settingsPanel becomes visible\n// This ensures swatches work in plugin settings panels\ndocument.addEventListener('click', function(e) {\n  // Check if the click is on a plugin card or settings related element\n  if (e.target.closest('.plugin-card') || \n      e.target.closest('.plugin-settings-button') || \n      e.target.closest('.settings-tab')) {\n    console.log('SquareHero: Plugin card or settings element clicked, initializing color swatches');\n    setTimeout(initializeColorSwatches, 500);\n  }\n});\n\n/**\n * Global function to initialize all color swatches in the document\n */\nfunction initializeColorSwatches() {\n  console.log('SquareHero: Initializing color swatch functionality');\n  \n  // First initialize the tab button handlers\n  document.querySelectorAll('.color-picker-tab-buttons .tab-button').forEach(button => {\n    // Remove old handler by cloning\n    const newButton = button.cloneNode(true);\n    button.parentNode.replaceChild(newButton, button);\n    \n    // Add new handler\n    newButton.addEventListener('click', function(e) {\n      console.log('Color picker tab clicked:', e.target.getAttribute('data-tab'));\n      const tabPanel = e.target.closest('.color-picker-compact');\n      const buttons = tabPanel.querySelectorAll('.tab-button');\n      buttons.forEach(btn => btn.classList.remove('active'));\n      e.target.classList.add('active');\n      \n      const tabName = e.target.getAttribute('data-tab');\n      const panels = tabPanel.querySelectorAll('.tab-panel');\n      panels.forEach(panel => {\n        panel.classList.toggle('active', panel.getAttribute('data-panel') === tabName);\n      });\n    });\n  });\n  \n  // Get all color swatches in the document\n  const allSwatches = document.querySelectorAll('.color-swatch');\n  console.log(`SquareHero: Found ${allSwatches.length} color swatches to initialize`);\n  \n  // Add direct click handlers to each swatch\n  allSwatches.forEach(swatch => {\n    // Remove existing click handlers to avoid duplicates\n    const newSwatch = swatch.cloneNode(true);\n    if (swatch.parentNode) {\n      swatch.parentNode.replaceChild(newSwatch, swatch);\n    }\n    \n    // Add new click handler directly\n    newSwatch.addEventListener('click', function(e) {\n      console.log('COLOR SWATCH CLICKED!', e.target);\n      \n      const colorVar = e.target.getAttribute('data-color-var');\n      const settingId = e.target.getAttribute('data-for');\n      console.log(`Swatch clicked - settingId: ${settingId}, colorVar: ${colorVar}`);\n      \n      // Find the corresponding input and set its value\n      const colorInput = document.querySelector(`#${settingId}`);\n      if (colorInput) {\n        colorInput.setAttribute('data-used-var', colorVar);\n        console.log(`Set data-used-var on color input #${settingId}`);\n        \n        // Trigger the hasUnsavedChanges flag in the settings panel\n        if (window.SettingsPanel) {\n          window.SettingsPanel.hasUnsavedChanges = true;\n          window.SettingsPanel.updateNotificationState();\n          console.log('Triggered unsaved changes notification');\n        }\n      }\n\n      // Highlight the selected swatch\n      const parentPanel = e.target.closest('.tab-panel');\n      if (parentPanel) {\n        parentPanel.querySelectorAll('.color-swatch').forEach(s => {\n          s.classList.remove('selected');\n        });\n        e.target.classList.add('selected');\n        console.log('Added selected class to clicked swatch');\n      }\n\n      // Update the displayed color\n      const colorDisplay = document.querySelector(`.color-picker-compact[data-setting-id=\"${settingId}\"] .current-color-display`);\n      if (colorDisplay) {\n        const bgColor = window.getComputedStyle(e.target).backgroundColor;\n        colorDisplay.style.backgroundColor = bgColor;\n        console.log(`Updated color display to ${bgColor}`);\n      }\n      \n      // No longer closing the expanded view after selection\n      // This allows the user to try multiple colors easily\n    });\n  });\n  \n  // Initialize click handlers for the color display (to open/close the picker)\n  const colorDisplays = document.querySelectorAll('.current-color-display');\n  console.log(`SquareHero: Found ${colorDisplays.length} color displays to initialize`);\n  \n  colorDisplays.forEach(display => {\n    // Remove existing handlers by replacing with clone\n    const newDisplay = display.cloneNode(true);\n    if (display.parentNode) {\n      display.parentNode.replaceChild(newDisplay, display);\n    }\n    \n    newDisplay.addEventListener('click', function(e) {\n      // Stop propagation to prevent the document click handler from immediately closing the picker\n      e.stopPropagation();\n      \n      console.log('Color display clicked');\n      const settingId = this.closest('.color-picker-compact').getAttribute('data-setting-id');\n      \n      // Close all other pickers first\n      document.querySelectorAll('.color-picker-expanded').forEach(expanded => {\n        const expandedSettingId = expanded.closest('.color-picker-compact').getAttribute('data-setting-id');\n        if (expandedSettingId !== settingId) {\n          expanded.style.display = 'none';\n        }\n      });\n      \n      // Toggle this picker\n      const expanded = this.nextElementSibling;\n      if (expanded && expanded.classList.contains('color-picker-expanded')) {\n        expanded.style.display = expanded.style.display === 'none' ? 'block' : 'none';\n        console.log(`Toggled picker display to: ${expanded.style.display}`);\n      }\n    });\n  });\n  \n  // Add a close button for each color picker\n  document.querySelectorAll('.color-picker-expanded').forEach(expanded => {\n    // Check if we already added a close button\n    if (!expanded.querySelector('.color-picker-close')) {\n      const closeButton = document.createElement('button');\n      closeButton.className = 'color-picker-close';\n      closeButton.innerHTML = '×';\n      closeButton.setAttribute('type', 'button');\n      closeButton.setAttribute('title', 'Close color picker');\n      closeButton.style.position = 'absolute';\n      closeButton.style.right = '5px';\n      closeButton.style.top = '5px';\n      closeButton.style.cursor = 'pointer';\n      closeButton.style.background = 'none';\n      closeButton.style.border = 'none';\n      closeButton.style.fontSize = '16px';\n      closeButton.style.fontWeight = 'bold';\n      closeButton.style.color = '#666';\n      closeButton.style.padding = '2px 6px';\n      \n      closeButton.addEventListener('click', function(e) {\n        e.stopPropagation();\n        expanded.style.display = 'none';\n      });\n      \n      expanded.style.position = 'relative';\n      expanded.appendChild(closeButton);\n    }\n  });\n  \n  // Fix hex input to update color display when entered\n  document.querySelectorAll('.color-hex-input').forEach(hexInput => {\n    // Remove existing handlers by replacing with clone\n    const newHexInput = hexInput.cloneNode(true);\n    if (hexInput.parentNode) {\n      hexInput.parentNode.replaceChild(newHexInput, hexInput);\n    }\n    \n    // Add input handler\n    newHexInput.addEventListener('input', function(e) {\n      const settingId = this.getAttribute('data-color-for');\n      if (!settingId) return;\n      \n      const colorInput = document.querySelector(`#${settingId}`);\n      if (!colorInput) return;\n      \n      // Validate hex format - either 3 or 6 hex digits with or without #\n      const hexValue = this.value.trim();\n      console.log(`Hex input: ${hexValue}`);\n      \n      // Basic validation for hex color\n      if (/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i.test(hexValue)) {\n        // Format with # if it's missing\n        const formattedHex = hexValue.startsWith('#') ? hexValue : `#${hexValue}`;\n        \n        // Update the color input value\n        colorInput.value = formattedHex;\n        \n        // Clear any selected CSS variable\n        colorInput.setAttribute('data-used-var', '');\n        \n        // Update the displayed color\n        const colorDisplay = document.querySelector(`.color-picker-compact[data-setting-id=\"${settingId}\"] .current-color-display`);\n        if (colorDisplay) {\n          colorDisplay.style.backgroundColor = formattedHex;\n          console.log(`Updated color display to ${formattedHex} from hex input`);\n        }\n        \n        // Remove any selected swatch\n        const picker = colorInput.closest('.color-picker-group');\n        if (picker) {\n          picker.querySelectorAll('.color-swatch').forEach(s => {\n            s.classList.remove('selected');\n          });\n        }\n        \n        console.log(`Updated color input #${settingId} to ${formattedHex}`);\n        \n        // Trigger the hasUnsavedChanges flag in the settings panel\n        if (window.SettingsPanel) {\n          window.SettingsPanel.hasUnsavedChanges = true;\n          window.SettingsPanel.updateNotificationState();\n          console.log('Triggered unsaved changes notification from hex input');\n        }\n      }\n    });\n  });\n  \n  // Add handlers for color input to update hex input and main display\n  document.querySelectorAll('.color-input').forEach(colorInput => {\n    // Remove existing handlers by replacing with clone\n    const newColorInput = colorInput.cloneNode(true);\n    if (colorInput.parentNode) {\n      colorInput.parentNode.replaceChild(newColorInput, colorInput);\n    }\n    \n    // Add handler for when color is changed with the color picker\n    newColorInput.addEventListener('input', function(e) {\n      const settingId = this.id;\n      const colorValue = this.value;\n      \n      console.log(`Color input change: ${settingId} = ${colorValue}`);\n      \n      // Update hex input\n      const hexInput = document.querySelector(`#${settingId}-hex`);\n      if (hexInput) {\n        hexInput.value = colorValue;\n        console.log(`Updated hex input for ${settingId} to ${colorValue}`);\n      }\n      \n      // Clear any selected CSS variable\n      this.setAttribute('data-used-var', '');\n      \n      // Update the displayed color\n      const colorDisplay = document.querySelector(`.color-picker-compact[data-setting-id=\"${settingId}\"] .current-color-display`);\n      if (colorDisplay) {\n        colorDisplay.style.backgroundColor = colorValue;\n        console.log(`Updated color display to ${colorValue} from color picker`);\n      }\n      \n      // Remove any selected swatch\n      const picker = this.closest('.color-picker-group');\n      if (picker) {\n        picker.querySelectorAll('.color-swatch').forEach(s => {\n          s.classList.remove('selected');\n        });\n      }\n      \n      // Trigger the hasUnsavedChanges flag in the settings panel\n      if (window.SettingsPanel) {\n        window.SettingsPanel.hasUnsavedChanges = true;\n        window.SettingsPanel.updateNotificationState();\n        console.log('Triggered unsaved changes notification from color picker');\n      }\n    });\n  });\n\n  // Make sure expanded containers prevent click propagation\n  document.querySelectorAll('.color-picker-expanded').forEach(expanded => {\n    expanded.addEventListener('click', function(e) {\n      // Stop propagation to prevent document click handler from closing it\n      e.stopPropagation();\n    });\n  });\n  \n  console.log('SquareHero: Color swatch initialization complete');\n}\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/modules/index.js?")},"./src/modules/licensing/licensing-system.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/local-storage-service.js */ "./src/modules/core/local-storage-service.js");\n/**\n * Licensing System Module\n * Manages plugin licensing and trials\n */\n\n\n\n// Licensing System module\nconst LicensingSystem = {\n    // Initialize the licensing system\n    initialize: function() {\n        console.log(\'Initializing LicensingSystem module\');\n        return true;\n    },\n    \n    // Check the licensing status for a plugin\n    getPluginData: async function(pluginId) {\n        // Check if the global licensing system is available\n        if (window.SquareHeroLicensing && window.SquareHeroLicensing._initialized) {\n            try {\n                return await window.SquareHeroLicensing.getPluginData(pluginId);\n            } catch (error) {\n                console.error(`Error getting license data for ${pluginId}:`, error);\n                return { status: \'inactive\' };\n            }\n        }\n        \n        // If global licensing system is not available, check LocalStorage directly\n        try {\n            // Make sure LocalStorage is initialized\n            await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].initialize();\n            \n            // Get the current user\n            const user = _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].getCurrentUser();\n            if (!user || !user.email) {\n                console.warn("Cannot check license - no user email");\n                return { status: \'inactive\' };\n            }\n            \n            // Get safe key\n            const safeName = this.getSafeFirebaseKey(user.email);\n            \n            // Get plugin settings which may contain license data\n            const settings = await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].getPluginSettings(pluginId, {});\n            \n            // If we have license data in settings, use it\n            if (settings?.licenseStatus) {\n                return {\n                    status: settings.licenseStatus,\n                    trialEnd: settings.trialEnd,\n                    daysRemaining: settings.trialDaysRemaining\n                };\n            }\n            \n            return { status: \'inactive\' };\n        } catch (error) {\n            console.error(`Error checking license status for ${pluginId}:`, error);\n            return { status: \'inactive\' };\n        }\n    },\n    \n    // Activate a license for a plugin\n    activateLicense: async function(pluginId, licenseKey) {\n        // Check if the global licensing system is available\n        if (window.SquareHeroLicensing && window.SquareHeroLicensing._initialized) {\n            try {\n                return await window.SquareHeroLicensing.activateLicense(pluginId, licenseKey);\n            } catch (error) {\n                console.error(`Error activating license for ${pluginId}:`, error);\n                return { success: false, error: error.message };\n            }\n        }\n        \n        // If global licensing system is not available, use a direct implementation\n        try {\n            // Make sure LocalStorage is initialized\n            await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].initialize();\n            \n            // Get the current user\n            const user = _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].getCurrentUser();\n            if (!user || !user.email) {\n                return { success: false, error: "No user email found" };\n            }\n            \n            // Simulate license validation\n            // In a real implementation, this would involve a server call\n            console.log(`Simulating license activation for ${pluginId} with key ${licenseKey}`);\n            \n            // For demonstration, consider any license key valid if it\'s at least 8 characters\n            if (licenseKey.length < 8) {\n                return { success: false, error: "Invalid license key format" };\n            }\n            \n            // Get existing settings\n            const settings = await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].getPluginSettings(pluginId) || {};\n            \n            // Update settings with license data\n            const updatedSettings = {\n                ...settings,\n                licenseStatus: \'authorized\',\n                licenseKey: licenseKey,\n                activatedAt: new Date().toISOString()\n            };\n            \n            // Save updated settings\n            const saveResult = await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].updatePluginSettings(pluginId, updatedSettings);\n            \n            if (saveResult) {\n                return { success: true };\n            } else {\n                return { success: false, error: "Failed to save license data" };\n            }\n        } catch (error) {\n            console.error(`Error activating license for ${pluginId}:`, error);\n            return { success: false, error: error.message };\n        }\n    },\n    \n    // Start a trial for a plugin\n    startTrial: async function(pluginId) {\n        // Check if the global licensing system is available\n        if (window.SquareHeroLicensing && window.SquareHeroLicensing._initialized) {\n            try {\n                return await window.SquareHeroLicensing.startTrial(pluginId);\n            } catch (error) {\n                console.error(`Error starting trial for ${pluginId}:`, error);\n                return { success: false, error: error.message };\n            }\n        }\n        \n        // If global licensing system is not available, use a direct implementation\n        try {\n            // Make sure LocalStorage is initialized\n            await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].initialize();\n            \n            // Get the current user\n            const user = _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].getCurrentUser();\n            if (!user || !user.email) {\n                return { success: false, error: "No user email found" };\n            }\n            \n            console.log(`Starting trial for ${pluginId}`);\n            \n            // Calculate trial end date (14 days from now)\n            const trialEndDate = new Date();\n            trialEndDate.setDate(trialEndDate.getDate() + 14);\n            \n            // Get existing settings\n            const settings = await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].getPluginSettings(pluginId) || {};\n            \n            // Update settings with trial data\n            const updatedSettings = {\n                ...settings,\n                licenseStatus: \'trial\',\n                trialStart: new Date().toISOString(),\n                trialEnd: trialEndDate.toISOString(),\n                trialDaysRemaining: 14\n            };\n            \n            // Save updated settings\n            const saveResult = await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].updatePluginSettings(pluginId, updatedSettings);\n            \n            if (saveResult) {\n                return { success: true };\n            } else {\n                return { success: false, error: "Failed to save trial data" };\n            }\n        } catch (error) {\n            console.error(`Error starting trial for ${pluginId}:`, error);\n            return { success: false, error: error.message };\n        }\n    },\n    \n    // Deactivate a license for a plugin\n    deactivateLicense: async function(pluginId) {\n        // Check if the global licensing system is available\n        if (window.SquareHeroLicensing && window.SquareHeroLicensing._initialized) {\n            try {\n                return await window.SquareHeroLicensing.deactivateLicense(pluginId);\n            } catch (error) {\n                console.error(`Error deactivating license for ${pluginId}:`, error);\n                return { success: false, error: error.message };\n            }\n        }\n        \n        // If global licensing system is not available, use a direct implementation\n        try {\n            // Make sure LocalStorage is initialized\n            await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].initialize();\n            \n            console.log(`Deactivating license for ${pluginId}`);\n            \n            // Get existing settings\n            const settings = await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].getPluginSettings(pluginId) || {};\n            \n            // Calculate trial end date (14 days from now for a new trial)\n            const trialEndDate = new Date();\n            trialEndDate.setDate(trialEndDate.getDate() + 14);\n            \n            // Update settings to revert to trial\n            const updatedSettings = {\n                ...settings,\n                licenseStatus: \'trial\',\n                licenseKey: null,\n                activatedAt: null,\n                trialStart: new Date().toISOString(),\n                trialEnd: trialEndDate.toISOString(),\n                trialDaysRemaining: 14\n            };\n            \n            // Save updated settings\n            const saveResult = await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_0__["default"].updatePluginSettings(pluginId, updatedSettings);\n            \n            if (saveResult) {\n                return { success: true };\n            } else {\n                return { success: false, error: "Failed to deactivate license" };\n            }\n        } catch (error) {\n            console.error(`Error deactivating license for ${pluginId}:`, error);\n            return { success: false, error: error.message };\n        }\n    },\n    \n    // Get safe key (remove special characters from email)\n    getSafeFirebaseKey: function(email) {\n        if (!email) return \'\';\n        return email.replace(/[.#$[\\]]/g, \'_\');\n    }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LicensingSystem);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/modules/licensing/licensing-system.js?')},"./src/modules/ui/cards.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PluginCards: () => (/* binding */ PluginCards)\n/* harmony export */ });\n/* harmony import */ var _core_dashboard_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/dashboard-core.js */ \"./src/modules/core/dashboard-core.js\");\n/**\n * Cards Module\n * Handles rendering plugin cards in the dashboard\n */\n\n\n\n// PluginCards module for the dashboard\nconst PluginCards = {\n    // Instance properties\n    installedPlugins: [],\n\n    // Initialize the cards module\n    initialize: function (plugins = []) {\n        console.log('Initializing PluginCards module');\n        this.installedPlugins = plugins;\n        return true;\n    },\n\n    // Render plugin cards\n    renderPluginCards: async function () {\n        console.log('🔍 [DEBUG-RENDER] PluginCards.renderPluginCards with installedPlugins:', this.installedPlugins?.length);\n\n        const pluginCardsContainer = document.getElementById('plugin-cards-container');\n\n        if (!this.installedPlugins || !this.installedPlugins.length) {\n            pluginCardsContainer.innerHTML = '<p>No plugins installed on this site. Visit the SquareHero plugin store to browse available plugins.</p>';\n            return;\n        }\n\n        // Process each plugin and create its card\n        try {\n            const cards = await Promise.all(this.installedPlugins.map(plugin => this.createPluginCard(plugin)));\n\n            console.log('🔍 [DEBUG-RENDER] Card creation promises resolved, about to update DOM');\n\n            // Clear any existing content\n            pluginCardsContainer.innerHTML = '';\n\n            // Add each card to the container\n            cards.forEach(card => {\n                if (card) {\n                    const pluginId = card.getAttribute('data-plugin-id');\n                    const plugin = this.installedPlugins.find(p => p.id === pluginId);\n                    const status = plugin?.status || 'unknown';\n                    console.log(`🔍 [DEBUG-RENDER] Adding card for ${pluginId} with status: ${status}`);\n                    pluginCardsContainer.appendChild(card);\n                }\n            });\n\n            // If no cards were added, show a message\n            if (pluginCardsContainer.children.length === 0) {\n                pluginCardsContainer.innerHTML = '<p>No plugins available.</p>';\n                console.log('🔍 [DEBUG-RENDER] No cards were created, showing \"No plugins available\" message');\n            } else {\n                console.log('🔍 [DEBUG-RENDER] Added cards to DOM, total count:', pluginCardsContainer.children.length);\n            }\n        } catch (error) {\n            console.error('Error rendering plugin cards:', error);\n            pluginCardsContainer.innerHTML = '<p>Error loading plugins. Please try again later.</p>';\n        }\n    },\n\n    /**\n     * Create a plugin card element\n     */\n    createPluginCard(plugin, index) {\n        try {\n            // If plugin has no settings, show error card\n            if (!plugin.settings) {\n                console.error(`⛔ [ERROR] No settings found for plugin ${plugin.id}. Showing error card.`);\n\n                // Create default settings for the plugin to avoid errors\n                plugin.settings = { enabled: true };\n                plugin.status = 'enabled';\n            }\n\n            // Use plugin.status if available, otherwise derive from settings\n            const status = plugin.status || (plugin.settings?.enabled !== false ? 'enabled' : 'disabled');\n\n            // Create card element\n            const card = document.createElement('div');\n            card.className = 'plugin-card';\n            card.setAttribute('data-plugin-id', plugin.id);\n            card.setAttribute('tabindex', '0');  // Make focusable for keyboard navigation\n\n            // Create card HTML structure\n            card.innerHTML = `\n            <div class=\"plugin-header\">\n                <div class=\"plugin-icon\">\n                    <img src=\"${plugin.icon || 'default-icon.svg'}\" alt=\"${plugin.name} icon\">\n                </div>\n                <span class=\"plugin-status status-${status}\">${status.toUpperCase()}</span>\n                </div>\n                <div class=\"plugin-info\">\n                    <h3 class=\"plugin-name\">${plugin.name}</h3>\n                    <p class=\"plugin-description\">${plugin.description || 'No description available'}</p>\n                </div>\n            `;\n\n            // Add click event to open settings\n            card.addEventListener('click', () => {\n                console.log(`Plugin card clicked: ${plugin.id}`);\n\n                // Use Dashboard.loadPluginSettingsModule to open the settings panel\n                if (window.Dashboard && typeof window.Dashboard.loadPluginSettingsModule === 'function') {\n                    window.Dashboard.loadPluginSettingsModule(plugin.id);\n                } else if (window.SettingsPanel && typeof window.SettingsPanel.openSettingsPanel === 'function') {\n                    window.SettingsPanel.openSettingsPanel(plugin.id, window.installedPlugins || []);\n                } else {\n                    console.error(`Cannot open settings panel for ${plugin.id} - required modules not found`);\n                }\n            });\n\n            // Add keyboard event for accessibility\n            card.addEventListener('keydown', (event) => {\n                if (event.key === 'Enter' || event.key === ' ') {\n                    event.preventDefault();\n                    card.click(); // Trigger the click event\n                }\n            });\n\n            return card;\n        } catch (error) {\n            console.error(`Error creating plugin card for ${plugin?.id || 'unknown'}:`, error);\n\n            // Return a fallback error card\n            const errorCard = document.createElement('div');\n            errorCard.className = 'plugin-card error-card';\n            errorCard.innerHTML = `\n                <div class=\"plugin-info\">\n                    <h3 class=\"plugin-name\">Error: ${plugin?.name || 'Unknown Plugin'}</h3>\n                    <p class=\"plugin-description\">There was an error loading this plugin.</p>\n                </div>\n            `;\n            return errorCard;\n        }\n    },\n\n    // Render empty state when no plugins are installed\n    renderEmptyState: function (container) {\n        const emptyState = document.createElement('div');\n        emptyState.className = 'empty-state';\n\n        const icon = document.createElement('div');\n        icon.className = 'empty-icon';\n        icon.innerHTML = '<svg width=\"64\" height=\"64\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M19 21V5a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v16\"></path><path d=\"M19 21H5\"></path><path d=\"M12 12h.01\"></path></svg>';\n\n        const title = document.createElement('h3');\n        title.textContent = 'No plugins installed';\n\n        const description = document.createElement('p');\n        description.textContent = 'Discover and install plugins to enhance your website.';\n\n        const browseButton = document.createElement('button');\n        browseButton.className = 'primary-button';\n        browseButton.textContent = 'Browse Plugins';\n        browseButton.addEventListener('click', () => {\n            // Find the \"Discover Plugins\" tab and click it\n            const discoverTab = document.querySelector('.dashboard-tab[data-tab=\"discover-plugins\"]');\n            if (discoverTab) {\n                discoverTab.click();\n            }\n        });\n\n        emptyState.appendChild(icon);\n        emptyState.appendChild(title);\n        emptyState.appendChild(description);\n        emptyState.appendChild(browseButton);\n\n        container.appendChild(emptyState);\n    }\n};\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/modules/ui/cards.js?")},"./src/modules/ui/discover-plugins.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DiscoverPlugins: () => (/* binding */ DiscoverPlugins)\n/* harmony export */ });\n/* harmony import */ var _core_notification_system_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/notification-system.js */ \"./src/modules/core/notification-system.js\");\n/**\n * Discover Plugins Module\n * Handles rendering and interactions for the plugin store\n */\n\n\n\n// DiscoverPlugins module for the dashboard\nconst DiscoverPlugins = {\n    // Initialize the discover plugins module\n    initialize: function(availablePlugins = [], installedPlugins = []) {\n        console.log('Initializing DiscoverPlugins module');\n        this.availablePlugins = availablePlugins;\n        this.installedPlugins = installedPlugins;\n        return true;\n    },\n    \n    // Render all available plugins for discovery\n    renderDiscoverPluginCards: function(availablePlugins, installedPlugins) {\n        // Update local references if provided\n        if (availablePlugins) this.availablePlugins = availablePlugins;\n        if (installedPlugins) this.installedPlugins = installedPlugins;\n        \n        const discoverPluginsContainer = document.getElementById('discover-plugins-content');\n\n        console.log('🔍 [DEBUG-DISCOVER] Starting renderDiscoverPluginCards');\n        console.log('🔍 [DEBUG-DISCOVER] Available plugins count:', this.availablePlugins?.length);\n        console.log('🔍 [DEBUG-DISCOVER] Installed plugins count:', this.installedPlugins?.length);\n\n        if (!this.availablePlugins || !this.availablePlugins.length) {\n            console.log('🔍 [DEBUG-DISCOVER] No available plugins found');\n            discoverPluginsContainer.innerHTML = '<p>No plugins available to discover.</p>';\n            return;\n        }\n\n        // Create a grid for discover plugins\n        const pluginGrid = document.createElement('div');\n        pluginGrid.id = 'discover-plugins-grid';\n        pluginGrid.className = 'discover-plugins-grid';\n\n        console.log('🔍 [DEBUG-DISCOVER] Installed plugin IDs:', this.installedPlugins.map(p => p.id));\n\n        // Filter available plugins to only include those that aren't already installed\n        const pluginsToDiscover = this.availablePlugins.filter(plugin => {\n            const isInstalled = this.installedPlugins.some(p => p.id === plugin.id);\n            console.log(`🔍 [DEBUG-DISCOVER] Plugin ${plugin.id}: installed=${isInstalled}`);\n            return !isInstalled; // Only include plugins that are NOT installed\n        });\n\n        // If no plugins to discover, show a message\n        if (pluginsToDiscover.length === 0) {\n            console.log('🔍 [DEBUG-DISCOVER] No plugins to discover after filtering out installed plugins');\n            discoverPluginsContainer.innerHTML = '<p>You have installed all available plugins. Check back soon for new additions!</p>';\n            return;\n        }\n\n        // Process each plugin to discover\n        pluginsToDiscover.forEach(plugin => {\n            const card = document.createElement('div');\n            card.className = 'discover-plugin-card';\n            card.setAttribute('data-plugin-id', plugin.id);\n\n            // Create the inner card container for the flip effect\n            const cardInner = document.createElement('div');\n            cardInner.className = 'card-inner';\n\n            // Create the front side of the card\n            const cardFront = document.createElement('div');\n            cardFront.className = 'card-front';\n            cardFront.innerHTML = `\n                <div class=\"discover-plugin-icon\">\n                    <img src=\"${plugin.icon}\" alt=\"${plugin.name} icon\">\n                </div>\n                <div class=\"discover-plugin-content\">\n                    <h3 class=\"discover-plugin-title\">${plugin.name}</h3>\n                    <p class=\"discover-plugin-description\">${plugin.description}</p>\n                    <div class=\"discover-plugin-actions\">\n                        <button class=\"sh-button activate-license\" data-plugin-id=\"${plugin.id}\">\n                            Activate License\n                        </button>\n                        <button class=\"sh-primary-button install-plugin\" data-plugin-id=\"${plugin.id}\">\n                            Get Started\n                        </button>\n                        <p class=\"fine-print\">14 day free trial. No credit card required.</p>\n                    </div>\n                </div>\n            `;\n\n            // Create the \"get started\" back side of the card\n            const cardBack = document.createElement('div');\n            cardBack.className = 'card-back get-started-card';\n            cardBack.innerHTML = `\n                <div class=\"discover-plugin-icon\">\n                    <img src=\"${plugin.icon}\" alt=\"${plugin.name} icon\">\n                </div>\n                <div class=\"discover-plugin-content\">\n                    <h4 class=\"plugin-name-eyebrow\">${plugin.name}</h4>\n                    <h3 class=\"discover-plugin-title\">Take this plugin for a full test drive, no strings attached</h3>\n                    <ul class=\"discover-plugin-description\">\n  <li>Instant 100% code-free installation is just a click away</li>\n  <li>Complete access to all features</li>\n  <li>14-day trial with no credit card or email required</li>\n</ul>\n                    <div class=\"discover-plugin-actions\">\n                        <button class=\"sh-primary-button install-now\" data-plugin-id=\"${plugin.id}\">\n                            Install Now\n                        </button>\n                    </div>\n                </div>\n            `;\n            \n            // Create the \"license activation\" back side of the card\n            const licenseCard = document.createElement('div');\n            licenseCard.className = 'card-back license-card';\n            licenseCard.innerHTML = `\n                <div class=\"discover-plugin-icon\">\n                    <img src=\"${plugin.icon}\" alt=\"${plugin.name} icon\">\n                </div>\n                <div class=\"discover-plugin-content\">\n                    <h4 class=\"plugin-name-eyebrow\">Food & Drink Menu Manager</h4>\n                    <h3 class=\"discover-plugin-title\">Enter your license key</h3>\n                    <div class=\"license-input-wrapper\">\n                        <input type=\"text\" class=\"license-key-input\" placeholder=\"XXXX-XXXX-XXXX-XXXX\" />\n                        <p class=\"license-help-text\">Your license key was sent to your email address after purchase</p>\n                    </div>\n                    <div class=\"discover-plugin-actions\">\n                        <button class=\"sh-primary-button activate-now\" data-plugin-id=\"${plugin.id}\">\n                            ACTIVATE LICENSE\n                        </button>\n                        <p class=\"fine-print license-link\">Don't have a license yet? <a href=\"#\" class=\"purchase-license-link\">Purchase now</a></p>\n                    </div>\n                </div>\n            `;\n\n            // Add the front and back sides to the card inner element\n            cardInner.appendChild(cardFront);\n            cardInner.appendChild(cardBack);\n            cardInner.appendChild(licenseCard);\n\n            // Add the card inner to the card container\n            card.appendChild(cardInner);\n\n            // Add the complete card to the grid\n            pluginGrid.appendChild(card);\n        });\n\n        discoverPluginsContainer.innerHTML = '';\n        discoverPluginsContainer.appendChild(pluginGrid);\n        console.log('🔍 [DEBUG-DISCOVER] Finished rendering discover plugins');\n\n        // Add event listeners for card interactions after all cards are in the DOM\n        this.addDiscoverCardEventListeners();\n    },\n\n    // Add event listeners for discover card interactions\n    addDiscoverCardEventListeners: function() {\n        // Get all the Get Started buttons\n        const getStartedButtons = document.querySelectorAll('.discover-plugin-card .install-plugin');\n        const installNowButtons = document.querySelectorAll('.discover-plugin-card .install-now');\n        const activateLicenseButtons = document.querySelectorAll('.discover-plugin-card .activate-license');\n        \n        // Helper function to reset all flipped cards\n        const resetAllFlippedCards = (exceptCardId = null) => {\n            const flippedCards = document.querySelectorAll('.discover-plugin-card.flipped');\n            flippedCards.forEach(card => {\n                // Skip the current card if an exception was provided\n                if (exceptCardId && card.getAttribute('data-plugin-id') === exceptCardId) {\n                    return;\n                }\n                card.classList.remove('flipped');\n                card.classList.remove('flipped-license');\n            });\n        };\n\n        // Add click event to Get Started buttons to flip the card\n        getStartedButtons.forEach(button => {\n            button.addEventListener('click', function (event) {\n                event.stopPropagation(); // Prevent event bubbling\n                const card = this.closest('.discover-plugin-card');\n                if (card) {\n                    const pluginId = this.getAttribute('data-plugin-id');\n                    // Reset all other flipped cards first\n                    resetAllFlippedCards(pluginId);\n                    // Then flip this card\n                    card.classList.add('flipped');\n                }\n            });\n        });\n\n        // Add click event to Install Now buttons\n        installNowButtons.forEach(button => {\n            button.addEventListener('click', async function (event) {\n                event.stopPropagation(); // Prevent event bubbling\n                const pluginId = this.getAttribute('data-plugin-id');\n                console.log('Installing plugin with ID:', pluginId);\n\n                // Show installing state\n                const originalText = this.textContent.trim();\n                this.disabled = true;\n                this.textContent = \"Installing...\";\n\n                try {\n                    // Call the function to install the plugin via code injection\n                    const result = await DiscoverPlugins.installPluginViaCodeInjection(pluginId);\n\n                    if (result && result.success) {\n                        this.textContent = \"Installed ✓\";\n                        this.classList.add(\"success\");\n\n                        // Show a success message\n                        const messageElement = document.createElement('div');\n                        messageElement.className = 'install-success-message';\n                        messageElement.innerHTML = `\n                            <p>✅ Install successfull</p>\n                            <p>Refresh the page to see the plugin in your dashboard.</p>\n                        `;\n\n                        const actionsContainer = this.closest('.discover-plugin-actions');\n                        if (actionsContainer) {\n                            actionsContainer.appendChild(messageElement);\n                        }\n\n                        // Hide any fine print\n                        const finePrint = this.closest('.discover-plugin-actions').querySelector('.fine-print');\n                        if (finePrint) {\n                            finePrint.style.display = 'none';\n                        }\n                    } else {\n                        throw new Error(result?.error || 'Installation failed');\n                    }\n                } catch (error) {\n                    console.error(`Error installing plugin ${pluginId}:`, error);\n                    this.textContent = \"Installation failed\";\n                    this.classList.add(\"error\");\n\n                    // Show error details\n                    const messageElement = document.createElement('div');\n                    messageElement.className = 'install-error-message';\n                    messageElement.innerHTML = `\n                        <p>❌ Error: ${error.message || 'Could not install plugin'}</p>\n                        <button class=\"retry-install\">Retry</button>\n                    `;\n\n                    const actionsContainer = this.closest('.discover-plugin-actions');\n                    if (actionsContainer) {\n                        actionsContainer.appendChild(messageElement);\n\n                        // Add retry button functionality\n                        const retryButton = messageElement.querySelector('.retry-install');\n                        if (retryButton) {\n                            retryButton.addEventListener('click', (e) => {\n                                e.stopPropagation();\n                                // Remove error message\n                                messageElement.remove();\n                                // Reset button\n                                this.disabled = false;\n                                this.textContent = originalText;\n                                this.classList.remove(\"error\");\n                            });\n                        }\n                    }\n                }\n            });\n        });\n\n        // Add click event to Activate License buttons\n        activateLicenseButtons.forEach(button => {\n            button.addEventListener('click', function (event) {\n                event.stopPropagation(); // Prevent event bubbling\n                const pluginId = this.getAttribute('data-plugin-id');\n                console.log('Activating license for plugin with ID:', pluginId);\n                \n                // Get the card and add special flipped-license class\n                const card = this.closest('.discover-plugin-card');\n                if (card) {\n                    // Reset all other flipped cards first\n                    resetAllFlippedCards(pluginId);\n                    // Then flip this card with license view\n                    card.classList.add('flipped');\n                    card.classList.add('flipped-license'); // Add class to show license card\n                }\n            });\n        });\n        \n        // Add click event to Activate Now buttons (on the license card)\n        const activateNowButtons = document.querySelectorAll('.discover-plugin-card .activate-now');\n        activateNowButtons.forEach(button => {\n            button.addEventListener('click', function (event) {\n                event.stopPropagation(); // Prevent event bubbling\n                const pluginId = this.getAttribute('data-plugin-id');\n                const card = this.closest('.discover-plugin-card');\n                const licenseInput = card.querySelector('.license-key-input');\n                const licenseKey = licenseInput ? licenseInput.value.trim() : '';\n                \n                if (!licenseKey) {\n                    // Show validation error\n                    licenseInput.classList.add('error');\n                    return;\n                }\n                \n                console.log(`Activating license key ${licenseKey} for plugin ID: ${pluginId}`);\n                \n                // Show activating state\n                const originalText = this.textContent.trim();\n                this.disabled = true;\n                this.textContent = \"Activating...\";\n                \n                // Get plugin info for the notification\n                const plugin = DiscoverPlugins.availablePlugins.find(p => p.id === pluginId);\n                const pluginName = plugin ? plugin.name : 'Plugin';\n                \n                console.log(`[DEBUG] About to activate license for ${pluginName} (${pluginId})`);\n                \n                // TODO: Implement actual license activation with server\n                // For now simulate activation process\n                setTimeout(() => {\n                    // Show success message\n                    this.textContent = \"Activated ✓\";\n                    this.classList.add(\"success\");\n                    \n                    console.log(`[DEBUG] Calling NotificationSystem.showLicense for ${pluginName}`);\n                    // Show hexagon notification for license activation\n                    _core_notification_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].showLicense(`${pluginName} license successfully activated`);\n                    console.log(`[DEBUG] After calling NotificationSystem.showLicense`);\n                    \n                    // Hide purchase link\n                    const purchaseLink = this.closest('.discover-plugin-actions').querySelector('.license-link');\n                    if (purchaseLink) {\n                        purchaseLink.style.display = 'none';\n                    }\n                }, 1500);\n            });\n        });\n\n        // Prevent cards from flipping back when clicking on the card itself\n        const cardsBackSides = document.querySelectorAll('.discover-plugin-card .card-back');\n        cardsBackSides.forEach(cardBack => {\n            cardBack.addEventListener('click', function(event) {\n                // Stop propagation to prevent document click handler from triggering\n                event.stopPropagation();\n            });\n        });\n        \n        // Prevent inputs from triggering card flip\n        const licenseInputs = document.querySelectorAll('.discover-plugin-card .license-key-input');\n        licenseInputs.forEach(input => {\n            input.addEventListener('click', function(event) {\n                event.stopPropagation(); \n            });\n            \n            // Also prevent focus events from bubbling\n            input.addEventListener('focus', function(event) {\n                event.stopPropagation();\n            });\n        });\n\n        // Add click event to document to flip cards back when clicking outside\n        document.addEventListener('click', function (event) {\n            // Check if the click was outside of any flipped card\n            resetAllFlippedCards();\n        });\n    },\n\n    // Function to install plugin via Squarespace code injection\n    installPluginViaCodeInjection: async function(pluginId) {\n        console.log(`Starting installation for ${pluginId} via code injection`);\n\n        try {\n            // Find the plugin data from available plugins\n            const plugin = this.availablePlugins.find(p => p.id === pluginId);\n            if (!plugin) {\n                throw new Error(`Plugin ${pluginId} not found in available plugins`);\n            }\n\n            // Check if plugin has installation script\n            if (!plugin.install) {\n                throw new Error(`Plugin ${pluginId} does not have installation code defined`);\n            }\n\n            // Get the CSRF crumb from cookies\n            const crumb = document.cookie.split(';')\n                .find(c => c.trim().startsWith('crumb='))\n                ?.split('=')[1];\n\n            if (!crumb) {\n                console.error(\"Could not find crumb cookie\");\n                return { success: false, error: \"Authentication required. Please login to Squarespace first.\" };\n            }\n\n            // First, retrieve current injection settings\n            const settingsResponse = await fetch(`${window.location.origin}/api/config/GetInjectionSettings`, {\n                method: \"GET\",\n                headers: {\n                    \"x-csrf-token\": crumb,\n                    \"accept\": \"application/json, text/plain, */*\"\n                },\n                credentials: \"include\"\n            });\n\n            if (!settingsResponse.ok) {\n                throw new Error(`Failed to get injection settings: ${settingsResponse.status} ${settingsResponse.statusText}`);\n            }\n\n            const currentSettings = await settingsResponse.json();\n            console.log(\"Current Injection Settings:\", currentSettings);\n\n            // Get plugin installation code from the plugin data\n            const pluginCode = plugin.install;\n\n            // Check if this plugin is already installed\n            if (currentSettings.header && currentSettings.header.includes(`data-squarehero-plugin=\"${pluginId}\"`)) {\n                console.log(`Plugin ${pluginId} is already installed.`);\n                return { success: false, error: \"This plugin is already installed on your site.\" };\n            }\n\n            // Prepare form-urlencoded body with updated content\n            const formBody = new URLSearchParams({\n                header: (currentSettings.header || '') + pluginCode,\n                footer: currentSettings.footer || '',\n                lockPage: currentSettings.lockPage || '',\n                postItem: currentSettings.postItem || ''\n            });\n\n            // Save updated settings\n            const saveResponse = await fetch(`${window.location.origin}/api/config/SaveInjectionSettings`, {\n                method: \"POST\",\n                headers: {\n                    \"content-type\": \"application/x-www-form-urlencoded\",\n                    \"x-csrf-token\": crumb\n                },\n                body: formBody.toString(),\n                credentials: \"include\"\n            });\n\n            if (!saveResponse.ok) {\n                throw new Error(`Failed to save injection settings: ${saveResponse.status} ${saveResponse.statusText}`);\n            }\n\n            console.log(\"Plugin installation successful!\");\n            \n            // Show the hexagon notification for plugin installation\n            _core_notification_system_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].showInstall(`${plugin.name} plugin installed successfully`);\n            \n            return { success: true };\n\n        } catch (error) {\n            console.error(\"Error installing plugin via code injection:\", error);\n            return {\n                success: false,\n                error: error.message || \"Failed to install plugin. Please try again later.\"\n            };\n        }\n    },\n    \n    // Remove the old methods that don't follow the original implementation\n    renderEmptyState: null,\n    renderStorePlugins: null,\n    filterPlugins: null,\n    renderPluginCards: null,\n    createStorePluginCard: null\n};\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/modules/ui/discover-plugins.js?")},"./src/modules/ui/settings-panel.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SettingsPanel: () => (/* binding */ SettingsPanel)\n/* harmony export */ });\n/* harmony import */ var _core_dashboard_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/dashboard-core.js */ "./src/modules/core/dashboard-core.js");\n/* harmony import */ var _core_squarespace_storage_service_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/squarespace-storage-service.js */ "./src/modules/core/squarespace-storage-service.js");\n/* harmony import */ var _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/local-storage-service.js */ "./src/modules/core/local-storage-service.js");\n/* harmony import */ var _core_plugin_registry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../core/plugin-registry.js */ "./src/modules/core/plugin-registry.js");\n/* harmony import */ var _components_settings_components_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../components/settings-components.js */ "./src/components/settings-components.js");\n/**\n * Settings Panel Module\n * Handles rendering and managing plugin settings panels\n */\n\n\n\n\n\n // Import the SettingsComponents module\n\n// SettingsPanel module\nconst SettingsPanel = {\n    // State properties\n    activePanel: null,\n    hasUnsavedChanges: false,\n    notificationBar: null,\n    notificationTimeout: null,\n    attentionTimeout: null,\n    loadingStates: {},\n    \n    // Initialize the settings panel module\n    initialize: function() {\n        console.log(\'Initializing SettingsPanel module\');\n        \n        // Make SettingsComponents globally available for backward compatibility\n        window.SettingsComponents = _components_settings_components_js__WEBPACK_IMPORTED_MODULE_4__["default"];\n        console.log(\'SettingsComponents exposed to window object\');\n        \n        // Add event listeners for ESC key to handle unsaved changes\n        document.addEventListener(\'keydown\', (event) => {\n            if (event.key === \'Escape\' && this.hasUnsavedChanges) {\n                console.log(\'ESC key pressed with unsaved changes\');\n                event.preventDefault();\n                event.stopPropagation();\n                this.showAttention();\n            }\n        });\n        \n        // Add overlay click handler to trigger attention animation if there are unsaved changes\n        const overlay = document.getElementById(\'overlay\');\n        if (overlay) {\n            overlay.addEventListener(\'click\', (event) => {\n                if (this.hasUnsavedChanges) {\n                    console.log(\'Overlay clicked with unsaved changes\');\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.showAttention();\n                }\n            });\n        }\n        \n        return true;\n    },\n    \n    // Open settings panel for a plugin\n    openSettingsPanel: function(pluginId, installedPlugins) {\n        try {\n            // Get the plugin data\n            const plugin = installedPlugins.find(p => p.id === pluginId);\n            if (!plugin) {\n                throw new Error(`Plugin ${pluginId} not found`);\n            }\n\n            // Reset unsaved changes flag for new panel\n            this.hasUnsavedChanges = false;\n            this.hideNotification();\n\n            const settingsPanel = document.getElementById(\'settings-panel\');\n            const panelContent = document.getElementById(\'panel-content\');\n            const overlay = document.getElementById(\'overlay\');\n\n            // Show panel immediately with loading state\n            settingsPanel.classList.add(\'visible\');\n\n            // Add panel width class based on plugin setting\n            settingsPanel.classList.remove(\'panel-width-half\', \'panel-width-full\');\n            const panelWidth = plugin.panelWidth || \'half\';\n            settingsPanel.classList.add(`panel-width-${panelWidth}`);\n\n            overlay.classList.add(\'visible\');\n            settingsPanel.setAttribute(\'aria-hidden\', \'false\');\n\n            const pluginSettingsTitle = document.getElementById(\'plugin-settings-title\');\n            if (pluginSettingsTitle) {\n                pluginSettingsTitle.textContent = `${plugin.name}`;\n            }\n\n            // Show skeleton loading for settings panel\n            if (window.SkeletonLoader) {\n                this.loadingStates.settings = window.SkeletonLoader.show(\'panel-content\', \'settingsPanel\');\n            } else {\n                // Show a simple loading indicator if skeleton loader is not available\n                panelContent.innerHTML = \'<div class="loading-indicator"><p>Loading settings...</p></div>\';\n            }\n\n            // Set active panel\n            this.activePanel = pluginId;\n\n            // Explicitly set and expose the active panel ID globally\n            window.activePanel = pluginId;\n            console.log(\'Active panel ID globally exposed:\', window.activePanel);\n\n            // Also set data attribute on the panel for easier detection\n            if (settingsPanel) {\n                settingsPanel.setAttribute(\'data-plugin-id\', pluginId);\n                console.log(\'Added data-plugin-id attribute to settings panel\');\n            }\n\n            // Update URL hash for direct linking to this plugin\'s settings\n            // Use the preferred plugins:pluginId format to maintain tab state\n            this.updateUrlHash(`plugins:${pluginId}`);\n\n            // Generate settings panel UI\n            this.renderPluginSettings(plugin, panelContent, installedPlugins);\n        } catch (error) {\n            console.error(`Error opening settings panel for plugin ${pluginId}:`, error);\n            \n            // Show error message\n            const settingsPanel = document.getElementById(\'settings-panel\');\n            const panelContent = document.getElementById(\'panel-content\');\n            settingsPanel.classList.add(\'visible\');\n            \n            // Hide skeleton loading if it was shown\n            if (this.loadingStates.settings) {\n                this.loadingStates.settings.hide();\n            }\n\n            panelContent.innerHTML = `\n                <div class="error-message">\n                    <p>Error loading settings for this plugin.</p>\n                    <button class="button cancel-button">Close</button>\n                </div>\n            `;\n\n            const cancelButton = panelContent.querySelector(\'.cancel-button\');\n            if (cancelButton) {\n                cancelButton.addEventListener(\'click\', () => _core_dashboard_core_js__WEBPACK_IMPORTED_MODULE_0__["default"].handleClosePanel());\n            }\n        }\n    },\n    \n    // Update URL hash without triggering the hashchange event\n    updateUrlHash: function(hash) {\n        // Convert old hash format to new format to maintain the "plugins" tab visibility\n        if (hash.startsWith(\'plugin:\')) {\n            // Replace plugin: with plugins: to use the new format\n            hash = hash.replace(\'plugin:\', \'plugins:\');\n        }\n        \n        // Avoid circular dependencies by checking if Dashboard has this method\n        if (_core_dashboard_core_js__WEBPACK_IMPORTED_MODULE_0__["default"] && typeof _core_dashboard_core_js__WEBPACK_IMPORTED_MODULE_0__["default"].updateUrlHash === \'function\') {\n            _core_dashboard_core_js__WEBPACK_IMPORTED_MODULE_0__["default"].updateUrlHash(hash);\n        } else {\n            // Fallback implementation if Dashboard method is not available\n            window.location.hash = hash;\n        }\n    },\n\n    // Render plugin settings in the panel content\n    renderPluginSettings: async function(plugin, panelContent, installedPlugins) {\n        console.log(`Rendering settings for plugin: ${plugin.id}`);\n        \n        try {\n            // Get plugin settings schema and render UI\n            const schema = await _core_plugin_registry_js__WEBPACK_IMPORTED_MODULE_3__["default"].getSettingsSchema(plugin.id);\n            console.log(`Schema for plugin ${plugin.id}:`, schema);\n\n            // Generate settings panel content\n            let panelHTML = \'\';\n\n            if (schema && schema.length > 0) {\n                const categories = schema.filter(item => item.type === \'category\');\n\n                if (categories.length > 0) {\n                    console.log(`🔍 [DEBUG-SETTINGS] Plugin has ${categories.length} categories/tabs`);\n\n                    // Create tabbed interface with categories plus licensing tab at the end\n                    panelHTML = `\n                        <div class="settings-tabs">\n                            ${categories.map(cat => `<button class="tab-button" data-tab-target="${cat.id}">${cat.title ? cat.title.charAt(0).toUpperCase() + cat.title.slice(1) : cat.id.charAt(0).toUpperCase() + cat.id.slice(1)}</button>`).join(\'\')}\n                            <button class="tab-button" data-tab-target="licensing">Licensing</button>\n                        </div>\n                        <div class="settings-content">\n                            ${categories.map((cat, index) => `\n                                <div class="tab-content ${index === 0 ? \'active\' : \'\'}" data-tab-content="${cat.id}">\n                                    <form class="settings-form" data-category="${cat.id}">\n                                        ${cat.components.map(component => _components_settings_components_js__WEBPACK_IMPORTED_MODULE_4__["default"].renderSetting(component, plugin.settings || {})).join(\'\')}\n                                    </form>\n                                </div>\n                            `).join(\'\')}\n                            <div class="tab-content ${categories.length === 0 ? \'active\' : \'\'}" data-tab-content="licensing">\n                                <div class="settings-form">\n                                    ${this.generateLicensingUI(plugin).outerHTML}\n                                </div>\n                            </div>\n                        </div>\n                        <div class="form-actions">\n                            <button type="button" class="button cancel-button">Cancel</button>\n                            <button type="button" class="button save-button">Save</button>\n                        </div>\n                    `;\n                } else {\n                    console.log(`🔍 [DEBUG-SETTINGS] Plugin has a simple settings panel without tabs`);\n\n                    // Simple settings panel with just main settings and licensing tab\n                    panelHTML = `\n                        <div class="settings-tabs">\n                            <button class="tab-button active" data-tab-target="settings">Settings</button>\n                            <button class="tab-button" data-tab-target="licensing">Licensing</button>\n                        </div>\n                        <div class="settings-content">\n                            <div class="tab-content active" data-tab-content="settings">\n                                <form class="settings-form">\n                                    <div class="settings-section">\n                                        <div class="setting-group toggle-group">\n                                            <label class="toggle-switch">\n                                                <input type="checkbox" id="enabled" name="enabled" ${plugin.settings?.enabled !== false ? \'checked\' : \'\'}>\n                                                <span class="toggle-slider"></span>\n                                            </label>\n                                            <div class="toggle-labels">\n                                                <span class="toggle-title">Plugin Enabled</span>\n                                                <span class="toggle-status">${plugin.settings?.enabled !== false ? \'Enabled\' : \'Disabled\'}</span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    ${schema.map(setting => _components_settings_components_js__WEBPACK_IMPORTED_MODULE_4__["default"].renderSetting(setting, plugin.settings || {})).join(\'\')}\n                                </form>\n                            </div>\n                            <div class="tab-content" data-tab-content="licensing">\n                                <div class="settings-form">\n                                    ${this.generateLicensingUI(plugin).outerHTML}\n                                </div>\n                            </div>\n                        </div>\n                        <div class="form-actions">\n                            <button type="button" class="button cancel-button">Cancel</button>\n                            <button type="button" class="button save-button">Save</button>\n                        </div>\n                    `;\n                }\n            } else {\n                // Fallback for plugins with no registered settings schema\n                console.log(`🔍 [DEBUG-SETTINGS] Plugin ${plugin.id} has no registered schema`);\n\n                // Simple toggle and licensing UI\n                panelHTML = `\n                    <div class="settings-tabs">\n                        <button class="tab-button active" data-tab-target="settings">Settings</button>\n                        <button class="tab-button" data-tab-target="licensing">Licensing</button>\n                    </div>\n                    <div class="settings-content">\n                        <div class="tab-content active" data-tab-content="settings">\n                            <form class="settings-form">\n                                <div class="settings-section">\n                                    <div class="setting-group toggle-group">\n                                        <label class="toggle-switch">\n                                            <input type="checkbox" id="enabled" name="enabled" ${plugin.settings?.enabled !== false ? \'checked\' : \'\'}>\n                                            <span class="toggle-slider"></span>\n                                        </label>\n                                        <div class="toggle-labels">\n                                            <span class="toggle-title">Plugin Enabled</span>\n                                            <span class="toggle-status">${plugin.settings?.enabled !== false ? \'Enabled\' : \'Disabled\'}</span>\n                                        </div>\n                                    </div>\n                                    <p class="no-settings-message">This plugin has no additional settings.</p>\n                                </div>\n                            </form>\n                        </div>\n                        <div class="tab-content" data-tab-content="licensing">\n                            <div class="settings-form">\n                                ${this.generateLicensingUI(plugin).outerHTML}\n                            </div>\n                        </div>\n                    </div>\n                    <div class="form-actions">\n                        <button type="button" class="button cancel-button">Cancel</button>\n                        <button type="button" class="button save-button">Save</button>\n                    </div>\n                `;\n            }\n\n            // Hide skeleton loading and update panel content\n            if (this.loadingStates.settings) {\n                this.loadingStates.settings.hide();\n            }\n            \n            panelContent.innerHTML = panelHTML;\n\n            // Add event listeners\n            const forms = panelContent.querySelectorAll(\'.settings-form\');\n            const cancelButton = panelContent.querySelector(\'.cancel-button\');\n            const saveButton = panelContent.querySelector(\'.save-button\');\n\n            if (cancelButton) {\n                cancelButton.addEventListener(\'click\', () => _core_dashboard_core_js__WEBPACK_IMPORTED_MODULE_0__["default"].handleClosePanel());\n            }\n\n            if (saveButton && forms.length > 0) {\n                saveButton.addEventListener(\'click\', () => {\n                    // Collect settings from all forms and save them\n                    const settings = this.collectSettingsFromForms(plugin.id, schema, forms);\n                    this.savePluginSettings(plugin.id, settings, installedPlugins);\n                    this.hasUnsavedChanges = false;\n                    this.updateNotificationState();\n                });\n            }\n\n            // Ensure the first tab is active by default\n            const tabButtons = panelContent.querySelectorAll(\'.settings-tabs .tab-button\');\n            if (tabButtons.length > 0) {\n                // Set the first tab as active\n                tabButtons[0].classList.add(\'active\');\n\n                // Bind tab switching functionality\n                tabButtons.forEach(button => {\n                    button.addEventListener(\'click\', function () {\n                        // Update active tab button\n                        tabButtons.forEach(btn => btn.classList.remove(\'active\'));\n                        button.classList.add(\'active\');\n\n                        // Update active tab content\n                        const targetTabId = button.getAttribute(\'data-tab-target\');\n                        const tabContents = panelContent.querySelectorAll(\'.tab-content\');\n                        tabContents.forEach(content => content.classList.remove(\'active\'));\n                        panelContent.querySelector(`.tab-content[data-tab-content="${targetTabId}"]`).classList.add(\'active\');\n                    });\n                });\n            }\n\n            // Bind change handlers to all forms\n            if (forms.length > 0) {\n                forms.forEach(form => {\n                    // Find all form elements - inputs, selects, textareas\n                    const formElements = form.querySelectorAll(\'input, select, textarea\');\n                    formElements.forEach(element => {\n                        // Checkboxes and radios use change event, others use input event\n                        const eventType = (element.type === \'checkbox\' || element.type === \'radio\') ? \'change\' : \'input\';\n\n                        // For toggle switches, update the toggle status text\n                        if (element.type === \'checkbox\' && element.closest(\'.toggle-switch\')) {\n                            element.addEventListener(eventType, (e) => {\n                                const toggleGroup = element.closest(\'.toggle-group\');\n                                if (toggleGroup) {\n                                    const statusEl = toggleGroup.querySelector(\'.toggle-status\');\n                                    if (statusEl) {\n                                        statusEl.textContent = element.checked ? \'Enabled\' : \'Disabled\';\n                                    }\n                                }\n\n                                // Mark as having unsaved changes\n                                this.hasUnsavedChanges = true;\n                                this.updateNotificationState();\n                            });\n                        } else {\n                            // Regular form element change handler\n                            element.addEventListener(eventType, (e) => {\n                                this.hasUnsavedChanges = true;\n                                this.updateNotificationState();\n                            });\n                        }\n                    });\n                });\n            }\n        } catch (error) {\n            console.error(`Error rendering settings for plugin ${plugin.id}:`, error);\n            \n            // Hide skeleton loading if it was shown\n            if (this.loadingStates.settings) {\n                this.loadingStates.settings.hide();\n            }\n\n            // Show error message\n            panelContent.innerHTML = `\n                <div class="error-message">\n                    <p>Error loading settings for this plugin: ${error.message}</p>\n                    <button class="button cancel-button">Close</button>\n                </div>\n            `;\n\n            const cancelButton = panelContent.querySelector(\'.cancel-button\');\n            if (cancelButton) {\n                cancelButton.addEventListener(\'click\', () => _core_dashboard_core_js__WEBPACK_IMPORTED_MODULE_0__["default"].handleClosePanel());\n            }\n        }\n    },\n    \n    /**\n     * Collect settings from all forms in the settings panel\n     * @param {string} pluginId - The plugin ID \n     * @param {Array} schema - Settings schema for validation\n     * @param {NodeList} forms - Forms to collect settings from\n     * @returns {Object} - Collected settings\n     */\n    collectSettingsFromForms: function(pluginId, schema, forms) {\n        console.log(`Collecting settings from forms for plugin ${pluginId}`);\n        \n        // Get current plugin settings to merge with updates\n        const currentSettings = _core_plugin_registry_js__WEBPACK_IMPORTED_MODULE_3__["default"].getPluginSettings(pluginId) || {};\n        const newSettings = { ...currentSettings };\n        \n        // Ensure enabled state is captured (it\'s a special case often in its own form)\n        const enabledInput = document.querySelector(\'#enabled\');\n        if (enabledInput) {\n            newSettings.enabled = enabledInput.checked;\n        }\n        \n        // For each form in the panel\n        forms.forEach(form => {\n            // Get the category if this form has one\n            const category = form.getAttribute(\'data-category\');\n            \n            if (schema) {\n                let formSchema;\n                \n                if (category) {\n                    // If this is a categorized form, find the category and its components\n                    const categorySchema = schema.find(item => item.id === category && item.type === \'category\');\n                    formSchema = categorySchema ? categorySchema.components : [];\n                } else {\n                    // If this is not a categorized form, use all non-category schema items\n                    formSchema = schema.filter(item => item.type !== \'category\');\n                }\n                \n                // Process special color picker elements first\n                form.querySelectorAll(\'.color-input\').forEach(colorInput => {\n                    const id = colorInput.id;\n                    if (!id) return;\n                    \n                    // Check if this color input has a CSS variable set\n                    const cssVar = colorInput.getAttribute(\'data-used-var\');\n                    \n                    if (cssVar && cssVar.trim() !== \'\') {\n                        // If the color picker is using a CSS variable from the theme, store that value\n                        console.log(`Color input ${id} is using CSS variable: ${cssVar}`);\n                        newSettings[id] = cssVar;\n                    } else {\n                        // Otherwise use the selected hex color\n                        console.log(`Color input ${id} is using hex color: ${colorInput.value}`);\n                        newSettings[id] = colorInput.value;\n                    }\n                });\n                \n                // Use our SettingsComponents module to collect values for non-color inputs\n                const formValues = _components_settings_components_js__WEBPACK_IMPORTED_MODULE_4__["default"].collectFormValues(form, formSchema);\n                \n                console.log(`Collected form values for ${category || \'main\'} form:`, formValues);\n                \n                // Merge values into settings object\n                Object.assign(newSettings, formValues);\n            } else {\n                // If no schema, just collect form input values directly\n                form.querySelectorAll(\'input, select, textarea\').forEach(input => {\n                    const id = input.id || input.name;\n                    if (!id || id.includes(\'[]\')) return; // Skip inputs with no id or array inputs\n                    \n                    // Special handling for color inputs\n                    if (input.type === \'color\') {\n                        // Check if this color input has a CSS variable set\n                        const cssVar = input.getAttribute(\'data-used-var\');\n                        \n                        if (cssVar && cssVar.trim() !== \'\') {\n                            // If using a CSS variable, store that\n                            newSettings[id] = cssVar;\n                        } else {\n                            // Otherwise use the hex color\n                            newSettings[id] = input.value;\n                        }\n                    } else if (input.type === \'checkbox\') {\n                        newSettings[id] = input.checked;\n                    } else if (input.type === \'number\') {\n                        // Fix: Ensure we handle empty or invalid number values properly\n                        const numValue = parseFloat(input.value);\n                        newSettings[id] = !isNaN(numValue) ? numValue : 0; // Default to 0 if NaN\n                    } else {\n                        newSettings[id] = input.value;\n                    }\n                });\n            }\n        });\n        \n        console.log(`Final collected settings for ${pluginId}:`, newSettings);\n        return newSettings;\n    },\n    \n    // Basic form value collection (when SettingsComponents is not available)\n    collectFormValuesBasic: function(form) {\n        const formData = {};\n        \n        // Process inputs, selects, and textareas\n        form.querySelectorAll(\'input, select, textarea\').forEach(input => {\n            const name = input.name;\n            if (!name) return;\n            \n            let value;\n            \n            if (input.type === \'checkbox\') {\n                value = input.checked;\n            } else if (input.type === \'number\') {\n                value = parseFloat(input.value);\n            } else {\n                value = input.value;\n            }\n            \n            formData[name] = value;\n        });\n        \n        return formData;\n    },\n    \n    // Save plugin settings\n    savePluginSettings: async function(pluginId, settings = {}, installedPlugins) {\n        // Get the plugin\n        const pluginIndex = installedPlugins.findIndex(p => p.id === pluginId);\n        if (pluginIndex === -1) return;\n\n        console.log(`Saving settings for ${pluginId}:`, settings);\n\n        // Update plugin status if enabled setting is present\n        if (\'enabled\' in settings) {\n            installedPlugins[pluginIndex].status = settings.enabled ? \'enabled\' : \'disabled\';\n\n            // Update UI\n            const card = document.querySelector(`.plugin-card[data-plugin-id="${pluginId}"]`);\n            if (card) {\n                const statusElement = card.querySelector(\'.plugin-status\');\n                if (statusElement) {\n                    statusElement.className = `plugin-status status-${settings.enabled ? \'enabled\' : \'disabled\'}`;\n                    statusElement.textContent = settings.enabled ? \'ENABLED\' : \'DISABLED\';\n                }\n            }\n        }\n\n        // Save settings in the plugin object\n        installedPlugins[pluginIndex].settings = {\n            ...installedPlugins[pluginIndex].settings || {},\n            ...settings\n        };\n\n        // Save to Squarespace Storage\n        try {\n            // Make a clean copy of settings for storage\n            const settingsForStorage = JSON.parse(JSON.stringify(installedPlugins[pluginIndex].settings));\n\n            // Save to Squarespace Storage (new method)\n            const savedToSquarespace = await _core_squarespace_storage_service_js__WEBPACK_IMPORTED_MODULE_1__["default"].updatePluginSettings(\n                pluginId,\n                settingsForStorage\n            );\n\n            if (savedToSquarespace) {\n                this.showSuccessNotification(\'Settings saved to Squarespace storage successfully.\');\n            } else {\n                // If Squarespace storage fails, fallback to LocalStorage\n                const savedToLocalStorage = await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].updatePluginSettings(\n                    pluginId,\n                    settingsForStorage\n                );\n                \n                if (savedToLocalStorage) {\n                    this.showSuccessNotification(\'Settings saved to local storage.\');\n                } else {\n                    this.showSuccessNotification(\'Settings saved in memory only.\');\n                }\n            }\n        } catch (error) {\n            console.error(`Error saving settings to storage: ${error.message}`);\n            \n            // Try LocalStorage as fallback\n            try {\n                const settingsForStorage = JSON.parse(JSON.stringify(installedPlugins[pluginIndex].settings));\n                await _core_local_storage_service_js__WEBPACK_IMPORTED_MODULE_2__["default"].updatePluginSettings(pluginId, settingsForStorage);\n                this.showSuccessNotification(\'Settings saved to local storage.\');\n            } catch (fallbackError) {\n                console.error(`Fallback error: ${fallbackError.message}`);\n                this.showSuccessNotification(\'Settings saved in memory only.\');\n            }\n        }\n\n        return true;\n    },\n    \n    // Create and get notification bar\n    getNotificationBar: function() {\n        // First check if notification bar already exists\n        const existingBar = document.querySelector(\'.notification-bar\');\n\n        if (existingBar) {\n            console.log("[DEBUG-NOTIFICATION] Using existing notification bar");\n            return existingBar;\n        }\n\n        console.log("[DEBUG-NOTIFICATION] Creating new notification bar");\n        this.notificationBar = document.createElement(\'div\');\n        this.notificationBar.className = \'notification-bar\';\n\n        // Add to settings panel\n        const settingsPanel = document.getElementById(\'settings-panel\');\n        settingsPanel.appendChild(this.notificationBar);\n        \n        // Log element details to ensure it\'s being created properly\n        console.log("[DEBUG-NOTIFICATION] Notification bar created:", \n            { \n                element: this.notificationBar, \n                parent: settingsPanel,\n                className: this.notificationBar.className\n            });\n\n        return this.notificationBar;\n    },\n    \n    // Show unsaved changes notification\n    showUnsavedChangesNotification: function() {\n        const bar = this.getNotificationBar();\n\n        // Remove any existing classes that might interfere\n        bar.classList.remove(\'success\', \'attention\');\n\n        // Add visible class\n        bar.classList.add(\'visible\');\n\n        bar.innerHTML = `\n            <div class="notification-message">\n                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n                    <circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2"/>\n                    <line x1="12" y1="8" x2="12" y2="16" stroke="currentColor" stroke-width="2"/>\n                    <circle cx="12" y1="6" r="1" fill="currentColor"/>\n                </svg>\n                <span>Unsaved changes</span>\n            </div>\n            <div class="notification-actions">\n                <button class="discard-button">Discard</button>\n                <button class="save-button">Save</button>\n            </div>\n        `;\n\n        // Add event listeners\n        const discardButton = bar.querySelector(\'.discard-button\');\n        const saveButton = bar.querySelector(\'.save-button\');\n\n        discardButton.addEventListener(\'click\', () => {\n            this.hasUnsavedChanges = false;\n            _core_dashboard_core_js__WEBPACK_IMPORTED_MODULE_0__["default"].closeSettingsPanel();\n        });\n\n        saveButton.addEventListener(\'click\', () => {\n            // Need to collect and save the settings from ALL forms\n            const panelContent = document.getElementById(\'panel-content\');\n            const forms = panelContent.querySelectorAll(\'.settings-form\');\n            if (!forms || forms.length === 0) return;\n\n            const pluginId = this.activePanel;\n            const installedPlugins = window.installedPlugins || [];\n            const plugin = installedPlugins.find(p => p.id === pluginId);\n            if (!plugin) return;\n\n            const schema = _core_plugin_registry_js__WEBPACK_IMPORTED_MODULE_3__["default"].getSettingsSchema(pluginId);\n\n            // Collect settings from all forms and merge them\n            const settings = this.collectSettingsFromForms(pluginId, schema, forms);\n\n            // Save settings\n            this.savePluginSettings(pluginId, settings, installedPlugins);\n            this.hasUnsavedChanges = false; // Reset after saving\n            this.updateNotificationState();\n        });\n\n        console.log("Notification bar created and shown");\n    },\n    \n    // Helper function to apply animation\n    applyAttentionAnimation: function(bar) {\n        if (!bar) return;\n\n        // Clear any existing timeout\n        if (this.attentionTimeout) {\n            clearTimeout(this.attentionTimeout);\n        }\n\n        // Remove animation class first (to allow restart)\n        bar.classList.remove(\'attention\');\n\n        // Force a browser reflow to restart animation\n        void bar.offsetWidth;\n\n        // Add animation class\n        bar.classList.add(\'attention\');\n\n        // Remove animation class after it completes\n        this.attentionTimeout = setTimeout(function () {\n            if (bar) {\n                bar.classList.remove(\'attention\');\n            }\n        }, 800); // Animation duration\n    },\n    \n    // Show attention animation on notification bar\n    showAttention: function() {\n        console.log("showAttention called");\n\n        // First check if we already have a notification bar\n        let bar = document.querySelector(\'.notification-bar\');\n\n        if (!bar || !bar.classList.contains(\'visible\')) {\n            // If no visible notification bar, create one with unsaved changes message\n            console.log("No visible notification bar, creating one");\n            this.showUnsavedChangesNotification();\n\n            // Get the new bar\n            bar = document.querySelector(\'.notification-bar\');\n            \n            // Wait a brief moment for the bar to be fully visible\n            setTimeout(() => {\n                this.applyAttentionAnimation(bar);\n            }, 50);\n        } else {\n            // Bar exists and is visible, apply animation directly\n            console.log("Notification bar already visible, applying animation");\n            this.applyAttentionAnimation(bar);\n        }\n    },\n    \n    // Show success notification\n    showSuccessNotification: function(message) {\n        const bar = this.getNotificationBar();\n\n        // Remove any existing classes\n        bar.classList.remove(\'attention\');\n\n        bar.className = \'notification-bar success visible\';\n        bar.innerHTML = `\n            <div class="notification-message">\n                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n                    <circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2"/>\n                    <path d="M8 12l3 3 6-6" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n                </svg>\n                <span>${message || \'Settings saved successfully!\'}</span>\n            </div>\n            <div class="notification-actions">\n                <button class="discard-button">Close</button>\n            </div>\n        `;\n\n        // Add event listener to close button\n        const closeButton = bar.querySelector(\'.discard-button\');\n        closeButton.addEventListener(\'click\', () => {\n            this.hideNotification();\n        });\n\n        // Auto-hide after 3 seconds\n        if (this.notificationTimeout) {\n            clearTimeout(this.notificationTimeout);\n            this.notificationTimeout = null;\n        }\n\n        this.notificationTimeout = setTimeout(() => {\n            this.hideNotification();\n        }, 3000);\n    },\n    \n    // Hide notification bar\n    hideNotification: function() {\n        console.log("[DEBUG-NOTIFICATION] Hiding notification bar");\n        const existingBar = document.querySelector(\'.notification-bar\');\n        \n        if (existingBar) {\n            console.log("[DEBUG-NOTIFICATION] Found existing bar to hide");\n            existingBar.classList.remove(\'visible\');\n        } else {\n            console.log("[DEBUG-NOTIFICATION] No notification bar found to hide");\n        }\n\n        if (this.notificationTimeout) {\n            console.log("[DEBUG-NOTIFICATION] Clearing notification timeout");\n            clearTimeout(this.notificationTimeout);\n            this.notificationTimeout = null;\n        }\n    },\n    \n    // Update notification state based on changes\n    updateNotificationState: function() {\n        console.log("[DEBUG-NOTIFICATION] updateNotificationState called, hasUnsavedChanges =", this.hasUnsavedChanges);\n\n        if (this.hasUnsavedChanges) {\n            console.log("[DEBUG-NOTIFICATION] Has unsaved changes, showing notification");\n            this.showUnsavedChangesNotification();\n        } else {\n            console.log("[DEBUG-NOTIFICATION] No unsaved changes, hiding notification");\n            this.hideNotification();\n        }\n    },\n    \n    // Generate licensing UI for settings panel\n    generateLicensingUI: function(plugin) {\n        // Default to inactive if not set\n        const licenseStatus = plugin.licenseStatus || \'inactive\';\n        let trialData = plugin.trialData || null;\n\n        // Create the container\n        const licensingUI = document.createElement(\'div\');\n        licensingUI.className = \'settings-section licensing-section\';\n\n        // Different UI based on license status\n        switch (licenseStatus) {\n            case \'authorized\':\n                licensingUI.innerHTML = `\n                    <div class="license-status-container">\n                        <div class="license-status-icon active">\n                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                                <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"/>\n                                <path d="M7.5 12l3 3 6-6"/>\n                            </svg>\n                        </div>\n                        <div class="license-status-info">\n                            <h3 class="license-status-title">Licensed</h3>\n                            <p class="license-status-description">This plugin is licensed and active.</p>\n                        </div>\n                    </div>\n                    <div class="license-details">\n                        <div class="license-detail-item">\n                            <span class="license-detail-label">License Key:</span>\n                            <span class="license-detail-value">•••••••••${plugin.settings?.license_key?.substring(plugin.settings.license_key.length - 4) || \'••••\'}</span>\n                        </div>\n                        <div class="license-detail-item">\n                            <span class="license-detail-label">Activated On:</span>\n                            <span class="license-detail-value">${new Date(plugin.settings?.activated_at || Date.now()).toLocaleDateString()}</span>\n                        </div>\n                    </div>\n                    <div class="license-actions">\n                        <button class="button secondary-button" id="deactivate-license">Deactivate License</button>\n                    </div>\n                `;\n                break;\n\n            case \'trial\':\n                // Calculate days remaining\n                const daysRemaining = trialData?.daysRemaining || 14;\n                const trialEnds = trialData?.trialEnd ? new Date(trialData.trialEnd).toLocaleDateString() : \'Unknown\';\n\n                licensingUI.innerHTML = `\n                    <div class="license-status-container">\n                        <div class="license-status-icon trial">\n                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                                <circle cx="12" cy="12" r="10"></circle>\n                                <polyline points="12 6 12 12 16 14"></polyline>\n                            </svg>\n                        </div>\n                        <div class="license-status-info">\n                            <h3 class="license-status-title">Trial Mode</h3>\n                            <p class="license-status-description">This plugin is currently in trial mode.</p>\n                        </div>\n                    </div>\n                    <div class="license-details">\n                        <div class="license-detail-item">\n                            <span class="license-detail-label">Days Remaining:</span>\n                            <span class="license-detail-value">${daysRemaining}</span>\n                        </div>\n                        <div class="license-detail-item">\n                            <span class="license-detail-label">Trial Ends:</span>\n                            <span class="license-detail-value">${trialEnds}</span>\n                        </div>\n                    </div>\n                    <div class="license-activation">\n                        <h4 class="license-activation-title">Have a License Key?</h4>\n                        <div class="license-activation-form">\n                            <input type="text" class="license-key-input" placeholder="Enter your license key" id="license-key-input">\n                            <button class="button primary-button" id="activate-license">Activate License</button>\n                        </div>\n                    </div>\n                `;\n                break;\n\n            case \'unauthorized\':\n                licensingUI.innerHTML = `\n                    <div class="license-status-container">\n                        <div class="license-status-icon expired">\n                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                                <circle cx="12" cy="12" r="10"></circle>\n                                <line x1="15" y1="9" x2="9" y2="15"></line>\n                                <line x1="9" y1="9" x2="15" y2="15"></line>\n                            </svg>\n                        </div>\n                        <div class="license-status-info">\n                            <h3 class="license-status-title">License Required</h3>\n                            <p class="license-status-description">Your trial has expired or is invalid.</p>\n                        </div>\n                    </div>\n                    <div class="license-activation">\n                        <h4 class="license-activation-title">Enter Your License Key</h4>\n                        <div class="license-activation-form">\n                            <input type="text" class="license-key-input" placeholder="Enter your license key" id="license-key-input">\n                            <button class="button primary-button" id="activate-license">Activate License</button>\n                        </div>\n                    </div>\n                    <div class="license-purchase">\n                        <a href="https://squarehero.store/products/${plugin.id}" target="_blank" class="button secondary-button purchase-button">Purchase License</a>\n                    </div>\n                `;\n                break;\n\n            case \'inactive\':\n            default:\n                licensingUI.innerHTML = `\n                    <div class="license-status-container">\n                        <div class="license-status-icon inactive">\n                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                                <circle cx="12" cy="12" r="10"></circle>\n                                <line x1="12" y1="8" x2="12" y2="12"></line>\n                                <line x1="12" y1="16" x2="12.01" y2="16"></line>\n                            </svg>\n                        </div>\n                        <div class="license-status-info">\n                            <h3 class="license-status-title">Not Activated</h3>\n                            <p class="license-status-description">This plugin is not activated.</p>\n                        </div>\n                    </div>\n                    <div class="license-actions">\n                        <button class="button primary-button" id="start-trial">Start Free Trial</button>\n                        <p class="trial-info">Start a 14-day free trial with full features.</p>\n                    </div>\n                    <div class="license-activation">\n                        <h4 class="license-activation-title">Already have a License?</h4>\n                        <div class="license-activation-form">\n                            <input type="text" class="license-key-input" placeholder="Enter your license key" id="license-key-input">\n                            <button class="button secondary-button" id="activate-license">Activate License</button>\n                        </div>\n                    </div>\n                `;\n                break;\n        }\n\n        return licensingUI;\n    }\n};\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/modules/ui/settings-panel.js?')},"./src/modules/wizards/wizard-system.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Wizard System Module\n * Handles plugin setup wizards and guided configuration flows\n */\n\n// WizardSystem module\nconst WizardSystem = {\n    // Track active wizards\n    activeWizards: new Map(),\n    \n    // Initialize wizard system (alias for init for consistency with other modules)\n    initialize: function() {\n        console.log('Initializing Wizard System');\n        return this.init();\n    },\n    \n    // Initialize wizard system\n    init: function() {\n        console.log('Initializing Wizard System');\n        // Register event handlers or perform any initialization\n        return this;\n    },\n    \n    // Launch a wizard for a plugin\n    launchWizard: async function(pluginId, container, options = {}) {\n        console.log(`Launching wizard for plugin: ${pluginId}`);\n        \n        try {\n            // Load wizard module\n            const wizardModule = await this.loadWizardModule(pluginId);\n            \n            if (!wizardModule) {\n                throw new Error(`No wizard found for plugin: ${pluginId}`);\n            }\n            \n            // Create wizard instance\n            const wizard = this.createWizardInstance(wizardModule, pluginId, options);\n            \n            // Track active wizard\n            this.activeWizards.set(pluginId, wizard);\n            \n            // Render wizard\n            this.renderWizard(wizard, container);\n            \n            return wizard;\n        } catch (error) {\n            console.error(`Error launching wizard for ${pluginId}:`, error);\n            this.renderWizardError(container, error);\n            return null;\n        }\n    },\n    \n    // Load wizard module for a plugin\n    loadWizardModule: async function(pluginId) {\n        try {\n            // Dynamically import the wizard.js file\n            return await __webpack_require__(\"./plugins lazy recursive ^\\\\.\\\\/.*\\\\/wizard\\\\.js$\")(`./${pluginId}/wizard.js`);\n        } catch (error) {\n            console.warn(`Could not load wizard module for ${pluginId}:`, error);\n            return null;\n        }\n    },\n    \n    // Create wizard instance from module\n    createWizardInstance: function(wizardModule, pluginId, options) {\n        // Get wizard class or object\n        const WizardClass = wizardModule.default || wizardModule;\n        \n        // Create instance if it's a class\n        let wizardInstance;\n        if (typeof WizardClass === 'function') {\n            wizardInstance = new WizardClass(options);\n        } else {\n            // If it's an object, clone it\n            wizardInstance = Object.create(WizardClass);\n        }\n        \n        // Ensure required properties and methods\n        wizardInstance.pluginId = pluginId;\n        wizardInstance.currentStep = 0;\n        wizardInstance.data = wizardInstance.data || options.data || {};\n        \n        // Add default methods if not present\n        if (!wizardInstance.getSteps) {\n            wizardInstance.getSteps = function() {\n                return wizardInstance.steps || [];\n            };\n        }\n        \n        if (!wizardInstance.getTotalSteps) {\n            wizardInstance.getTotalSteps = function() {\n                return wizardInstance.getSteps().length;\n            };\n        }\n        \n        if (!wizardInstance.getCurrentStep) {\n            wizardInstance.getCurrentStep = function() {\n                return wizardInstance.getSteps()[wizardInstance.currentStep];\n            };\n        }\n        \n        return wizardInstance;\n    },\n    \n    // Render wizard in container\n    renderWizard: function(wizard, container) {\n        // Clear container\n        container.innerHTML = '';\n        container.className = 'wizard-container';\n        \n        // Create wizard UI\n        const wizardEl = document.createElement('div');\n        wizardEl.className = 'wizard';\n        wizardEl.dataset.pluginId = wizard.pluginId;\n        \n        // Wizard header\n        const header = document.createElement('div');\n        header.className = 'wizard-header';\n        \n        // Title\n        const title = document.createElement('h2');\n        title.textContent = wizard.title || `Setup Wizard`;\n        header.appendChild(title);\n        \n        // Step indicator\n        const stepIndicator = document.createElement('div');\n        stepIndicator.className = 'step-indicator';\n        \n        const totalSteps = wizard.getTotalSteps();\n        for (let i = 0; i < totalSteps; i++) {\n            const step = document.createElement('div');\n            step.className = 'step';\n            if (i === wizard.currentStep) step.classList.add('active');\n            if (i < wizard.currentStep) step.classList.add('completed');\n            stepIndicator.appendChild(step);\n        }\n        \n        header.appendChild(stepIndicator);\n        wizardEl.appendChild(header);\n        \n        // Content area\n        const content = document.createElement('div');\n        content.className = 'wizard-content';\n        \n        // Render current step\n        this.renderStep(wizard, content);\n        \n        wizardEl.appendChild(content);\n        \n        // Wizard footer with navigation\n        const footer = document.createElement('div');\n        footer.className = 'wizard-footer';\n        \n        // Back button\n        const backButton = document.createElement('button');\n        backButton.className = 'secondary-button back-button';\n        backButton.textContent = 'Back';\n        backButton.disabled = wizard.currentStep === 0;\n        backButton.addEventListener('click', () => {\n            this.navigateWizard(wizard, 'back', container);\n        });\n        \n        // Next/Finish button\n        const nextButton = document.createElement('button');\n        nextButton.className = 'primary-button next-button';\n        nextButton.textContent = wizard.currentStep === totalSteps - 1 ? 'Finish' : 'Next';\n        nextButton.addEventListener('click', () => {\n            this.navigateWizard(wizard, 'next', container);\n        });\n        \n        footer.appendChild(backButton);\n        footer.appendChild(nextButton);\n        wizardEl.appendChild(footer);\n        \n        // Add wizard to container\n        container.appendChild(wizardEl);\n    },\n    \n    // Render a specific step\n    renderStep: function(wizard, container) {\n        const currentStep = wizard.getCurrentStep();\n        \n        if (!currentStep) {\n            container.innerHTML = '<div class=\"error-message\">Step not found</div>';\n            return;\n        }\n        \n        // Create step container\n        const stepContainer = document.createElement('div');\n        stepContainer.className = 'wizard-step';\n        \n        // Step heading\n        const heading = document.createElement('h3');\n        heading.textContent = currentStep.title || `Step ${wizard.currentStep + 1}`;\n        stepContainer.appendChild(heading);\n        \n        // Step description if available\n        if (currentStep.description) {\n            const description = document.createElement('p');\n            description.className = 'step-description';\n            description.textContent = currentStep.description;\n            stepContainer.appendChild(description);\n        }\n        \n        // Step content\n        const content = document.createElement('div');\n        content.className = 'step-content';\n        \n        // If step has render method, use it\n        if (currentStep.render && typeof currentStep.render === 'function') {\n            try {\n                const rendered = currentStep.render(wizard.data);\n                if (typeof rendered === 'string') {\n                    content.innerHTML = rendered;\n                } else if (rendered instanceof HTMLElement) {\n                    content.appendChild(rendered);\n                }\n            } catch (error) {\n                console.error('Error rendering step:', error);\n                content.innerHTML = `<div class=\"error-message\">Error rendering step: ${error.message}</div>`;\n            }\n        } \n        // Default form rendering based on fields\n        else if (currentStep.fields && Array.isArray(currentStep.fields)) {\n            const form = document.createElement('form');\n            form.className = 'wizard-form';\n            form.addEventListener('submit', event => event.preventDefault());\n            \n            // Render fields\n            currentStep.fields.forEach(field => {\n                const fieldWrapper = document.createElement('div');\n                fieldWrapper.className = 'form-field';\n                \n                // Label\n                const label = document.createElement('label');\n                label.htmlFor = `field-${field.name}`;\n                label.textContent = field.label || field.name;\n                if (field.required) {\n                    label.classList.add('required');\n                }\n                fieldWrapper.appendChild(label);\n                \n                // Input\n                let input;\n                switch (field.type) {\n                    case 'textarea':\n                        input = document.createElement('textarea');\n                        input.rows = field.rows || 3;\n                        input.value = wizard.data[field.name] || field.defaultValue || '';\n                        break;\n                        \n                    case 'select':\n                        input = document.createElement('select');\n                        if (field.options) {\n                            field.options.forEach(option => {\n                                const optionEl = document.createElement('option');\n                                optionEl.value = option.value;\n                                optionEl.textContent = option.label;\n                                if (wizard.data[field.name] === option.value) {\n                                    optionEl.selected = true;\n                                }\n                                input.appendChild(optionEl);\n                            });\n                        }\n                        break;\n                        \n                    case 'checkbox':\n                        input = document.createElement('input');\n                        input.type = 'checkbox';\n                        input.checked = wizard.data[field.name] || field.defaultValue || false;\n                        break;\n                        \n                    default:\n                        input = document.createElement('input');\n                        input.type = field.type || 'text';\n                        input.value = wizard.data[field.name] || field.defaultValue || '';\n                }\n                \n                // Common attributes\n                input.id = `field-${field.name}`;\n                input.name = field.name;\n                input.required = field.required || false;\n                \n                if (field.placeholder) input.placeholder = field.placeholder;\n                \n                // Update data on change\n                input.addEventListener('change', event => {\n                    const value = input.type === 'checkbox' ? input.checked : input.value;\n                    wizard.data[field.name] = value;\n                });\n                \n                fieldWrapper.appendChild(input);\n                \n                // Help text\n                if (field.help) {\n                    const helpText = document.createElement('small');\n                    helpText.className = 'help-text';\n                    helpText.textContent = field.help;\n                    fieldWrapper.appendChild(helpText);\n                }\n                \n                form.appendChild(fieldWrapper);\n            });\n            \n            content.appendChild(form);\n        } else {\n            // No rendering instructions\n            content.innerHTML = '<p>Please complete this step and continue.</p>';\n        }\n        \n        stepContainer.appendChild(content);\n        \n        // Add to container\n        container.appendChild(stepContainer);\n    },\n    \n    // Render error if wizard fails to load\n    renderWizardError: function(container, error) {\n        container.innerHTML = '';\n        \n        const errorEl = document.createElement('div');\n        errorEl.className = 'wizard-error';\n        \n        const heading = document.createElement('h3');\n        heading.textContent = 'Wizard Error';\n        errorEl.appendChild(heading);\n        \n        const message = document.createElement('p');\n        message.textContent = error.message || 'Failed to load wizard';\n        errorEl.appendChild(message);\n        \n        const button = document.createElement('button');\n        button.className = 'primary-button';\n        button.textContent = 'Close';\n        button.addEventListener('click', () => {\n            // Trigger close event\n            const event = new CustomEvent('wizard:close', {\n                detail: { error: error }\n            });\n            container.dispatchEvent(event);\n        });\n        \n        errorEl.appendChild(button);\n        container.appendChild(errorEl);\n    },\n    \n    // Navigate wizard (next/back)\n    navigateWizard: function(wizard, direction, container) {\n        const currentStep = wizard.getCurrentStep();\n        const totalSteps = wizard.getTotalSteps();\n        \n        // Validate current step if going forward\n        if (direction === 'next' && currentStep.validate) {\n            const isValid = currentStep.validate(wizard.data);\n            if (isValid !== true) {\n                // Show validation error\n                const errorMessage = typeof isValid === 'string' ? isValid : 'Please complete all required fields';\n                this.showWizardError(container, errorMessage);\n                return;\n            }\n        }\n        \n        // Execute step handlers\n        if (direction === 'next' && currentStep.onNext) {\n            try {\n                currentStep.onNext(wizard.data);\n            } catch (error) {\n                console.error('Error in onNext handler:', error);\n                this.showWizardError(container, error.message);\n                return;\n            }\n        } else if (direction === 'back' && currentStep.onBack) {\n            try {\n                currentStep.onBack(wizard.data);\n            } catch (error) {\n                console.error('Error in onBack handler:', error);\n                return;\n            }\n        }\n        \n        // Navigate to next/previous step\n        if (direction === 'next') {\n            // If last step, finish wizard\n            if (wizard.currentStep === totalSteps - 1) {\n                this.finishWizard(wizard, container);\n                return;\n            }\n            \n            wizard.currentStep++;\n        } else {\n            // Don't go below 0\n            if (wizard.currentStep > 0) {\n                wizard.currentStep--;\n            }\n        }\n        \n        // Re-render wizard\n        this.renderWizard(wizard, container);\n    },\n    \n    // Show error message in wizard\n    showWizardError: function(container, message) {\n        // Find or create error element\n        let errorEl = container.querySelector('.wizard-validation-error');\n        \n        if (!errorEl) {\n            errorEl = document.createElement('div');\n            errorEl.className = 'wizard-validation-error';\n            container.querySelector('.wizard-content').appendChild(errorEl);\n        }\n        \n        // Set message\n        errorEl.textContent = message;\n        \n        // Add animation\n        errorEl.classList.add('show');\n        \n        // Remove after delay\n        setTimeout(() => {\n            errorEl.classList.remove('show');\n            setTimeout(() => {\n                errorEl.remove();\n            }, 300);\n        }, 3000);\n    },\n    \n    // Finish wizard\n    finishWizard: function(wizard, container) {\n        console.log('Finishing wizard with data:', wizard.data);\n        \n        // Call onFinish handler if available\n        if (wizard.onFinish && typeof wizard.onFinish === 'function') {\n            try {\n                wizard.onFinish(wizard.data);\n            } catch (error) {\n                console.error('Error in onFinish handler:', error);\n                this.showWizardError(container, error.message);\n                return;\n            }\n        }\n        \n        // Remove from active wizards\n        this.activeWizards.delete(wizard.pluginId);\n        \n        // Dispatch completion event\n        const event = new CustomEvent('wizard:complete', {\n            detail: {\n                pluginId: wizard.pluginId,\n                data: wizard.data\n            }\n        });\n        container.dispatchEvent(event);\n        \n        // Show completion screen\n        this.renderCompletionScreen(wizard, container);\n    },\n    \n    // Render completion screen\n    renderCompletionScreen: function(wizard, container) {\n        container.innerHTML = '';\n        container.className = 'wizard-completion';\n        \n        const completion = document.createElement('div');\n        completion.className = 'completion-message';\n        \n        // Success icon\n        const icon = document.createElement('div');\n        icon.className = 'success-icon';\n        icon.innerHTML = '<svg viewBox=\"0 0 24 24\" width=\"48\" height=\"48\"><path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\" fill=\"currentColor\"/></svg>';\n        completion.appendChild(icon);\n        \n        // Message\n        const message = document.createElement('h3');\n        message.textContent = wizard.completionMessage || 'Setup Complete!';\n        completion.appendChild(message);\n        \n        // Description\n        const description = document.createElement('p');\n        description.textContent = wizard.completionDescription || 'Your plugin is now set up and ready to use.';\n        completion.appendChild(description);\n        \n        // Done button\n        const button = document.createElement('button');\n        button.className = 'primary-button';\n        button.textContent = 'Done';\n        button.addEventListener('click', () => {\n            // Trigger close event\n            const event = new CustomEvent('wizard:close', {\n                detail: { \n                    pluginId: wizard.pluginId,\n                    completed: true \n                }\n            });\n            container.dispatchEvent(event);\n        });\n        \n        completion.appendChild(button);\n        container.appendChild(completion);\n    }\n};\n\n// Export default for consistency with imports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WizardSystem);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/modules/wizards/wizard-system.js?")},"./src/utils/help-docs-loader.js":()=>{eval("/**\n * Help Docs Component - Manages the initialization and loading of help documentation\n * Designed to be included in the help-docs-component.js file\n */\n\n(function() {\n    // Flag to prevent double initialization\n    if (window.helpDocsComponentInitialized) {\n        return;\n    }\n    \n    /**\n     * HelpDocsComponent - Manages the help documentation component\n     */\n    window.HelpDocsComponent = {\n        // Reference to the container element\n        container: null,\n        \n        // Properties to track state\n        pluginId: null,\n        isInitialized: false,\n        isLoading: false,\n        \n        /**\n         * Initialize the help docs component\n         * @param {string} containerId - ID of the container element\n         */\n        initialize: function(containerId) {\n            console.log('Initializing help docs component in container:', containerId);\n            \n            // Find the container element\n            const container = document.getElementById(containerId) || \n                             document.querySelector(`.custom-component-container[data-component-id=\"help-docs-container\"]`);\n            \n            if (!container) {\n                console.error('Help docs container not found with ID:', containerId);\n                return false;\n            }\n            \n            this.container = container;\n            \n            // Show loading state\n            this.showLoading();\n            \n            // Get the active plugin ID\n            this.detectActivePlugin()\n                .then(pluginId => {\n                    if (!pluginId) {\n                        this.showError('Cannot determine which plugin is active. Please try again or reload the page.');\n                        return;\n                    }\n                    \n                    this.pluginId = pluginId;\n                    console.log('Detected active plugin ID:', pluginId);\n                    \n                    // Load the help docs for this plugin\n                    this.loadHelpDocs(pluginId);\n                })\n                .catch(error => {\n                    console.error('Error detecting active plugin:', error);\n                    this.showError('Error detecting active plugin: ' + error.message);\n                });\n            \n            this.isInitialized = true;\n            return true;\n        },\n        \n        /**\n         * Detect the active plugin using multiple methods\n         * @returns {Promise<string>} Promise resolving to the plugin ID\n         */\n        detectActivePlugin: async function() {\n            // Try multiple methods to determine the active plugin ID\n            \n            // Method 1: Check global activePanel variable\n            if (window.activePanel) {\n                console.log('Found active plugin ID from window.activePanel:', window.activePanel);\n                return window.activePanel;\n            }\n            \n            // Method 2: Check Dashboard.activePanel\n            if (window.Dashboard && window.Dashboard.activePanel) {\n                console.log('Found active plugin ID from Dashboard.activePanel:', window.Dashboard.activePanel);\n                return window.Dashboard.activePanel;\n            }\n            \n            // Method 3: Check data attribute on settings panel\n            const settingsPanel = document.querySelector('.settings-panel.visible');\n            if (settingsPanel && settingsPanel.hasAttribute('data-plugin-id')) {\n                const pluginId = settingsPanel.getAttribute('data-plugin-id');\n                console.log('Found active plugin ID from settings panel data attribute:', pluginId);\n                return pluginId;\n            }\n            \n            // Method 4: Try to get plugin ID from panel title\n            const panelTitle = document.getElementById('plugin-settings-title');\n            if (panelTitle) {\n                const title = panelTitle.textContent.trim();\n                console.log('Found panel title:', title);\n                \n                // Try to match with installedPlugins\n                if (window.installedPlugins) {\n                    const matchingPlugin = window.installedPlugins.find(p => p.name === title);\n                    if (matchingPlugin) {\n                        console.log('Found matching plugin from title:', matchingPlugin.id);\n                        return matchingPlugin.id;\n                    }\n                }\n                \n                // If no match in installedPlugins, use a hardcoded mapping as fallback\n                const pluginTitleMap = {\n                    'Real Estate Listings': 'real-estate-listings',\n                    'Food & Drink Menu Manager': 'food-menu',\n                    'Scroll to Top Button': 'scroll-to-top'\n                };\n                \n                if (pluginTitleMap[title]) {\n                    console.log('Found plugin ID from title mapping:', pluginTitleMap[title]);\n                    return pluginTitleMap[title];\n                }\n            }\n            \n            // Method 5: As a last resort, try to find plugin ID in URL\n            const urlParams = new URLSearchParams(window.location.search);\n            const pluginFromUrl = urlParams.get('plugin');\n            if (pluginFromUrl) {\n                console.log('Found plugin ID from URL:', pluginFromUrl);\n                return pluginFromUrl;\n            }\n            \n            // No plugin ID found\n            console.error('Could not determine active plugin ID');\n            return null;\n        },\n        \n        /**\n         * Load help docs for the specified plugin\n         * @param {string} pluginId - The plugin ID\n         */\n        loadHelpDocs: async function(pluginId) {\n            if (!pluginId) {\n                this.showError('No plugin ID provided');\n                return;\n            }\n            \n            try {\n                this.isLoading = true;\n                \n                // Make sure HelpDocsManager is initialized\n                if (!window.HelpDocsManager) {\n                    console.error('HelpDocsManager not available');\n                    this.showError('Help documentation system not available');\n                    return;\n                }\n                \n                // Initialize the HelpDocsManager\n                await window.HelpDocsManager.initialize();\n                \n                // Get help docs for this plugin\n                const helpDocs = await window.HelpDocsManager.getHelpDocs(pluginId);\n                console.log(`Loaded ${helpDocs.length} help docs for plugin ${pluginId}`);\n                \n                // Render the help docs\n                this.renderHelpDocs(helpDocs);\n                \n            } catch (error) {\n                console.error('Error loading help docs:', error);\n                this.showError('Error loading help documentation: ' + error.message);\n            } finally {\n                this.isLoading = false;\n            }\n        },\n        \n        /**\n         * Render help docs in the container\n         * @param {Array} helpDocs - Array of help doc objects\n         */\n        renderHelpDocs: function(helpDocs) {\n            if (!this.container) return;\n            \n            // Make sure HelpDocsUI is available\n            if (!window.HelpDocsUI) {\n                console.error('HelpDocsUI not available');\n                this.showError('Help documentation UI system not available');\n                return;\n            }\n            \n            // Create help docs content\n            const content = window.HelpDocsUI.createHelpTabContent(helpDocs);\n            \n            // Clear container and add content\n            this.container.innerHTML = '';\n            this.container.appendChild(content);\n            \n            console.log('Help docs rendered successfully');\n        },\n        \n        /**\n         * Show loading indicator\n         */\n        showLoading: function() {\n            if (!this.container) return;\n            \n            this.container.innerHTML = `\n                <div class=\"loading-indicator\">\n                    <div class=\"loading-spinner\"></div>\n                    <p>Loading help documentation...</p>\n                </div>\n            `;\n            \n            this.isLoading = true;\n        },\n        \n        /**\n         * Show error message\n         * @param {string} message - Error message to display\n         */\n        showError: function(message) {\n            if (!this.container) return;\n            \n            this.container.innerHTML = `\n                <div class=\"error-message\">\n                    <p>${message}</p>\n                    <button id=\"retry-help-docs\" class=\"button secondary-button\" style=\"margin-top: 15px;\">\n                        Retry\n                    </button>\n                    <button id=\"debug-help-docs\" class=\"button cancel-button\" style=\"margin-top: 15px; margin-left: 10px;\">\n                        Debug Info\n                    </button>\n                </div>\n            `;\n            \n            // Add retry button handler\n            const retryButton = this.container.querySelector('#retry-help-docs');\n            if (retryButton) {\n                retryButton.addEventListener('click', () => {\n                    // Try to re-detect the active plugin and load help docs\n                    this.initialize(this.container.id);\n                });\n            }\n            \n            // Add debug button handler\n            const debugButton = this.container.querySelector('#debug-help-docs');\n            if (debugButton) {\n                debugButton.addEventListener('click', () => {\n                    // Call debug function if available\n                    if (typeof window.debugHelpDocs === 'function') {\n                        window.debugHelpDocs();\n                    }\n                    \n                    // Show debug info in an alert\n                    const debugInfo = `\n                        window.activePanel: ${window.activePanel || 'not set'}\n                        Dashboard.activePanel: ${window.Dashboard?.activePanel || 'not set'}\n                        Panel title: ${document.getElementById('plugin-settings-title')?.textContent || 'not found'}\n                        Settings panel visible: ${!!document.querySelector('.settings-panel.visible')}\n                        Container ID: ${this.container.id || 'no id'}\n                        Data component ID: ${this.container.getAttribute('data-component-id') || 'none'}\n                    `;\n                    \n                    alert('Debug info:\\n' + debugInfo);\n                    console.log('Debug info:', debugInfo);\n                });\n            }\n            \n            this.isLoading = false;\n        }\n    };\n    \n    // Automatically initialize the help docs component when loaded as a script\n    window.initHelpDocsContainer = function() {\n        return window.HelpDocsComponent.initialize('help-docs-container');\n    };\n    \n    // Mark as initialized\n    window.helpDocsComponentInitialized = true;\n    \n    console.log('Help Docs Component script loaded successfully');\n})();\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/utils/help-docs-loader.js?")},"./src/utils/path-utils/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCacheBuster: () => (/* binding */ addCacheBuster),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getBaseUrl: () => (/* binding */ getBaseUrl),\n/* harmony export */   isLocalDevelopment: () => (/* binding */ isLocalDevelopment),\n/* harmony export */   resolvePath: () => (/* binding */ resolvePath)\n/* harmony export */ });\n/**\n * Path Utilities Module\n * Provides consistent path resolution for both local development and production environments\n */\n\n/**\n * Determines if the current environment is a local development environment\n * @returns {boolean} true if running in local development, false otherwise\n */\nconst isLocalDevelopment = () => {\n  return window.location.hostname === 'localhost' || \n         window.location.hostname === '127.0.0.1' ||\n         window.location.protocol === 'file:' ||\n         // Check for a special flag that can be set for local testing\n         window.forceLocalPaths === true;\n};\n\n/**\n * Gets the base URL for the application\n * @returns {string} The base URL (ending with a slash)\n */\nconst getBaseUrl = () => {\n  // If the base URL has already been determined by the injector, use that\n  if (window.squareHeroBaseUrl) {\n    return window.squareHeroBaseUrl;\n  }\n\n  // Otherwise, determine it based on the current script\n  const scripts = document.getElementsByTagName('script');\n  const currentScript = scripts[scripts.length - 1];\n  const scriptSrc = currentScript.src;\n\n  // Extract the base path from the script URL (everything up to the last /)\n  const baseUrl = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n  console.log('PathUtils: Derived base URL:', baseUrl);\n  \n  return baseUrl;\n};\n\n/**\n * Resolves a resource path based on the current environment\n * @param {string} path - The relative path to the resource\n * @param {Object} options - Configuration options\n * @param {string} options.version - The version tag to use (default: \"@0\")\n * @param {boolean} options.includeDistInPath - Whether to include '/dist/' in the production path (default: true)\n * @param {boolean} options.useRelativePath - Whether to use relative path even in production (default: false)\n * @returns {string} The resolved absolute URL to the resource\n */\nconst resolvePath = (path, options = {}) => {\n  const { \n    version = '@0',\n    includeDistInPath = true,\n    useRelativePath = false\n  } = options;\n\n  // Remove leading slash if it exists\n  const cleanPath = path.startsWith('/') ? path.substring(1) : path;\n  \n  // For local development or if specifically requested, use relative paths\n  if (isLocalDevelopment() || useRelativePath) {\n    const localPath = `/${cleanPath}`;\n    console.log(`PathUtils: Resolved local path: ${localPath}`);\n    return localPath;\n  }\n  \n  // For production, use the CDN path\n  const cdnBase = `https://cdn.jsdelivr.net/gh/squarehero-store/dashboard${version}`;\n  const distPath = includeDistInPath ? '/dist' : '';\n  const absolutePath = `${cdnBase}${distPath}/${cleanPath}`;\n  \n  console.log(`PathUtils: Resolved production path: ${absolutePath}`);\n  return absolutePath;\n};\n\n/**\n * Adds a cache buster parameter to a URL\n * @param {string} url - The URL to add a cache buster to\n * @returns {string} The URL with a cache buster parameter\n */\nconst addCacheBuster = (url) => {\n  const timestamp = new Date().getTime();\n  const separator = url.includes('?') ? '&' : '?';\n  return `${url}${separator}_cb=${timestamp}`;\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  isLocalDevelopment,\n  getBaseUrl,\n  resolvePath,\n  addCacheBuster\n});\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/utils/path-utils/index.js?")},"./src/utils/skeleton-loader.js":()=>{eval('/**\n * SquareHero Skeleton Loader System\n * A universal system for showing skeleton loading states across the dashboard\n */\n\nconst SkeletonLoader = (function() {\n    \n    // Templates for different skeleton components\n    const templates = {\n        // Plugin card skeleton\n        pluginCard: function() {\n            return `\n                <div class="plugin-card skeleton-wrapper">\n                    <div class="plugin-top-wrapper  skeleton-wrapper">\n                        <div class="skeleton-hexagon"></div>\n                        <div class="skeleton status-badge-skeleton"></div>\n                    </div>\n                    <div class="plugin-content skeleton-wrapper">\n                        <div class="plugin-header">\n                            <div class="skeleton skeleton-title"></div>\n                        </div>\n                        <div class="skeleton skeleton-text"></div>\n                        <div class="skeleton skeleton-text"></div>\n                    </div>\n                </div>\n            `;\n        },\n        \n        // News item skeleton\n        newsItem: function() {\n            return `\n                <div class="news-item skeleton-wrapper">\n                    <div class="skeleton skeleton-text small"></div>\n                    <div class="skeleton skeleton-title"></div>\n                </div>\n            `;\n        },\n        \n        // Property card skeleton - for real estate listings\n        propertyCard: function() {\n            return `\n                <div class="property-card-skeleton">\n                    <div class="skeleton property-image-skeleton"></div>\n                    <div class="property-content-skeleton">\n                        <div class="skeleton skeleton-title"></div>\n                        <div class="skeleton skeleton-text small"></div>\n                        <div class="skeleton skeleton-text medium"></div>\n                        <div class="property-details-skeleton">\n                            <div class="skeleton property-icon-skeleton"></div>\n                            <div class="skeleton property-icon-skeleton"></div>\n                            <div class="skeleton property-icon-skeleton"></div>\n                        </div>\n                    </div>\n                </div>\n            `;\n        },\n        \n        // Settings panel skeleton\n        settingsPanel: function() {\n            return `\n                <div class="settings-panel-skeleton">\n                    <div class="skeleton skeleton-title"></div>\n                    <div class="skeleton skeleton-text"></div>\n                    \n                    <div class="settings-form-skeleton">\n                        <div class="setting-row-skeleton">\n                            <div class="skeleton setting-label-skeleton"></div>\n                            <div class="skeleton setting-control-skeleton"></div>\n                        </div>\n                        <div class="setting-row-skeleton">\n                            <div class="skeleton setting-label-skeleton"></div>\n                            <div class="skeleton setting-control-skeleton"></div>\n                        </div>\n                        <div class="setting-row-skeleton">\n                            <div class="skeleton setting-label-skeleton"></div>\n                            <div class="skeleton setting-control-skeleton"></div>\n                        </div>\n                    </div>\n                </div>\n            `;\n        }\n    };\n    \n    // Load CSS\n    function loadStyles() {\n        // Check if styles are already loaded\n        if (document.querySelector(\'link[href="skeleton-loader.css"]\')) {\n            return;\n        }\n        \n        const link = document.createElement(\'link\');\n        link.rel = \'stylesheet\';\n        link.href = \'skeleton-loader.css\';\n        document.head.appendChild(link);\n    }\n    \n    /**\n     * Show skeleton loading for a container\n     * @param {string} containerId - ID of the container to show skeletons in\n     * @param {string} type - Type of skeleton to show (pluginCard, newsItem, etc.)\n     * @param {number} count - Number of skeleton items to show\n     */\n    function show(containerId, type, count = 3) {\n        // Get container\n        const container = document.getElementById(containerId);\n        if (!container) {\n            console.error(`Container with ID "${containerId}" not found.`);\n            return;\n        }\n        \n        // Hide existing content\n        Array.from(container.children).forEach(child => {\n            // Skip if it\'s already a skeleton\n            if (child.classList.contains(\'skeleton-wrapper\')) return;\n            // Otherwise hide the element\n            child.classList.add(\'skeleton-hidden\');\n        });\n        \n        // Get template function\n        const templateFn = templates[type];\n        if (!templateFn) {\n            console.error(`Skeleton template "${type}" not found.`);\n            return;\n        }\n        \n        // Create skeleton elements\n        let skeletonHTML = \'\';\n        for (let i = 0; i < count; i++) {\n            skeletonHTML += templateFn();\n        }\n        \n        // Add skeletons to container\n        container.innerHTML += skeletonHTML;\n        \n        return {\n            hide: () => hide(containerId)\n        };\n    }\n    \n    /**\n     * Hide skeleton loading and show real content\n     * @param {string} containerId - ID of the container to hide skeletons in\n     */\n    function hide(containerId) {\n        const container = document.getElementById(containerId);\n        if (!container) return;\n        \n        // Remove all skeleton elements\n        const skeletons = container.querySelectorAll(\'.skeleton-wrapper\');\n        skeletons.forEach(skeleton => skeleton.remove());\n        \n        // Show real content\n        Array.from(container.children).forEach(child => {\n            child.classList.remove(\'skeleton-hidden\');\n        });\n        \n        // Add loaded class to container\n        container.classList.add(\'loaded\');\n    }\n    \n    /**\n     * Create a custom skeleton\n     * @param {string} containerId - ID of the container to show skeletons in\n     * @param {Function} templateFn - Function that returns the HTML for the skeleton\n     */\n    function custom(containerId, templateFn) {\n        const container = document.getElementById(containerId);\n        if (!container) {\n            console.error(`Container with ID "${containerId}" not found.`);\n            return;\n        }\n        \n        // Hide existing content\n        Array.from(container.children).forEach(child => {\n            child.classList.add(\'skeleton-hidden\');\n        });\n        \n        // Add custom skeleton\n        container.innerHTML += templateFn();\n        \n        return {\n            hide: () => hide(containerId)\n        };\n    }\n    \n    /**\n     * Initialize the skeleton loader\n     */\n    function init() {\n        loadStyles();\n        console.log(\'SquareHero Skeleton Loader initialized\');\n    }\n    \n    // Return public API\n    return {\n        init,\n        show,\n        hide,\n        custom,\n        templates\n    };\n})();\n\n// Initialize when document is ready\ndocument.addEventListener(\'DOMContentLoaded\', function() {\n    SkeletonLoader.init();\n});\n\n// Make SkeletonLoader globally available\nwindow.SkeletonLoader = SkeletonLoader;\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/utils/skeleton-loader.js?')}},__webpack_module_cache__={},leafPrototypes,getProto,inProgress,dataWebpackPrefix;function __webpack_require__(n){var e=__webpack_module_cache__[n];if(void 0!==e)return e.exports;var t=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](t,t.exports,__webpack_require__),t.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return __webpack_require__.d(e,{a:e}),e},getProto=Object.getPrototypeOf?n=>Object.getPrototypeOf(n):n=>n.__proto__,__webpack_require__.t=function(n,e){if(1&e&&(n=this(n)),8&e)return n;if("object"==typeof n&&n){if(4&e&&n.__esModule)return n;if(16&e&&"function"==typeof n.then)return n}var t=Object.create(null);__webpack_require__.r(t);var i={};leafPrototypes=leafPrototypes||[null,getProto({}),getProto([]),getProto(getProto)];for(var s=2&e&&n;"object"==typeof s&&!~leafPrototypes.indexOf(s);s=getProto(s))Object.getOwnPropertyNames(s).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,__webpack_require__.d(t,i),t},__webpack_require__.d=(n,e)=>{for(var t in e)__webpack_require__.o(e,t)&&!__webpack_require__.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},__webpack_require__.f={},__webpack_require__.e=n=>Promise.all(Object.keys(__webpack_require__.f).reduce(((e,t)=>(__webpack_require__.f[t](n,e),e)),[])),__webpack_require__.u=n=>n+".js",__webpack_require__.miniCssF=n=>{},__webpack_require__.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),inProgress={},dataWebpackPrefix="squarehero-plugin-dashboard:",__webpack_require__.l=(n,e,t,i)=>{if(inProgress[n])inProgress[n].push(e);else{var s,o;if(void 0!==t)for(var a=document.getElementsByTagName("script"),r=0;r<a.length;r++){var l=a[r];if(l.getAttribute("src")==n||l.getAttribute("data-webpack")==dataWebpackPrefix+t){s=l;break}}s||(o=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,__webpack_require__.nc&&s.setAttribute("nonce",__webpack_require__.nc),s.setAttribute("data-webpack",dataWebpackPrefix+t),s.src=n),inProgress[n]=[e];var c=(e,t)=>{s.onerror=s.onload=null,clearTimeout(d);var i=inProgress[n];if(delete inProgress[n],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((n=>n(t))),e)return e(t)},d=setTimeout(c.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=c.bind(null,s.onerror),s.onload=c.bind(null,s.onload),o&&document.head.appendChild(s)}},__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},__webpack_require__.p="",(()=>{var n={"squarehero-dashboard-bundle":0};__webpack_require__.f.j=(e,t)=>{var i=__webpack_require__.o(n,e)?n[e]:void 0;if(0!==i)if(i)t.push(i[2]);else{var s=new Promise(((t,s)=>i=n[e]=[t,s]));t.push(i[2]=s);var o=__webpack_require__.p+__webpack_require__.u(e),a=new Error;__webpack_require__.l(o,(t=>{if(__webpack_require__.o(n,e)&&(0!==(i=n[e])&&(n[e]=void 0),i)){var s=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src;a.message="Loading chunk "+e+" failed.\n("+s+": "+o+")",a.name="ChunkLoadError",a.type=s,a.request=o,i[1](a)}}),"chunk-"+e,e)}};var e=(e,t)=>{var i,s,[o,a,r]=t,l=0;if(o.some((e=>0!==n[e]))){for(i in a)__webpack_require__.o(a,i)&&(__webpack_require__.m[i]=a[i]);if(r)r(__webpack_require__)}for(e&&e(t);l<o.length;l++)s=o[l],__webpack_require__.o(n,s)&&n[s]&&n[s][0](),n[s]=0},t=self.webpackChunksquarehero_plugin_dashboard=self.webpackChunksquarehero_plugin_dashboard||[];t.forEach(e.bind(null,0)),t.push=e.bind(null,t.push.bind(t))})(),__webpack_require__("./src/injector.js");var __webpack_exports__=__webpack_require__("./src/dashboard.js")})();