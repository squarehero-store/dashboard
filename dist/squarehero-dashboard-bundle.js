(()=>{"use strict";var __webpack_modules__={"./help-docs.css":
/*!***********************!*\
  !*** ./help-docs.css ***!
  \***********************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./help-docs.css?")},"./scss/dashboard.scss":
/*!*****************************!*\
  !*** ./scss/dashboard.scss ***!
  \*****************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./scss/dashboard.scss?")},"./src/injector.js":
/*!*************************!*\
  !*** ./src/injector.js ***!
  \*************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scss_dashboard_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/dashboard.scss */ "./scss/dashboard.scss");\n/* harmony import */ var _help_docs_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../help-docs.css */ "./help-docs.css");\n/**\n * SquareHero Dashboard Injector\n * This file is responsible for injecting the SquareHero dashboard into a target div\n * on a Squarespace page with ID \'squarehero-dashboard-container\'\n */\n\n// Import main SCSS file (this will be processed by webpack)\n\n\n\n// Create a self-executing function to avoid polluting the global namespace\n(function() {\n  // Get the base URL from the current script\n  const getBaseUrl = () => {\n    // When served from CDN, the path will be like:\n    // https://cdn.jsdelivr.net/gh/squarehero-store/dashboard@latest/squarehero-dashboard-bundle.js\n    const scripts = document.getElementsByTagName(\'script\');\n    const currentScript = scripts[scripts.length - 1];\n    const scriptSrc = currentScript.src;\n    \n    // Extract the base path from the script URL (everything up to the last /)\n    const baseUrl = scriptSrc.substring(0, scriptSrc.lastIndexOf(\'/\') + 1);\n    console.log(\'SquareHero Dashboard: Using base URL:\', baseUrl);\n    return baseUrl;\n  };\n  \n  // Store the base URL for use throughout the injector\n  const BASE_URL = getBaseUrl();\n  \n  // Cache busting function - adds timestamp to URL to prevent caching\n  const addCacheBuster = (url) => {\n    // Always add cache busting during development\n    // This includes localhost, Squarespace admin/preview environments\n    const timestamp = new Date().getTime();\n    const separator = url.includes(\'?\') ? \'&\' : \'?\';\n    return `${url}${separator}_cb=${timestamp}`;\n  };\n  \n  // Check if we\'re in a development environment\n  const isLocalDevelopment = window.location.hostname === \'localhost\' || \n                            window.location.hostname === \'127.0.0.1\' || \n                            window.location.protocol === \'file:\';\n                            \n  // Track whether styles have been loaded\n  let stylesLoaded = false;\n  \n  // Function to load external CSS file\n  function loadExternalCSS(url) {\n    return new Promise((resolve) => {\n      const link = document.createElement(\'link\');\n      link.rel = \'stylesheet\';\n      link.href = url;\n      \n      // Set up onload handler\n      link.onload = function() {\n        console.log(\'SquareHero Dashboard: CSS loaded:\', url);\n        stylesLoaded = true;\n        resolve(true);\n      };\n      \n      // Set up error handler\n      link.onerror = function() {\n        console.error(\'SquareHero Dashboard: Failed to load CSS:\', url);\n        resolve(false);\n      };\n      \n      document.head.appendChild(link);\n      \n      // Fallback resolve in case onload doesn\'t fire\n      setTimeout(() => {\n        if (!stylesLoaded) {\n          console.warn(\'SquareHero Dashboard: CSS load timeout, continuing anyway\');\n          resolve(true);\n        }\n      }, 3000);\n    });\n  }\n  \n  // Load all required CSS first, before any HTML is injected\n  async function loadAllStyles() {\n    console.log(\'SquareHero Dashboard: Loading CSS files...\');\n    \n    // Add a specific style to ensure login UI and dashboard are visible on Squarespace\n    const inlineStyle = document.createElement(\'style\');\n    inlineStyle.textContent = `\n      #squarehero-dashboard-container {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100vw;\n        height: 100vh;\n        display: block;\n        z-index: 999999;\n      }\n      \n      .sh-login-wrapper {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100vw;\n        height: 100vh;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background-color: #011E45;\n        z-index: 999999;\n      }\n      \n      /* Shared styles for login components */\n      .sh-login-container {\n        background: rgba(255, 255, 255, 0.1);\n        backdrop-filter: blur(10px);\n        -webkit-backdrop-filter: blur(10px);\n        border-radius: 4px;\n        padding: 40px;\n        width: 100%;\n        max-width: 400px;\n        position: relative;\n        z-index: 1;\n        border: 1px solid rgba(255, 255, 255, 0.1);\n      }\n      \n      .sh-login-header {\n        text-align: center;\n        margin-bottom: 30px;\n      }\n      \n      .sh-login-header h1 {\n        font-family: "Red Hat Display", sans-serif;\n        color: white;\n        margin: 20px 0 10px;\n        font-size: 24px;\n      }\n      \n      .sh-login-form {\n        display: flex;\n        flex-direction: column;\n        gap: 20px;\n      }\n      \n      .sh-login-input {\n        background: rgba(255, 255, 255, 0.05);\n        border: 1px solid rgba(255, 255, 255, 0.1);\n        padding: 12px 16px;\n        border-radius: 2px;\n        color: white;\n        font-size: 16px;\n      }\n      \n      .sh-login-button {\n        border: none;\n        background: none;\n        padding: 20px;\n        border-radius: 8px;\n        color: white;\n        font-weight: 600;\n        cursor: pointer;\n        position: relative;\n        font-family: "Roboto Condensed", sans-serif;\n        font-size: 16px;\n        font-weight: 700;\n        text-transform: uppercase;\n      }\n      \n      .sh-login-button:before {\n        content: "";\n        position: absolute;\n        inset: 0;\n        padding: 2px;\n        -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n        mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n        -webkit-mask-composite: xor;\n        mask-composite: exclude;\n        background: linear-gradient(90deg, #00D1FF 0%, #FF00E6 33.33%, #FF003D 66.66%, #00D1FF 100%);\n        background-size: 200% 100%;\n      }\n      \n      .alert {\n        position: fixed;\n        bottom: 20px;\n        left: 50%;\n        transform: translateX(-50%) translateY(100%);\n        background-color: #1d1f22;\n        color: white;\n        padding: 16px 24px;\n        border-radius: 4px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        z-index: 2000;\n        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n        transition: transform 0.3s ease;\n        min-width: 300px;\n      }\n      \n      .alert.visible {\n        transform: translateX(-50%) translateY(0);\n      }\n    `;\n    document.head.appendChild(inlineStyle);\n    \n    // Load the main bundled CSS\n    await loadExternalCSS(addCacheBuster(`${BASE_URL}squarehero-dashboard-styles.css`));\n    \n    console.log(\'SquareHero Dashboard: All CSS loaded\');\n    return true;\n  }\n  \n  // Create login UI\n  async function createLoginUI() {\n    console.log(\'SquareHero Dashboard: Creating login UI...\');\n    \n    let container = document.getElementById(\'squarehero-dashboard-container\');\n    \n    if (!container) {\n      console.log(\'SquareHero Dashboard: Creating container element for login UI\');\n      container = document.createElement(\'div\');\n      container.id = \'squarehero-dashboard-container\';\n      document.body.appendChild(container);\n    }\n\n    // Clear any existing content\n    container.innerHTML = \'\';\n    \n    // Create the login UI based on login.html structure\n    const loginHTML = `\n      <div class="sh-login-wrapper">\n        \x3c!-- Gradient Circle 1 --\x3e\n        <div class="gradient-circle-1">\n          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 639 701" fill="none">\n            <g filter="url(#a)" opacity=".4">\n              <circle cx="288.5" cy="350.5" r="256.5" fill="url(#b)" fill-opacity=".7"></circle>\n            </g>\n            <defs>\n              <linearGradient id="b" x1="288.5" x2="288.5" y1="94" y2="607" gradientUnits="userSpaceOnUse">\n                <stop stop-color="#00D1FF"></stop>\n                <stop offset=".45" stop-color="#A603F3"></stop>\n                <stop offset=".975" stop-color="#FF00E6"></stop>\n              </linearGradient>\n              <filter id="a" width="701" height="701" x="-62" y="0" color-interpolation-filters="sRGB"\n                filterUnits="userSpaceOnUse">\n                <feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood>\n                <feBlend in="SourceGraphic" in2="BackgroundImageFix" result="shape"></feBlend>\n                <feGaussianBlur result="effect1_foregroundBlur_200_26237" stdDeviation="47"></feGaussianBlur>\n              </filter>\n            </defs>\n          </svg>\n        </div>\n\n        \x3c!-- Gradient Circle 2 --\x3e\n        <div class="gradient-circle-2">\n          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 639 701" fill="none">\n            <g filter="url(#a)" opacity=".4">\n              <circle cx="288.5" cy="350.5" r="256.5" fill="url(#b)" fill-opacity=".7"></circle>\n            </g>\n            <defs>\n              <linearGradient id="b" x1="288.5" x2="288.5" y1="94" y2="607" gradientUnits="userSpaceOnUse">\n                <stop stop-color="#00D1FF"></stop>\n                <stop offset=".45" stop-color="#A603F3"></stop>\n                <stop offset=".975" stop-color="#FF00E6"></stop>\n              </linearGradient>\n              <filter id="a" width="701" height="701" x="-62" y="0" color-interpolation-filters="sRGB"\n                filterUnits="userSpaceOnUse">\n                <feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood>\n                <feBlend in="SourceGraphic" in2="BackgroundImageFix" result="shape"></feBlend>\n                <feGaussianBlur result="effect1_foregroundBlur_200_26237" stdDeviation="47"></feGaussianBlur>\n              </filter>\n            </defs>\n          </svg>\n        </div>\n\n        <div class="sh-login-container">\n          <div class="sh-login-header">\n            <img src="${BASE_URL}sh-logo.png" alt="SquareHero Logo" width="180">\n            <h1>Dashboard Login</h1>\n          </div>\n          <form class="sh-login-form" id="loginForm">\n            <input type="email" class="sh-login-input" name="email" placeholder="Enter email" required>\n            <input type="password" class="sh-login-input" name="password" placeholder="Enter password" required>\n            <button type="submit" class="sh-login-button">Login to Dashboard</button>\n            <a href="#" class="sh-forgot-password" id="forgotPassword">Forgot Password?</a>\n          </form>\n        </div>\n      </div>\n\n      \x3c!-- Alert Container --\x3e\n      <div class="alert" id="alert">\n        <div class="alert-message">\n          <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n            <circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2"/>\n            <path class="alert-icon-success" d="M8 12l3 3 6-6" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="display: none;"/>\n            <path class="alert-icon-error" d="M12 8v5m0 2v.5" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" style="display: none;"/>\n          </svg>\n          <span class="alert-text"></span>\n        </div>\n        <div class="alert-actions">\n          <button type="button" class="alert-close">Close</button>\n        </div>\n      </div>\n    `;\n    \n    container.innerHTML = loginHTML;\n    \n    // Log to help with debugging\n    console.log(\'SquareHero Dashboard: Login UI created\', container);\n    \n    // Initialize Firebase authentication\n    initializeLoginFunctionality();\n  }\n  \n  // Function to check authentication status\n  function checkAuthentication() {\n    return new Promise((resolve) => {\n      console.log(\'SquareHero Dashboard: Checking authentication...\');\n      \n      // Create and execute a module script to check auth\n      const script = document.createElement(\'script\');\n      script.type = "module";\n      script.textContent = `\n        // Import Firebase auth modules\n        import { initializeApp } from \'https://www.gstatic.com/firebasejs/11.5.0/firebase-app.js\';\n        import { getAuth, onAuthStateChanged } from \'https://www.gstatic.com/firebasejs/11.5.0/firebase-auth.js\';\n        \n        // Firebase configuration\n        const firebaseConfig = {\n          apiKey: "AIzaSyBEmTwE1DWjj4rGEV6UDGIhxVy4oZ5lqNg",\n          authDomain: "my-squarehero-hub.firebaseapp.com",\n          databaseURL: "https://my-squarehero-hub-default-rtdb.firebaseio.com",\n          projectId: "my-squarehero-hub",\n          storageBucket: "my-squarehero-hub.firebasestorage.app",\n          messagingSenderId: "233555790724",\n          appId: "1:233555790724:web:062d5a4b5d38f7445b2bd1",\n          measurementId: "G-YEMQV45TPL"\n        };\n        \n        try {\n          // Initialize Firebase\n          const app = initializeApp(firebaseConfig);\n          const auth = getAuth(app);\n          \n          console.log(\'SquareHero Dashboard: Auth check - Firebase initialized\');\n          \n          let authStateReceived = false;\n          \n          // Check auth state\n          onAuthStateChanged(auth, (user) => {\n            authStateReceived = true;\n            if (user) {\n              console.log(\'SquareHero Dashboard: User is authenticated:\', user.email);\n              window.authCheckResult(true);\n            } else {\n              console.log(\'SquareHero Dashboard: User is not authenticated\');\n              window.authCheckResult(false);\n            }\n          });\n          \n          // If no auth state change within 2 seconds, assume not authenticated\n          // This is a fallback in case onAuthStateChanged doesn\'t fire immediately\n          setTimeout(() => {\n            if (!authStateReceived) {\n              console.log(\'SquareHero Dashboard: Auth state check timed out, assuming not authenticated\');\n              window.authCheckResult(false);\n            }\n          }, 2000);\n        } catch (error) {\n          console.error(\'SquareHero Dashboard: Error checking authentication:\', error);\n          window.authCheckResult(false);\n        }\n      `;\n      \n      // Set up callback function for the auth check script\n      window.authCheckResult = function(isAuthenticated) {\n        console.log(\'SquareHero Dashboard: Auth check result:\', isAuthenticated);\n        resolve(isAuthenticated);\n        // Don\'t delete the function as it might be needed again\n      };\n      \n      // Add the script to the document\n      document.head.appendChild(script);\n      \n      // Set a global fallback timeout in case the script completely fails\n      setTimeout(() => {\n        console.warn(\'SquareHero Dashboard: Auth check global timeout reached, forcing login screen\');\n        resolve(false); // Force showing login screen if everything fails\n      }, 5000);\n    });\n  }\n  \n  // Add Squarespace theme color variables to the root\n  function addSquarespaceThemeColors() {\n    const cssVars = `\n      <style>\n        :root {\n          /* White */\n          --white-hsl: 0, 0%, 100%;\n\n          /* Light cream */\n          --lightAccent-hsl: 36, 100%, 97%;\n\n          /* Gold */\n          --accent-hsl: 36, 57%, 58%;\n\n          /* Olive green */\n          --darkAccent-hsl: 82, 23%, 41%;\n\n          /* Dark green */\n          --black-hsl: 94, 26%, 21%;\n        }\n      </style>\n    `;\n    \n    document.head.insertAdjacentHTML(\'beforeend\', cssVars);\n  }\n  \n  // Initialize when DOM is ready with revised flow:\n  // 1. Load CSS first\n  // 2. Check authentication\n  // 3. Show appropriate UI (login or dashboard)\n  async function init() {\n    console.log(\'SquareHero Dashboard: Initializing...\');\n    \n    // Add Squarespace theme colors\n    addSquarespaceThemeColors();\n    \n    // Load CSS files first to ensure proper styling from the start\n    await loadAllStyles();\n    \n    // After CSS is loaded, check authentication and display appropriate UI\n    const isAuthenticated = await checkAuthentication();\n    \n    if (isAuthenticated) {\n      console.log(\'SquareHero Dashboard: User is authenticated, showing dashboard\');\n      injectDashboard();\n    } else {\n      console.log(\'SquareHero Dashboard: User is not authenticated, showing login screen\');\n      createLoginUI();\n    }\n  }\n  \n  if (document.readyState === \'loading\') {\n    document.addEventListener(\'DOMContentLoaded\', init);\n  } else {\n    init();\n  }\n})();\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/injector.js?')}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];if(void 0!==e)return e.exports;var t=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](t,t.exports,__webpack_require__),t.exports}__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/injector.js")})();