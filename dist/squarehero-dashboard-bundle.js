(()=>{"use strict";var __webpack_modules__={"./src/js/core/dashboard.js":
/*!**********************************!*\
  !*** ./src/js/core/dashboard.js ***!
  \**********************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _services_firebase_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/firebase-service.js */ \"./src/js/services/firebase-service.js\");\n/* harmony import */ var _services_plugin_registry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/plugin-registry.js */ \"./src/js/services/plugin-registry.js\");\n/* harmony import */ var _services_settings_registry_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/settings-registry.js */ \"./src/js/services/settings-registry.js\");\n/* harmony import */ var _ui_cards_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ui/cards.js */ \"./src/js/ui/cards.js\");\n/* harmony import */ var _ui_discover_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../ui/discover.js */ \"./src/js/ui/discover.js\");\n/* harmony import */ var _ui_notifications_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ui/notifications.js */ \"./src/js/ui/notifications.js\");\n/* harmony import */ var _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../ui/settings-panel.js */ \"./src/js/ui/settings-panel.js\");\n/* harmony import */ var _ui_wizards_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ui/wizards.js */ \"./src/js/ui/wizards.js\");\n/**\n * Core Dashboard Module\n * Main entry point for the SquareHero Dashboard.\n */\n\n// Import services\n\n\n\n\n// Import UI modules\n\n\n\n\n\n\n// Define the Dashboard object\nconst Dashboard = {\n    // Public services (will be accessible from window.Dashboard)\n    FirebaseService: _services_firebase_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    PluginRegistry: _services_plugin_registry_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    PluginSettingsRegistry: _services_settings_registry_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    \n    // Private properties\n    _availablePlugins: [],\n    _installedPlugins: [],\n    _loadingStates: {},\n    _isInitializationInProgress: false,\n    \n    // Cache DOM elements\n    elements: {\n        pluginCardsContainer: document.getElementById('plugin-cards-container'),\n        newsItemsContainer: document.getElementById('news-items-container'),\n        settingsPanel: document.getElementById('settings-panel'),\n        panelContent: document.getElementById('panel-content'),\n        closeButton: document.getElementById('close-panel'),\n        overlay: document.getElementById('overlay'),\n        dashboardTabs: document.querySelector('.dashboard-tabs'),\n        dashboardTabContents: document.querySelectorAll('.dashboard-tab-content')\n    },\n    \n    /**\n     * Initialize the dashboard\n     * @returns {Promise<void>}\n     */\n    init: async function() {\n        // Prevent double initialization with a global flag that persists\n        if (this._isInitializationInProgress || window.dashboardInitialized) {\n            console.log('🎯 [Dashboard] Initialization already in progress or completed, skipping');\n            return;\n        }\n        \n        // Set both flags to prevent any further initialization attempts\n        this._isInitializationInProgress = true;\n        window.dashboardInitialized = true;\n        \n        try {\n            console.log('🎯 [Dashboard] Starting initialization');\n            \n            // First initialize the licensing system\n            console.log('🎯 [Dashboard] Initializing licensing system');\n            if (window.SquareHeroLicensing) {\n                try {\n                    await window.SquareHeroLicensing.initialize({\n                        debug: true,\n                        autoSyncWithFirebase: true\n                    });\n                    console.log('🎯 [Dashboard] Licensing system initialized');\n                } catch (licenseError) {\n                    console.error('🎯 [Dashboard] Error initializing licensing system:', licenseError);\n                    // Continue with initialization even if licensing fails\n                }\n            } else {\n                console.warn('🎯 [Dashboard] Licensing system not available');\n            }\n            \n            // Then load the skeleton loader\n            await this.loadSkeletonLoader();\n            console.log('🎯 [Dashboard] Skeleton loader loaded');\n\n            // Set up event listeners\n            this.initEventListeners();\n            console.log('🎯 [Dashboard] Event listeners initialized');\n\n            // Initialize tab event listeners\n            this.initTabEventListeners();\n\n            // Show skeleton loaders BEFORE loading any data\n            if (window.SkeletonLoader) {\n                console.log('🎯 [Dashboard] Creating skeleton loaders');\n                this._loadingStates.plugins = window.SkeletonLoader.show('plugin-cards-container', 'pluginCard', 3);\n                this._loadingStates.news = window.SkeletonLoader.show('news-items-container', 'newsItem', 4);\n                console.log('🎯 [Dashboard] Skeleton loaders created:', this._loadingStates);\n            } else {\n                console.error('🎯 [Dashboard] SkeletonLoader not available');\n            }\n\n            // Initialize Firebase\n            await _services_firebase_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].initialize();\n            console.log('🎯 [Dashboard] Firebase initialized');\n\n            // Wait for authentication to be ready\n            console.log('🎯 [Dashboard] Checking authentication status');\n            if (!window.SecureFirebaseAuth || !window.SecureFirebaseAuth.isInitialized) {\n                console.warn('🎯 [Dashboard] Firebase authentication not initialized, attempting to initialize');\n                // Try to manually initialize authentication\n                if (window.SecureFirebaseAuth && typeof window.SecureFirebaseAuth.initialize === 'function') {\n                    await window.SecureFirebaseAuth.initialize();\n                }\n            }\n\n            // If user isn't authenticated yet, prompt them to authenticate first\n            const isAuthenticated = await this.ensureAuthenticated();\n            console.log(`🎯 [Dashboard] Authentication status: ${isAuthenticated ? 'Authenticated ✓' : 'Not authenticated ✗'}`);\n\n            // Load all available plugins from JSON\n            this._availablePlugins = await this.loadPlugins();\n            console.log('🎯 [Dashboard] Available plugins loaded:', this._availablePlugins);\n\n            // Detect which plugins are actually installed on this site - DO THIS FIRST\n            this._installedPlugins = this.detectInstalledPlugins(this._availablePlugins);\n            console.log('🎯 [Dashboard] Installed plugins detected:', this._installedPlugins);\n\n            // Make installedPlugins globally available\n            window.installedPlugins = this._installedPlugins;\n\n            // Now render discover plugins grid AFTER detecting installed plugins\n            console.log('🎯 [Dashboard] Rendering discover plugins with detected installed plugins');\n            _ui_discover_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].renderDiscoverPluginCards(this._availablePlugins, this._installedPlugins);\n\n            // Only proceed with loading settings if we have installed plugins\n            if (this._installedPlugins.length > 0) {\n                console.log('🎯 [Dashboard] Loading settings for installed plugins');\n                try {\n                    // Load settings for all detected plugins\n                    await Promise.all(this._installedPlugins.map(async plugin => {\n                        try {\n                            // For each plugin, try to load its settings from Firebase\n                            const settings = await _services_firebase_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getPluginSettings(plugin.id, plugin.defaultSettings || {});\n                            \n                            // Update the plugin object with the loaded settings\n                            plugin.settings = settings;\n                            \n                            // Update plugin status based on settings\n                            plugin.status = settings.enabled !== false ? 'enabled' : 'disabled';\n                            \n                            console.log(`🎯 [Dashboard] Settings loaded for plugin: ${plugin.id}`, settings);\n                            \n                            // Load plugin scripts if specified\n                            if (plugin.moduleScripts && plugin.moduleScripts.length > 0) {\n                                await this.loadPluginScripts(plugin);\n                            }\n                            \n                            return settings;\n                        } catch (settingsError) {\n                            console.error(`🎯 [Dashboard] Error loading settings for plugin: ${plugin.id}`, settingsError);\n                            \n                            // Set default settings if there was an error\n                            plugin.settings = plugin.defaultSettings || { enabled: true };\n                            plugin.status = 'enabled'; // Default to enabled\n                            \n                            return plugin.settings;\n                        }\n                    }));\n                    \n                    // Render all plugin cards after settings are loaded\n                    console.log('🎯 [Dashboard] All plugin settings loaded, rendering cards');\n                    await _ui_cards_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].renderPluginCards(this._installedPlugins, this.elements.pluginCardsContainer, this._loadingStates);\n                    \n                } catch (error) {\n                    console.error('🎯 [Dashboard] Error loading plugin settings:', error);\n                    \n                    // Render cards anyway with available data\n                    await _ui_cards_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].renderPluginCards(this._installedPlugins, this.elements.pluginCardsContainer, this._loadingStates);\n                }\n            } else {\n                console.log('🎯 [Dashboard] No installed plugins detected, showing empty state');\n                this.elements.pluginCardsContainer.innerHTML = '<p>No plugins installed on this site. Visit the SquareHero plugin store to browse available plugins.</p>';\n                \n                // Hide skeleton loader\n                if (this._loadingStates.plugins) {\n                    this._loadingStates.plugins.hide();\n                }\n            }\n\n            // Load and render news items\n            await this.loadNewsItems();\n\n            console.log('🎯 [Dashboard] Dashboard initialized successfully!');\n            this._isInitializationInProgress = false;\n            \n        } catch (error) {\n            console.error('🎯 [Dashboard] Error initializing dashboard:', error);\n            this._isInitializationInProgress = false;\n            \n            // Hide all skeletons in case of error\n            if (this._loadingStates.plugins) {\n                this._loadingStates.plugins.hide();\n            }\n            if (this._loadingStates.news) {\n                this._loadingStates.news.hide();\n            }\n\n            this.elements.pluginCardsContainer.innerHTML = `\n                <div class=\"error-message\">\n                    <p>Error initializing dashboard: ${error.message}</p>\n                    <button class=\"button\" id=\"retry-auth-button\">Retry Authentication</button>\n                </div>\n            `;\n            \n            // Add a retry button event listener\n            setTimeout(() => {\n                const retryButton = document.getElementById('retry-auth-button');\n                if (retryButton) {\n                    retryButton.addEventListener('click', () => {\n                        location.reload();\n                    });\n                }\n            }, 0);\n        }\n    },\n    \n    /**\n     * Load the skeleton loader library if not already loaded\n     * @returns {Promise<void>}\n     */\n    loadSkeletonLoader: async function() {\n        console.log('🎯 [Dashboard] Loading skeleton loader');\n        \n        // Check if SkeletonLoader is already available\n        if (window.SkeletonLoader) {\n            console.log('🎯 [Dashboard] SkeletonLoader already loaded');\n            return;\n        }\n\n        // Load both CSS and JS\n        return new Promise((resolve, reject) => {\n            // First load the skeleton CSS\n            const link = document.createElement('link');\n            link.rel = 'stylesheet';\n            link.href = 'skeleton-loader.css';\n            document.head.appendChild(link);\n            \n            // Then load the JS\n            const script = document.createElement('script');\n            script.src = 'skeleton-loader.js';\n            script.onload = () => {\n                console.log('🎯 [Dashboard] SkeletonLoader script loaded');\n                resolve();\n            };\n            script.onerror = (err) => {\n                console.error('🎯 [Dashboard] Error loading SkeletonLoader:', err);\n                reject(err);\n            };\n            document.head.appendChild(script);\n        });\n    },\n    \n    /**\n     * Check authentication status directly and wait if needed\n     * @param {number} maxRetries - Maximum number of retry attempts\n     * @returns {Promise<boolean>} Whether the user is authenticated\n     */\n    ensureAuthenticated: async function(maxRetries = 3) {\n        console.log('🔒 [Auth-Check] Checking authentication status...');\n        \n        // First check if already authenticated\n        if (_services_firebase_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAuthenticated()) {\n            console.log('🔒 [Auth-Check] Already authenticated ✓');\n            return true;\n        }\n        \n        console.log('🔒 [Auth-Check] Not currently authenticated, checking Firebase auth directly');\n        \n        // Try to get authentication status directly from Firebase\n        if (window.SecureFirebaseAuth && window.SecureFirebaseAuth.auth) {\n            const user = window.SecureFirebaseAuth.auth.currentUser;\n            if (user) {\n                console.log('🔒 [Auth-Check] Firebase auth found authenticated user:', user.email);\n                return true;\n            }\n        }\n        \n        // Wait and retry a few times - auth might be in progress\n        for (let i = 0; i < maxRetries; i++) {\n            console.log(`🔒 [Auth-Check] Waiting for authentication (attempt ${i + 1}/${maxRetries})...`);\n            \n            // Wait 1 second between attempts\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            \n            // Check again\n            if (_services_firebase_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAuthenticated()) {\n                console.log('🔒 [Auth-Check] Authentication successful on retry ✓');\n                return true;\n            }\n        }\n        \n        console.log('🔒 [Auth-Check] Authentication check failed after retries ✗');\n        return false;\n    },\n    \n    /**\n     * Load plugins from JSON\n     * @returns {Promise<Array>} Array of available plugins\n     */\n    loadPlugins: async function() {\n        try {\n            // Don't show any text loading indicators at all\n            // Just return the data and let the caller handle the loading UI\n            const response = await fetch('https://cdn.jsdelivr.net/gh/squarehero-store/dashboard@0/plugins.json');\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n\n            const data = await response.json();\n            const plugins = data.plugins || [];\n            \n            // If licensing system is available, check license status for each plugin\n            if (window.SquareHeroLicensing && window.SquareHeroLicensing._initialized) {\n                console.log('🎯 [Dashboard] Checking license status for plugins');\n                \n                // For each plugin, check its license status\n                for (const plugin of plugins) {\n                    try {\n                        // Get license data for this plugin\n                        const licenseData = await window.SquareHeroLicensing.getPluginData(plugin.id);\n                        \n                        // Update plugin with license status\n                        if (licenseData) {\n                            plugin.licenseStatus = licenseData.status || 'inactive';\n                            plugin.licenseKey = licenseData.license_key;\n                            \n                            // If there's trial data, add it\n                            if (licenseData.trial_start) {\n                                plugin.trialData = {\n                                    startedAt: licenseData.trial_start,\n                                    expiresAt: licenseData.trial_end\n                                };\n                            }\n                            \n                            console.log(`🎯 [Dashboard] License status for ${plugin.id}: ${plugin.licenseStatus}`);\n                        } else {\n                            plugin.licenseStatus = 'inactive';\n                        }\n                    } catch (licenseError) {\n                        console.error(`🎯 [Dashboard] Error getting license status for ${plugin.id}:`, licenseError);\n                        plugin.licenseStatus = 'inactive';\n                    }\n                }\n            } else {\n                console.log('🎯 [Dashboard] Licensing system not available, skipping license checks');\n                // Set all plugins to 'inactive' license status\n                plugins.forEach(plugin => {\n                    plugin.licenseStatus = 'inactive';\n                });\n            }\n            \n            return plugins;\n        } catch (error) {\n            console.error('Error loading plugins:', error);\n            return [];\n        }\n    },\n    \n    /**\n     * Detect installed plugins based on script tags\n     * @param {Array} allPlugins - Array of all available plugins\n     * @returns {Array} Array of installed plugins\n     */\n    detectInstalledPlugins: function(allPlugins) {\n        // Find all script tags with our custom attribute\n        const installedIds = [];\n        console.log('🔍 [DEBUG-INSTALLED] Looking for script tags with data-squarehero-plugin attribute');\n        document.querySelectorAll('script[data-squarehero-plugin]').forEach(script => {\n            const pluginId = script.getAttribute('data-squarehero-plugin');\n            installedIds.push(pluginId);\n            console.log(`🔍 [DEBUG-INSTALLED] Found installed plugin: ${pluginId}`);\n        });\n\n        console.log('🔍 [DEBUG-INSTALLED] All detected installed plugin IDs:', installedIds);\n\n        // Filter available plugins to only include those that are installed\n        const detectedPlugins = allPlugins.filter(plugin => installedIds.includes(plugin.id));\n        console.log('🔍 [DEBUG-INSTALLED] Matched installed plugins from available plugins:', detectedPlugins.map(p => p.id));\n\n        // For development/testing purposes only:\n        // If we're in development mode, show a message but still return empty array\n        if (detectedPlugins.length === 0 && window.location.hostname === 'localhost') {\n            console.log('🔍 [DEBUG-INSTALLED] No installed plugins detected. In production, no plugins would be shown.');\n            // Uncomment the next line during development to see all plugins anyway\n            return allPlugins;\n        }\n\n        return detectedPlugins;\n    },\n    \n    /**\n     * Load plugin scripts dynamically\n     * @param {Object} plugin - The plugin object\n     * @returns {Promise<void>}\n     */\n    loadPluginScripts: function(plugin) {\n        return new Promise((resolve) => {\n            if (!plugin.moduleScripts || plugin.moduleScripts.length === 0) {\n                resolve();\n                return;\n            }\n\n            let loaded = 0;\n            const totalScripts = plugin.moduleScripts.length;\n\n            plugin.moduleScripts.forEach(scriptPath => {\n                const script = document.createElement('script');\n                script.src = scriptPath;\n                script.onload = () => {\n                    loaded++;\n                    console.log(`Loaded plugin script ${loaded}/${totalScripts} for ${plugin.id}: ${scriptPath}`);\n                    if (loaded === totalScripts) {\n                        resolve();\n                    }\n                };\n                script.onerror = (err) => {\n                    loaded++;\n                    console.error(`Error loading script for ${plugin.id}: ${scriptPath}`, err);\n                    if (loaded === totalScripts) {\n                        resolve();\n                    }\n                };\n                document.head.appendChild(script);\n            });\n        });\n    },\n    \n    /**\n     * Load news items from Firebase\n     * @returns {Promise<void>}\n     */\n    loadNewsItems: async function() {\n        try {\n            // Logging for debugging\n            console.log(\"loadNewsItems() - Dashboard.FirebaseService.db:\", _services_firebase_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].db);\n            console.log(\"loadNewsItems() - typeof Dashboard.FirebaseService.db:\", typeof _services_firebase_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].db);\n\n            // Use firebase global object instead of dynamic imports\n            if (!window.firebase || !window.firebase.database) {\n                console.error('Firebase database is not available globally');\n                this.elements.newsItemsContainer.innerHTML = '<p>Error loading news items.</p>';\n                if (this._loadingStates.news) {\n                    this._loadingStates.news.hide();\n                }\n                return;\n            }\n\n            // Use global firebase references\n            const newsRef = window.firebase.database.ref(_services_firebase_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].db, 'news');\n            const snapshot = await window.firebase.database.get(newsRef);\n            const newsData = snapshot.val();\n\n            if (newsData) {\n                // Convert news data to an array and sort by timestamp (latest first)\n                const newsItems = Object.entries(newsData)\n                    .map(([key, value]) => ({\n                        ...value,\n                        id: key, // Include the key if you need it later\n                    }))\n                    .sort((a, b) => b.timestamp - a.timestamp); // Sort by timestamp descending\n\n                // Format timestamp into a human-readable date\n                const formattedNewsItems = newsItems.map(item => ({\n                    date: new Date(item.timestamp).toLocaleDateString('en-US', {\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric',\n                    }),\n                    title: item.title,\n                    content: item.content, // Include content if you want to display it\n                }));\n\n                // Render the news items\n                this.renderNewsItems(formattedNewsItems);\n            } else {\n                // No news items found\n                this.renderNewsItems([]); // Pass an empty array\n            }\n\n            // Simulate network delay\n            await new Promise(resolve => setTimeout(resolve, 400));\n\n            // Hide the skeleton loader\n            if (this._loadingStates.news) {\n                this._loadingStates.news.hide();\n            }\n        } catch (error) {\n            console.error('Error loading news items from Firebase:', error);\n            // Handle the error appropriately (e.g., display an error message)\n            this.elements.newsItemsContainer.innerHTML = '<p>Error loading news items.</p>';\n            if (this._loadingStates.news) {\n                this._loadingStates.news.hide();\n            }\n        }\n    },\n    \n    /**\n     * Render news items\n     * @param {Array} newsItems - Array of news items\n     */\n    renderNewsItems: function(newsItems) {\n        if (!newsItems || !newsItems.length) {\n            this.elements.newsItemsContainer.innerHTML = '<p>No news items available.</p>';\n            return;\n        }\n\n        // Create HTML for news items\n        const newsHTML = newsItems.map(item => `\n        <div class=\"news-item\">\n            <p class=\"news-date\">${item.date}</p>\n            <h3 class=\"news-title\">${item.title}</h3>\n            <p class=\"news-content\">${item.content || ''}</p>\n        </div>\n        `).join('');\n\n        // Update container\n        this.elements.newsItemsContainer.innerHTML = newsHTML;\n    },\n    \n    /**\n     * Function to switch tabs\n     * @param {string} tabId - The ID of the tab to switch to\n     */\n    switchTab: function(tabId) {\n        // Remove 'active' class from all tabs and tab contents\n        this.elements.dashboardTabs.querySelectorAll('.dashboard-tab').forEach(tab => {\n            tab.classList.remove('active');\n        });\n        this.elements.dashboardTabContents.forEach(content => {\n            content.classList.remove('active');\n        });\n\n        // Add 'active' class to the clicked tab and corresponding content\n        document.querySelector(`.dashboard-tab[data-tab=\"${tabId}\"]`).classList.add('active');\n        document.getElementById(`${tabId}-tab`).classList.add('active');\n    },\n    \n    /**\n     * Initialize tab event listeners\n     */\n    initTabEventListeners: function() {\n        console.log(\"initTabEventListeners called\");\n        this.elements.dashboardTabs.addEventListener('click', (event) => {\n            if (event.target.classList.contains('dashboard-tab')) {\n                const tabId = event.target.getAttribute('data-tab');\n                this.switchTab(tabId);\n            }\n        });\n    },\n    \n    /**\n     * Initialize event listeners\n     */\n    initEventListeners: function() {\n        // Initialize settings panel event listeners\n        _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].initEventListeners();\n\n        // Handle logout button click\n        document.getElementById('logout-button').addEventListener('click', async () => {\n            try {\n                // Use the global Firebase auth object instead of dynamic import\n                if (window.firebase && window.firebase.auth) {\n                    const auth = window.firebase.auth();\n                    await auth.signOut();\n                    window.location.href = 'login.html';\n                } else if (window.SecureFirebaseAuth && window.SecureFirebaseAuth.auth) {\n                    // Fallback to SecureFirebaseAuth if it exists\n                    await window.SecureFirebaseAuth.auth.signOut();\n                    window.location.href = 'login.html';\n                } else {\n                    console.error('Firebase auth not available for logout');\n                }\n            } catch (error) {\n                console.error('Error signing out:', error);\n            }\n        });\n    },\n    \n    /**\n     * Load a plugin's settings module and open the panel\n     * @param {string} pluginId - The plugin ID\n     */\n    loadPluginSettingsModule: function(pluginId) {\n        try {\n            // Get the plugin data\n            const plugin = this._installedPlugins.find(p => p.id === pluginId);\n            if (!plugin) {\n                throw new Error(`Plugin ${pluginId} not found`);\n            }\n\n            // Reset unsaved changes flag for new panel\n            _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].setHasUnsavedChanges(false);\n            _ui_notifications_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].hideNotification();\n\n            // Show panel immediately with loading state\n            this.elements.settingsPanel.classList.add('visible');\n\n            // Add panel width class based on plugin setting\n            this.elements.settingsPanel.classList.remove('panel-width-half', 'panel-width-full');\n            const panelWidth = plugin.panelWidth || 'half';\n            this.elements.settingsPanel.classList.add(`panel-width-${panelWidth}`);\n\n            this.elements.overlay.classList.add('visible');\n            this.elements.settingsPanel.setAttribute('aria-hidden', 'false');\n\n            const pluginSettingsTitle = document.getElementById('plugin-settings-title');\n            if (pluginSettingsTitle) {\n                pluginSettingsTitle.textContent = `${plugin.name}`;\n            }\n\n            // Show skeleton loading for settings panel\n            if (window.SkeletonLoader) {\n                this._loadingStates.settings = window.SkeletonLoader.show('panel-content', 'settingsPanel');\n            } else {\n                // Show a simple loading indicator if skeleton loader is not available\n                this.elements.panelContent.innerHTML = '<div class=\"loading-indicator\"><p>Loading settings...</p></div>';\n            }\n\n            // Set active panel\n            _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].setActivePanel(pluginId);\n\n            // Also set data attribute on the panel for easier detection\n            if (this.elements.settingsPanel) {\n                this.elements.settingsPanel.setAttribute('data-plugin-id', pluginId);\n                console.log('Added data-plugin-id attribute to settings panel');\n            }\n\n            // Check if this plugin has a wizard and should show it\n            const hasWizard = plugin.hasWizard === true;\n\n            // Simple check - are wizards enabled?\n            if (hasWizard && _ui_wizards_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].areWizardsEnabled()) {\n                console.log(`Plugin ${pluginId} has a wizard and wizards are enabled`);\n\n                // Load the wizard module if needed\n                _ui_wizards_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].loadWizardScript(plugin)\n                    .then(wizardModule => {\n                        if (wizardModule && wizardModule.shouldShowWizard && wizardModule.shouldShowWizard()) {\n                            console.log(`Wizard should be shown for ${pluginId}`);\n                            \n                            // Hide skeleton loader\n                            if (this._loadingStates.settings) {\n                                this._loadingStates.settings.hide();\n                            }\n                            \n                            // Start the wizard\n                            _ui_wizards_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].showWizard(pluginId, this._installedPlugins);\n                        } else {\n                            console.log(`Wizard should not be shown for ${pluginId}, showing regular settings`);\n                            this.renderPluginSettings(plugin);\n                        }\n                    })\n                    .catch(err => {\n                        console.error(`Error loading wizard for ${pluginId}:`, err);\n                        // Fall back to normal settings\n                        this.renderPluginSettings(plugin);\n                    });\n            } else {\n                // If wizard is disabled or plugin doesn't have a wizard\n                if (hasWizard) {\n                    console.log(`Wizard for ${pluginId} is disabled globally`);\n                }\n                // No wizard, just render the regular settings\n                this.renderPluginSettings(plugin);\n            }\n        } catch (error) {\n            console.error(`Error loading settings for plugin ${pluginId}:`, error);\n\n            // Hide skeleton loading if it was shown\n            if (this._loadingStates.settings) {\n                this._loadingStates.settings.hide();\n            }\n\n            this.elements.panelContent.innerHTML = `\n            <div class=\"error-message\">\n                <p>Error loading settings for this plugin.</p>\n                <button class=\"button cancel-button\">Close</button>\n            </div>\n            `;\n\n            const cancelButton = this.elements.panelContent.querySelector('.cancel-button');\n            if (cancelButton) {\n                cancelButton.addEventListener('click', _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].handleClosePanel);\n            }\n        }\n    },\n    \n    /**\n     * Render plugin settings UI\n     * @param {Object} plugin - The plugin object\n     */\n    renderPluginSettings: function(plugin) {\n        const pluginId = plugin.id;\n        \n        // Check if the plugin has a registered settings schema\n        const schema = _services_settings_registry_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getSchema(pluginId);\n        const customModule = _services_plugin_registry_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].get(pluginId, 'settings');\n\n        // Generate settings panel content\n        let panelHTML = '';\n\n        if (schema) {\n            const categories = schema.filter(item => item.type === 'category');\n            \n            if (categories.length > 0) {\n                // Create tabbed interface for categories\n                let tabButtons = '<div class=\"settings-tabs\">';\n                let tabContents = '<div class=\"settings-content\">';\n                \n                // Add tabs for each category\n                categories.forEach((category, index) => {\n                    const isActive = index === 0 ? 'active' : '';\n                    \n                    // Add tab button\n                    tabButtons += `\n                        <button class=\"tab-button ${isActive}\" data-tab-target=\"${category.id}\">${category.label}</button>\n                    `;\n                    \n                    // Add tab content\n                    tabContents += `\n                        <div class=\"tab-content ${isActive}\" data-tab-content=\"${category.id}\">\n                            <form class=\"settings-form\">\n                                <div class=\"settings-section\">\n                                    ${window.SettingsComponents.generateFormContent(category.components)}\n                                </div>\n                            </form>\n                        </div>\n                    `;\n                });\n                \n                // Add licensing tab if needed\n                tabButtons += `<button class=\"tab-button\" data-tab-target=\"licensing\">Licensing</button>`;\n                tabContents += `\n                    <div class=\"tab-content\" data-tab-content=\"licensing\">\n                        <div class=\"settings-form\">\n                            ${_ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].generateLicensingUI(plugin).outerHTML}\n                        </div>\n                    </div>\n                `;\n                \n                // Close the tab containers\n                tabButtons += '</div>';\n                tabContents += '</div>';\n                \n                // Combine everything\n                panelHTML = `\n                    ${tabButtons}\n                    ${tabContents}\n                    <div class=\"form-actions\">\n                        <button type=\"button\" class=\"button cancel-button\">Cancel</button>\n                        <button type=\"button\" class=\"button save-button\">Save</button>\n                    </div>\n                `;\n            } else {\n                // Simple form without categories\n                panelHTML = `\n                    <form class=\"settings-form\">\n                        <div class=\"settings-section\">\n                            ${window.SettingsComponents.generateFormContent(schema)}\n                        </div>\n                    </form>\n                    <div class=\"settings-section licensing-section\">\n                        ${_ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].generateLicensingUI(plugin).outerHTML}\n                    </div>\n                    <div class=\"form-actions\">\n                        <button type=\"button\" class=\"button cancel-button\">Cancel</button>\n                        <button type=\"button\" class=\"button save-button\">Save</button>\n                    </div>\n                `;\n            }\n        } else {\n            // Fallback for plugins with no registered settings schema\n            console.log(`🔍 [DEBUG-SETTINGS] Plugin ${plugin.id} has no registered schema`);\n            \n            // Simple toggle and licensing UI\n            panelHTML = `\n                <div class=\"settings-tabs\">\n                    <button class=\"tab-button active\" data-tab-target=\"settings\">Settings</button>\n                    <button class=\"tab-button\" data-tab-target=\"licensing\">Licensing</button>\n                </div>\n                <div class=\"settings-content\">\n                    <div class=\"tab-content active\" data-tab-content=\"settings\">\n                        <form class=\"settings-form\">\n                            <div class=\"settings-section\">\n                                <div class=\"setting-group toggle-group\">\n                                    <label class=\"toggle-switch\">\n                                        <input type=\"checkbox\" id=\"enabled\" name=\"enabled\" ${plugin.settings?.enabled !== false ? 'checked' : ''}>\n                                        <span class=\"toggle-slider\"></span>\n                                    </label>\n                                    <div class=\"toggle-labels\">\n                                        <span class=\"toggle-title\">Plugin Enabled</span>\n                                        <span class=\"toggle-status\">${plugin.settings?.enabled !== false ? 'Enabled' : 'Disabled'}</span>\n                                    </div>\n                                </div>\n                                <p class=\"no-settings-message\">This plugin has no additional settings.</p>\n                            </div>\n                        </form>\n                    </div>\n                    <div class=\"tab-content\" data-tab-content=\"licensing\">\n                        <div class=\"settings-form\">\n                            ${_ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].generateLicensingUI(plugin).outerHTML}\n                        </div>\n                    </div>\n                </div>\n                <div class=\"form-actions\">\n                    <button type=\"button\" class=\"button cancel-button\">Cancel</button>\n                    <button type=\"button\" class=\"button save-button\">Save</button>\n                </div>\n            `;\n        }\n\n        // Hide skeleton loading and update panel content\n        if (this._loadingStates.settings) {\n            this._loadingStates.settings.hide();\n        }\n        this.elements.panelContent.innerHTML = panelHTML;\n\n        // Add event listeners\n        const forms = this.elements.panelContent.querySelectorAll('.settings-form');\n        const cancelButton = this.elements.panelContent.querySelector('.cancel-button');\n        const saveButton = this.elements.panelContent.querySelector('.save-button');\n\n        if (cancelButton) {\n            cancelButton.addEventListener('click', _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].handleClosePanel);\n        }\n\n        if (saveButton && forms.length > 0) {\n            saveButton.addEventListener('click', () => {\n                // Collect settings from all forms and save them\n                const settings = _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].collectSettingsFromForms(pluginId, schema);\n                this.savePluginSettings(pluginId, settings);\n                _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].setHasUnsavedChanges(false);\n                _ui_notifications_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].updateNotificationState(false);\n            });\n        }\n\n        // Ensure the first tab is active by default\n        const tabButtons = this.elements.panelContent.querySelectorAll('.settings-tabs .tab-button');\n        if (tabButtons.length > 0) {\n            // Set the first tab as active\n            tabButtons[0].classList.add('active');\n            \n            // Bind tab switching functionality\n            tabButtons.forEach(button => {\n                button.addEventListener('click', function () {\n                    // Remove active class from all buttons\n                    tabButtons.forEach(btn => btn.classList.remove('active'));\n                    \n                    // Add active class to clicked button\n                    this.classList.add('active');\n                    \n                    // Get the target tab\n                    const tabTarget = this.getAttribute('data-tab-target');\n                    \n                    // Hide all tab contents\n                    const tabContents = document.querySelectorAll('.tab-content');\n                    tabContents.forEach(content => content.classList.remove('active'));\n                    \n                    // Show the target tab content\n                    const targetContent = document.querySelector(`.tab-content[data-tab-content=\"${tabTarget}\"]`);\n                    if (targetContent) {\n                        targetContent.classList.add('active');\n                    }\n                });\n            });\n        }\n\n        // Bind change handlers to all forms\n        if (schema && forms.length > 0) {\n            forms.forEach(form => {\n                // Find all form elements - inputs, selects, textareas\n                const formElements = form.querySelectorAll('input, select, textarea');\n                formElements.forEach(element => {\n                    element.addEventListener('change', () => {\n                        _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].setHasUnsavedChanges(true);\n                        _ui_notifications_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].updateNotificationState(true);\n                    });\n                    \n                    // Special handling for radio buttons and checkboxes\n                    if (element.type === 'radio' || element.type === 'checkbox') {\n                        element.addEventListener('click', () => {\n                            _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].setHasUnsavedChanges(true);\n                            _ui_notifications_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].updateNotificationState(true);\n                        });\n                    }\n                });\n                \n                // Specifically handle sliders which need special handling for value display\n                const sliders = form.querySelectorAll('input[type=\"range\"]');\n                sliders.forEach(slider => {\n                    // Initial update of value display\n                    const valueDisplay = slider.parentNode.querySelector('.slider-value');\n                    if (valueDisplay) {\n                        valueDisplay.textContent = slider.value;\n                    }\n                    \n                    // Update value display on input and change\n                    slider.addEventListener('input', function() {\n                        if (valueDisplay) {\n                            valueDisplay.textContent = this.value;\n                        }\n                    });\n                    \n                    slider.addEventListener('change', function() {\n                        _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].setHasUnsavedChanges(true);\n                        _ui_notifications_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].updateNotificationState(true);\n                    });\n                });\n            });\n            \n            // Specifically handle custom components if any\n            if (customModule && customModule.initializeCustomComponents) {\n                try {\n                    customModule.initializeCustomComponents(this.elements.panelContent);\n                    console.log(`📍 [Settings] Custom components initialized for ${pluginId}`);\n                } catch (error) {\n                    console.error(`📍 [Settings] Error initializing custom components for ${pluginId}:`, error);\n                }\n            }\n            \n            // Use SettingsComponents.bindEventHandlers if available\n            if (window.SettingsComponents && window.SettingsComponents.bindEventHandlers) {\n                forms.forEach(form => {\n                    try {\n                        window.SettingsComponents.bindEventHandlers(form, () => {\n                            _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].setHasUnsavedChanges(true);\n                            _ui_notifications_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].updateNotificationState(true);\n                        });\n                    } catch (error) {\n                        console.error(`Error binding event handlers for ${pluginId}:`, error);\n                    }\n                });\n            }\n        }\n    },\n    \n    /**\n     * Save plugin settings\n     * @param {string} pluginId - The plugin ID\n     * @param {Object} settings - The settings object to save\n     * @returns {Promise<boolean>} Whether the save was successful\n     */\n    savePluginSettings: async function(pluginId, settings = {}) {\n        // Get the plugin\n        const pluginIndex = this._installedPlugins.findIndex(p => p.id === pluginId);\n        if (pluginIndex === -1) return false;\n\n        console.log(`Saving settings for ${pluginId}:`, settings);\n\n        // Update plugin status if enabled setting is present\n        if ('enabled' in settings) {\n            this._installedPlugins[pluginIndex].status = settings.enabled ? 'enabled' : 'disabled';\n\n            // Update UI\n            const card = document.querySelector(`.plugin-card[data-plugin-id=\"${pluginId}\"]`);\n            if (card) {\n                const statusElement = card.querySelector('.plugin-status');\n                if (statusElement) {\n                    statusElement.className = `plugin-status status-${settings.enabled ? 'enabled' : 'disabled'}`;\n                    statusElement.textContent = settings.enabled ? 'ENABLED' : 'DISABLED';\n                }\n            }\n        }\n\n        // Check for custom component data\n        const customData = _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].CustomComponentDataRegistry.data[pluginId];\n        if (customData) {\n            // Include custom component data in settings\n            for (const componentId in customData) {\n                if (typeof settings[componentId] === 'object') {\n                    settings[componentId] = {\n                        ...settings[componentId],\n                        ...customData[componentId]\n                    };\n                } else {\n                    settings[componentId] = customData[componentId];\n                }\n            }\n        }\n\n        // Save settings in the plugin object\n        this._installedPlugins[pluginIndex].settings = {\n            ...this._installedPlugins[pluginIndex].settings || {},\n            ...settings\n        };\n\n        // Also save licensing information if present\n        if (settings.license_key || settings.trial_start || this._installedPlugins[pluginIndex].licenseStatus) {\n            // Update licensing data if we have it, either from newly saved settings or existing plugin data\n            try {\n                if (window.SquareHeroLicensing) {\n                    const licenseData = await window.SquareHeroLicensing.getPluginData(pluginId);\n                    \n                    // Update license data with settings\n                    if (settings.license_key && !licenseData.license_key) {\n                        licenseData.license_key = settings.license_key;\n                    }\n                    \n                    if (settings.activated_at && !licenseData.activated_at) {\n                        licenseData.activated_at = settings.activated_at;\n                    }\n                    \n                    // Update status if needed\n                    const currentStatus = licenseData.status || 'inactive';\n                    const pluginLicenseStatus = this._installedPlugins[pluginIndex].licenseStatus || currentStatus;\n                    \n                    // Only update if different to avoid unnecessary writes\n                    if (currentStatus !== pluginLicenseStatus) {\n                        licenseData.status = pluginLicenseStatus;\n                    }\n                    \n                    // Save updates back to licensing system\n                    await window.SquareHeroLicensing.savePluginData(pluginId, licenseData);\n                    console.log(`Updated licensing data for ${pluginId}:`, licenseData);\n                }\n            } catch (licenseError) {\n                console.error(`Error updating licensing data for ${pluginId}:`, licenseError);\n                // Continue with saving other settings even if licensing update fails\n            }\n        }\n\n        // Call onSave handler if registered\n        const handlers = _services_settings_registry_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getHandlers(pluginId);\n        if (handlers.onSave) {\n            // Make sure we pass a copy to avoid reference issues\n            const settingsCopy = JSON.parse(JSON.stringify(this._installedPlugins[pluginIndex].settings));\n            handlers.onSave(settingsCopy);\n        }\n\n        // Save to Firebase\n        try {\n            // Make a clean copy of settings for Firebase\n            const settingsForFirebase = JSON.parse(JSON.stringify(this._installedPlugins[pluginIndex].settings));\n\n            const savedToFirebase = await _services_firebase_service_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updatePluginSettings(\n                pluginId,\n                settingsForFirebase\n            );\n\n            if (savedToFirebase) {\n                _ui_notifications_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].showSuccessNotification('Settings saved to cloud.');\n            } else {\n                _ui_notifications_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].showSuccessNotification('Settings saved locally.');\n            }\n        } catch (error) {\n            console.error(`Error saving settings to Firebase: ${error.message}`);\n            _ui_notifications_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].showSuccessNotification('Settings saved locally only.');\n        }\n\n        return true;\n    },\n    \n    /**\n     * Close the settings panel\n     */\n    closeSettingsPanel: function() {\n        _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].closeSettingsPanel();\n    },\n    \n    /**\n     * Get the current active panel ID\n     * @returns {string|null} The active panel ID\n     */\n    getActivePluginId: function() {\n        return _ui_settings_panel_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].getActivePanel();\n    },\n    \n    /**\n     * Check if wizards are enabled\n     * @returns {boolean} Whether wizards are enabled\n     */\n    areWizardsEnabled: function() {\n        return _ui_wizards_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].areWizardsEnabled();\n    },\n    \n    /**\n     * Toggle wizards on/off\n     * @param {boolean} enabled - Whether wizards should be enabled\n     * @returns {boolean} Whether the change was successful\n     */\n    toggleWizards: function(enabled) {\n        return _ui_wizards_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].toggleWizards(enabled);\n    },\n    \n    /**\n     * Load a wizard script for a plugin\n     * @param {Object} plugin - The plugin object\n     * @returns {Promise<Object|null>} The wizard module or null\n     */\n    loadWizardScript: function(plugin) {\n        return _ui_wizards_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].loadWizardScript(plugin);\n    }\n};\n\n// Make Dashboard accessible globally\nwindow.Dashboard = Dashboard;\n\n// Export the Dashboard object\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Dashboard);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/js/core/dashboard.js?")},"./src/js/services/firebase-service.js":
/*!*********************************************!*\
  !*** ./src/js/services/firebase-service.js ***!
  \*********************************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FirebaseService: () => (/* binding */ FirebaseService),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Firebase Service Module\n * Handles authentication and data storage with Firebase.\n */\n\n// Instead of direct URL imports, use firebase modules that will be loaded externally\n// We'll make these functions available globally and reference them\n\n// Firebase service for settings storage\nconst FirebaseService = {\n    isInitialized: false,\n    db: null,\n    \n    /**\n     * Initialize the Firebase service\n     * @returns {Promise<boolean>} True if initialization succeeded\n     */\n    initialize: async function() {\n        try {\n            console.log('Starting Firebase initialization...');\n            \n            // If already initialized, return immediately\n            if (this.isInitialized) {\n                console.log('Firebase already initialized');\n                return true;\n            }\n            \n            // Wait for the firebase-ready event if SecureFirebaseAuth is not initialized\n            if (!window.SecureFirebaseAuth || !window.SecureFirebaseAuth.isInitialized) {\n                console.log('Waiting for SecureFirebaseAuth to initialize...');\n                \n                // Wait for up to 10 seconds for Firebase to initialize\n                let timeoutMs = 10000;\n                const intervalMs = 100;\n                \n                while (timeoutMs > 0 && (!window.SecureFirebaseAuth || !window.SecureFirebaseAuth.isInitialized)) {\n                    await new Promise(resolve => setTimeout(resolve, intervalMs));\n                    timeoutMs -= intervalMs;\n                }\n                \n                if (!window.SecureFirebaseAuth || !window.SecureFirebaseAuth.isInitialized) {\n                    console.error('SecureFirebaseAuth initialization timed out');\n                    return false;\n                }\n            }\n            \n            // Get the Firebase database instance\n            if (window.firebaseDatabase) {\n                this.db = window.firebaseDatabase;\n            } else if (window.firebase && window.firebase.database) {\n                this.db = window.firebase.database();\n            } else {\n                console.error('Failed to get Firebase database instance - not available globally');\n                return false;\n            }\n            \n            if (!this.db) {\n                console.error('Failed to get Firebase database instance');\n                return false;\n            }\n            \n            this.isInitialized = true;\n            console.log('Firebase initialized successfully');\n            return true;\n            \n        } catch (error) {\n            console.error('Error initializing Firebase:', error);\n            return false;\n        }\n    },\n    \n    /**\n     * Get plugin settings from Firebase\n     * @param {string} pluginId - The unique identifier for the plugin\n     * @param {Object} defaultSettings - Default settings to use if none found\n     * @returns {Promise<Object>} The plugin settings object\n     */\n    getPluginSettings: async function(pluginId, defaultSettings = {}) {\n        if (!this.isInitialized) {\n            await this.initialize();\n        }\n        \n        try {\n            const currentUser = this.getCurrentUser();\n            if (!currentUser) {\n                console.log(`No authenticated user, returning default settings for ${pluginId}`);\n                return defaultSettings;\n            }\n            \n            const userId = currentUser.uid;\n            // Use global firebase references\n            const settingsRef = window.firebase.database.ref(this.db, `users/${userId}/plugins/${pluginId}/settings`);\n            const snapshot = await window.firebase.database.get(settingsRef);\n            \n            if (snapshot.exists()) {\n                const settings = snapshot.val();\n                console.log(`Settings retrieved for ${pluginId}:`, settings);\n                return settings;\n            } else {\n                console.log(`No settings found for ${pluginId}, using defaults`);\n                return defaultSettings;\n            }\n        } catch (error) {\n            console.error(`Error getting settings for ${pluginId}:`, error);\n            return defaultSettings;\n        }\n    },\n    \n    /**\n     * Update plugin settings in Firebase\n     * @param {string} pluginId - The unique identifier for the plugin\n     * @param {Object} settings - The settings object to save\n     * @returns {Promise<boolean>} True if the update succeeded\n     */\n    updatePluginSettings: async function(pluginId, settings) {\n        if (!this.isInitialized) {\n            await this.initialize();\n        }\n        \n        try {\n            const currentUser = this.getCurrentUser();\n            if (!currentUser) {\n                console.log(`No authenticated user, settings not saved to cloud for ${pluginId}`);\n                return false;\n            }\n            \n            const userId = currentUser.uid;\n            const settingsRef = window.firebase.database.ref(this.db, `users/${userId}/plugins/${pluginId}/settings`);\n            \n            await window.firebase.database.set(settingsRef, settings);\n            console.log(`Settings saved for ${pluginId}`);\n            return true;\n        } catch (error) {\n            console.error(`Error saving settings for ${pluginId}:`, error);\n            return false;\n        }\n    },\n    \n    /**\n     * Check if the user is authenticated\n     * @returns {boolean} True if the user is authenticated\n     */\n    isAuthenticated: function() {\n        return window.SecureFirebaseAuth && window.SecureFirebaseAuth.isAuthenticated();\n    },\n    \n    /**\n     * Get the current authenticated user\n     * @returns {Object|null} The current user object or null if not authenticated\n     */\n    getCurrentUser: function() {\n        return window.SecureFirebaseAuth && window.SecureFirebaseAuth.getCurrentUser();\n    }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FirebaseService);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/js/services/firebase-service.js?")},"./src/js/services/plugin-registry.js":
/*!********************************************!*\
  !*** ./src/js/services/plugin-registry.js ***!
  \********************************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PluginRegistry: () => (/* binding */ PluginRegistry),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Plugin Registry Module\n * Manages the registration of plugin modules and components.\n */\n\n// Plugin Registry for module system\nconst PluginRegistry = {\n    modules: {},\n    \n    /**\n     * Register a module for a plugin\n     * @param {string} pluginId - The unique identifier for the plugin\n     * @param {string} moduleType - The type of module (e.g., 'card', 'settings', 'wizard')\n     * @param {Object} module - The module to register\n     */\n    register: function (pluginId, moduleType, module) {\n        if (!this.modules[pluginId]) {\n            this.modules[pluginId] = {};\n        }\n        this.modules[pluginId][moduleType] = module;\n        console.log(`Registered ${moduleType} module for plugin: ${pluginId}`);\n    },\n    \n    /**\n     * Get a module for a plugin\n     * @param {string} pluginId - The unique identifier for the plugin\n     * @param {string} moduleType - The type of module to retrieve\n     * @returns {Object|null} The requested module or null if not found\n     */\n    get: function (pluginId, moduleType) {\n        if (!this.modules[pluginId] || !this.modules[pluginId][moduleType]) {\n            return null;\n        }\n        return this.modules[pluginId][moduleType];\n    }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PluginRegistry);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/js/services/plugin-registry.js?")},"./src/js/services/settings-registry.js":
/*!**********************************************!*\
  !*** ./src/js/services/settings-registry.js ***!
  \**********************************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PluginSettingsRegistry: () => (/* binding */ PluginSettingsRegistry),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Settings Registry Module\n * Handles the registration, validation, and retrieval of plugin settings schemas and handlers.\n */\n\n// Plugin Settings Registry\nconst PluginSettingsRegistry = {\n    schemas: {},\n    handlers: {},\n\n    /**\n     * Register a settings schema and handlers for a plugin\n     * @param {string} pluginId - The unique identifier for the plugin\n     * @param {Array} schema - The settings schema definition\n     * @param {Object} handlers - Event handlers for settings actions\n     */\n    register: function (pluginId, schema, handlers = {}) {\n        this.schemas[pluginId] = schema;\n        this.handlers[pluginId] = handlers;\n        console.log(`Registered settings schema for plugin: ${pluginId}`);\n        return this;\n    },\n\n    /**\n     * Get a plugin's settings schema\n     * @param {string} pluginId - The unique identifier for the plugin\n     * @returns {Array|null} The settings schema or null if not found\n     */\n    getSchema: function (pluginId) {\n        return this.schemas[pluginId] || null;\n    },\n\n    /**\n     * Get a plugin's settings handlers\n     * @param {string} pluginId - The unique identifier for the plugin\n     * @returns {Object} The settings handlers or an empty object if not found\n     */\n    getHandlers: function (pluginId) {\n        return this.handlers[pluginId] || {};\n    }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PluginSettingsRegistry);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/js/services/settings-registry.js?")},"./src/js/ui/cards.js":
/*!****************************!*\
  !*** ./src/js/ui/cards.js ***!
  \****************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPluginCard: () => (/* binding */ createPluginCard),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   renderPluginCards: () => (/* binding */ renderPluginCards)\n/* harmony export */ });\n/* harmony import */ var _services_plugin_registry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/plugin-registry.js */ \"./src/js/services/plugin-registry.js\");\n/**\n * Cards Module\n * Handles creation and rendering of plugin cards in the dashboard.\n */\n\n// Import dependencies\n\n\n/**\n * Create default card for a plugin\n * @param {Object} plugin - The plugin data\n * @returns {Promise<HTMLElement>} A promise that resolves to the card element\n */\nfunction createPluginCard(plugin) {\n    return new Promise((resolve) => {\n        try {\n            if (!plugin.settings) {\n                console.error(`Plugin ${plugin.id} has no settings`);\n                resolve(createErrorCard(plugin, new Error('Plugin has no settings')));\n                return;\n            }\n            \n            // Check if the module is already registered\n            const cardModule = _services_plugin_registry_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(plugin.id, 'card');\n            if (cardModule) {\n                console.log(`Using custom card for plugin: ${plugin.id}`);\n                try {\n                    const customCard = cardModule.createCard(plugin);\n                    resolve(customCard);\n                } catch (cardError) {\n                    console.error(`Error creating custom card for ${plugin.id}:`, cardError);\n                    resolve(createErrorCard(plugin, cardError));\n                }\n                return;\n            }\n\n            // If not registered, use the default card implementation with license status\n            console.log(`🔍 [DEBUG-CARD] Creating default card for plugin: ${plugin.id}`);\n            console.log(`🔍 [DEBUG-CARD] Plugin status from data:`, plugin.status);\n            console.log(`🔍 [DEBUG-CARD] Plugin settings:`, plugin.settings);\n            console.log(`🔍 [DEBUG-CARD] License status:`, plugin.licenseStatus);\n            \n            const card = document.createElement('div');\n            card.className = 'plugin-card';\n            card.setAttribute('data-plugin-id', plugin.id);\n\n            // Get license status info\n            const licenseStatus = plugin.licenseStatus || 'inactive';\n            let licenseClass = '';\n            let licenseDisplay = '';\n            let licenseDetails = '';\n            \n            // Map license status to display and classes\n            switch (licenseStatus) {\n                case 'active':\n                    licenseClass = 'license-active';\n                    licenseDisplay = 'LICENSED';\n                    licenseDetails = '<span class=\"license-info active\">Licensed</span>';\n                    break;\n                case 'trial':\n                    licenseClass = 'license-trial';\n                    licenseDisplay = 'TRIAL';\n                    // Calculate days remaining if trial data is available\n                    if (plugin.trialData && plugin.trialData.expiresAt) {\n                        const now = new Date();\n                        const expiresAt = new Date(plugin.trialData.expiresAt);\n                        const daysRemaining = Math.ceil((expiresAt - now) / (1000 * 60 * 60 * 24));\n                        licenseDetails = `<span class=\"license-info trial\">${daysRemaining} days left</span>`;\n                    } else {\n                        licenseDetails = '<span class=\"license-info trial\">Trial</span>';\n                    }\n                    break;\n                case 'expired':\n                    licenseClass = 'license-expired';\n                    licenseDisplay = 'EXPIRED';\n                    licenseDetails = '<span class=\"license-info expired\">Expired</span>';\n                    break;\n                case 'inactive':\n                default:\n                    licenseClass = 'license-inactive';\n                    licenseDisplay = 'UNLICENSED';\n                    licenseDetails = '<span class=\"license-info inactive\">Unlicensed</span>';\n                    break;\n            }\n            \n            // Determine what status display to use\n            // For unlicensed plugins (inactive, unauthorized), use UNLICENSED\n            // For other license statuses, use the plugin's enabled/disabled status\n            let statusDisplay;\n            let statusClass;\n            \n            if (licenseStatus === 'inactive' || licenseStatus === 'unauthorized') {\n                statusDisplay = 'UNLICENSED';\n                statusClass = 'status-unlicensed';\n            } else {\n                // Use plugin status for licensed plugins\n                const isEnabled = plugin.settings.enabled !== false;\n                statusDisplay = isEnabled ? 'ENABLED' : 'DISABLED';\n                statusClass = isEnabled ? 'status-enabled' : 'status-disabled';\n            }\n\n            card.innerHTML = `\n                <div class=\"top-wrapper\">\n                <div class=\"plugin-icon\">\n                    <img src=\"${plugin.icon}\" alt=\"${plugin.name} icon\">\n                </div>\n                <div class=\"status-wrapper\">\n                <span class=\"plugin-status ${statusClass}\">${statusDisplay}</span>\n                ${licenseDetails}\n                </div>\n                </div>\n                <div class=\"plugin-content\">\n                    <div class=\"plugin-header\">\n                        <h3 class=\"plugin-title\">${plugin.name}</h3>\n                    </div>\n                    <p class=\"plugin-description\">${plugin.description}</p>\n                </div>\n            `;\n\n            // Add click event listener to open settings panel\n            card.addEventListener('click', function () {\n                // Using the global Dashboard object\n                if (window.Dashboard && window.Dashboard.loadPluginSettingsModule) {\n                    window.Dashboard.loadPluginSettingsModule(plugin.id);\n                }\n            });\n\n            resolve(card);\n        } catch (error) {\n            console.error(`Error creating card for plugin ${plugin.id}:`, error);\n            resolve(createErrorCard(plugin, error));\n        }\n    });\n}\n\n/**\n * Create an error card for a plugin\n * @param {Object} plugin - The plugin data\n * @param {Error} error - The error that occurred\n * @returns {HTMLElement} The error card element\n */\nfunction createErrorCard(plugin, error) {\n    const errorCard = document.createElement('div');\n    errorCard.className = 'plugin-card error-card';\n    errorCard.setAttribute('data-plugin-id', plugin.id);\n    errorCard.innerHTML = `\n        <div class=\"top-wrapper\">\n            <div class=\"plugin-icon\">\n                <img src=\"${plugin.icon || 'sqs-placeholder.jpg'}\" alt=\"${plugin.name || 'Plugin'} icon\">\n            </div>\n            <div class=\"status-wrapper\">\n                <span class=\"plugin-status status-error\">ERROR</span>\n            </div>\n            <div class=\"plugin-content\">\n                <div class=\"plugin-header\">\n                    <h3 class=\"plugin-title\">${plugin.name || 'Unknown Plugin'}</h3>\n                </div>\n                <p class=\"plugin-description\">Error: ${error.message}</p>\n            </div>\n        </div>\n    `;\n    return errorCard;\n}\n\n/**\n * Render plugin cards into the container\n * @param {Array} installedPlugins - The array of installed plugins\n * @param {HTMLElement} container - The container element for the cards\n * @param {Object} loadingStates - Object tracking loading states\n * @returns {Promise<void>} A promise that resolves when cards are rendered\n */\nasync function renderPluginCards(installedPlugins, container, loadingStates) {\n    // Don't show any text loading indicators or hide skeleton loader here\n    // The skeleton loader will be hidden after all settings are loaded\n    console.log('🔍 [DEBUG-RENDER] Rendering plugin cards with installedPlugins:', installedPlugins?.length);\n    console.log('🔍 [DEBUG-RENDER] Plugin data being rendered:', JSON.stringify(installedPlugins.map(p => ({\n        id: p.id,\n        status: p.status,\n        settings: p.settings?.enabled\n    }))));\n    \n    if (!installedPlugins || !installedPlugins.length) {\n        container.innerHTML = '<p>No plugins installed on this site. Visit the SquareHero plugin store to browse available plugins.</p>';\n        \n        // Hide skeleton loader if no plugins are installed\n        if (loadingStates.plugins) {\n            loadingStates.plugins.hide();\n        }\n        return;\n    }\n\n    // Process each plugin and create its card\n    try {\n        const cards = await Promise.all(installedPlugins.map(createPluginCard));\n        console.log('🔍 [DEBUG-RENDER] Card creation promises resolved, about to update DOM');\n        \n        // Clear any existing content\n        const existingContent = container.innerHTML;\n        console.log('🔍 [DEBUG-RENDER] Clearing container with existing content length:', existingContent.length);\n        container.innerHTML = '';\n\n        // Add each card to the container\n        cards.forEach(card => {\n            if (card) {\n                container.appendChild(card);\n            }\n        });\n\n        // If no cards were added, show a message\n        if (container.children.length === 0) {\n            container.innerHTML = '<p>No plugin cards could be created. Please try reloading the page.</p>';\n        } else {\n            console.log('🔍 [DEBUG-RENDER] Added', container.children.length, 'cards to the container');\n        }\n        \n        // Hide skeleton loader after cards are rendered\n        if (loadingStates.plugins) {\n            loadingStates.plugins.hide();\n        }\n    } catch (error) {\n        console.error('Error rendering plugin cards:', error);\n        container.innerHTML = '<p>Error loading plugins. Please try again later.</p>';\n        \n        // Hide skeleton loader on error\n        if (loadingStates.plugins) {\n            loadingStates.plugins.hide();\n        }\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    createPluginCard,\n    renderPluginCards\n});\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/js/ui/cards.js?")},"./src/js/ui/discover.js":
/*!*******************************!*\
  !*** ./src/js/ui/discover.js ***!
  \*******************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   renderDiscoverPluginCards: () => (/* binding */ renderDiscoverPluginCards)\n/* harmony export */ });\n/**\n * Discover Module\n * Handles rendering and interactions for the discover plugins section.\n */\n\n/**\n * Render all available plugins for discovery\n * @param {Array} availablePlugins - Array of all available plugins\n * @param {Array} installedPlugins - Array of installed plugins\n * @returns {void}\n */\nfunction renderDiscoverPluginCards(availablePlugins, installedPlugins) {\n    const discoverPluginsContainer = document.getElementById('discover-plugins-content');\n    \n    console.log('🔍 [DEBUG-DISCOVER] Starting renderDiscoverPluginCards');\n    console.log('🔍 [DEBUG-DISCOVER] Available plugins count:', availablePlugins?.length);\n    console.log('🔍 [DEBUG-DISCOVER] Installed plugins count:', installedPlugins?.length);\n\n    if (!availablePlugins || !availablePlugins.length) {\n        console.log('🔍 [DEBUG-DISCOVER] No available plugins found');\n        discoverPluginsContainer.innerHTML = '<p>No plugins available to discover.</p>';\n        return;\n    }\n\n    // Create a grid for discover plugins\n    const pluginGrid = document.createElement('div');\n    pluginGrid.id = 'discover-plugins-grid';\n    pluginGrid.className = 'discover-plugins-grid';\n\n    console.log('🔍 [DEBUG-DISCOVER] Installed plugin IDs:', installedPlugins.map(p => p.id));\n\n    // Filter available plugins to only include those that aren't already installed\n    const pluginsToDiscover = availablePlugins.filter(plugin => {\n        const isInstalled = installedPlugins.some(p => p.id === plugin.id);\n        console.log(`🔍 [DEBUG-DISCOVER] Plugin ${plugin.id}: installed=${isInstalled}`);\n        return !isInstalled; // Only include plugins that are NOT installed\n    });\n\n    // If no plugins to discover, show a message\n    if (pluginsToDiscover.length === 0) {\n        console.log('🔍 [DEBUG-DISCOVER] No plugins to discover after filtering out installed plugins');\n        discoverPluginsContainer.innerHTML = '<p>You have installed all available plugins. Check back soon for new additions!</p>';\n        return;\n    }\n\n    // Process each plugin to discover\n    pluginsToDiscover.forEach(plugin => {\n        const card = document.createElement('div');\n        card.className = 'discover-plugin-card';\n        card.setAttribute('data-plugin-id', plugin.id);\n        \n        // Create the inner card container for the flip effect\n        const cardInner = document.createElement('div');\n        cardInner.className = 'card-inner';\n        \n        // Create the front side of the card\n        const cardFront = document.createElement('div');\n        cardFront.className = 'card-front';\n        cardFront.innerHTML = `\n            <div class=\"discover-plugin-icon\">\n                <img src=\"${plugin.icon}\" alt=\"${plugin.name} icon\">\n            </div>\n            <div class=\"discover-plugin-content\">\n                <h3 class=\"discover-plugin-title\">${plugin.name}</h3>\n                <p class=\"discover-plugin-description\">${plugin.description}</p>\n                <div class=\"discover-plugin-actions\">\n                    <button class=\"sh-button activate-license\" data-plugin-id=\"${plugin.id}\">\n                        Activate License\n                    </button>\n                    <button class=\"sh-primary-button install-plugin\" data-plugin-id=\"${plugin.id}\">\n                        Get Started\n                    </button>\n                    <p class=\"fine-print\">14 day free trial. No credit card required.</p>\n                </div>\n            </div>\n        `;\n        \n        // Create the back side of the card\n        const cardBack = document.createElement('div');\n        cardBack.className = 'card-back';\n        cardBack.innerHTML = `\n            <div class=\"discover-plugin-icon\">\n                <img src=\"${plugin.icon}\" alt=\"${plugin.name} icon\">\n            </div>\n            <div class=\"discover-plugin-content\">\n                <h3 class=\"discover-plugin-title\">Take this plugin for a full test drive, no strings attached</h3>\n                <p class=\"discover-plugin-description\"><ul>\n  <li>Instant 100% code-free installation is just a click away</li>\n  <li>Complete access to all features</li>\n  <li>14-day trial with no credit card or email required</li>\n</ul></p>\n                <div class=\"discover-plugin-actions\">\n                    <button class=\"sh-primary-button install-now\" data-plugin-id=\"${plugin.id}\">\n                        Install Now\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        // Add the front and back sides to the card inner element\n        cardInner.appendChild(cardFront);\n        cardInner.appendChild(cardBack);\n        \n        // Add the card inner to the card container\n        card.appendChild(cardInner);\n        \n        // Add the complete card to the grid\n        pluginGrid.appendChild(card);\n    });\n\n    discoverPluginsContainer.innerHTML = '';\n    discoverPluginsContainer.appendChild(pluginGrid);\n    console.log('🔍 [DEBUG-DISCOVER] Finished rendering discover plugins');\n    \n    // Add event listeners for card interactions after all cards are in the DOM\n    addDiscoverCardEventListeners();\n}\n\n/**\n * Add event listeners to discover card buttons\n */\nfunction addDiscoverCardEventListeners() {\n    // Get all the Get Started buttons\n    const getStartedButtons = document.querySelectorAll('.discover-plugin-card .install-plugin');\n    const installNowButtons = document.querySelectorAll('.discover-plugin-card .install-now');\n    const activateLicenseButtons = document.querySelectorAll('.discover-plugin-card .activate-license');\n    \n    // Add click event to Get Started buttons to flip the card\n    getStartedButtons.forEach(button => {\n        button.addEventListener('click', function(event) {\n            event.stopPropagation(); // Prevent event bubbling\n            const card = this.closest('.discover-plugin-card');\n            if (card) {\n                card.classList.add('flipped');\n            }\n        });\n    });\n    \n    // Add click event to Install Now buttons\n    installNowButtons.forEach(button => {\n        button.addEventListener('click', function(event) {\n            event.stopPropagation(); // Prevent event bubbling\n            const pluginId = this.getAttribute('data-plugin-id');\n            console.log('Installing plugin with ID:', pluginId);\n            \n            // TODO: Implement actual installation logic\n            // This could be starting a trial, adding scripts to the page, etc.\n            alert(`Starting installation for plugin: ${pluginId}`);\n        });\n    });\n    \n    // Add click event to Activate License buttons\n    activateLicenseButtons.forEach(button => {\n        button.addEventListener('click', function(event) {\n            event.stopPropagation(); // Prevent event bubbling\n            const pluginId = this.getAttribute('data-plugin-id');\n            console.log('Activating license for plugin with ID:', pluginId);\n            \n            // TODO: Implement license activation logic\n            alert(`Activating license for plugin: ${pluginId}`);\n        });\n    });\n    \n    // Add click event to document to flip cards back when clicking outside\n    document.addEventListener('click', function(event) {\n        // Check if the click was outside of any flipped card\n        const flippedCards = document.querySelectorAll('.discover-plugin-card.flipped');\n        flippedCards.forEach(card => {\n            // If the click was not inside this card, flip it back\n            if (!card.contains(event.target)) {\n                card.classList.remove('flipped');\n            }\n        });\n    });\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    renderDiscoverPluginCards\n});\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/js/ui/discover.js?")},"./src/js/ui/notifications.js":
/*!************************************!*\
  !*** ./src/js/ui/notifications.js ***!
  \************************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getNotificationBar: () => (/* binding */ getNotificationBar),\n/* harmony export */   hideNotification: () => (/* binding */ hideNotification),\n/* harmony export */   showAttention: () => (/* binding */ showAttention),\n/* harmony export */   showSuccessNotification: () => (/* binding */ showSuccessNotification),\n/* harmony export */   showUnsavedChangesNotification: () => (/* binding */ showUnsavedChangesNotification),\n/* harmony export */   updateNotificationState: () => (/* binding */ updateNotificationState)\n/* harmony export */ });\n/**\n * Notifications Module\n * Handles notification display and management.\n */\n\nlet notificationBar = null;\nlet notificationTimeout = null;\nlet attentionTimeout = null;\n\n/**\n * Creates or retrieves the notification bar\n * @returns {HTMLElement} The notification bar element\n */\nfunction getNotificationBar() {\n    // Return existing notification bar if it exists\n    if (notificationBar) {\n        return notificationBar;\n    }\n\n    // Create notification bar\n    notificationBar = document.createElement(\'div\');\n    notificationBar.className = \'notification-bar\';\n    document.body.appendChild(notificationBar);\n\n    return notificationBar;\n}\n\n/**\n * Shows an attention animation on the notification bar\n */\nfunction showAttention() {\n    console.log("showAttention called");\n\n    // First check if we already have a notification bar\n    let bar = document.querySelector(\'.notification-bar\');\n\n    if (!bar || !bar.classList.contains(\'visible\')) {\n        // No visible notification bar, create and show the unsaved changes notification\n        showUnsavedChangesNotification();\n    } else {\n        // Apply attention animation to existing bar\n        applyAttentionAnimation(bar);\n    }\n}\n\n/**\n * Shows a notification for unsaved changes\n */\nfunction showUnsavedChangesNotification() {\n    const bar = getNotificationBar();\n    \n    bar.className = \'notification-bar warning visible\';\n    bar.innerHTML = `\n        <div class="notification-message">\n            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n                <circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2"/>\n                <line x1="12" y1="8" x2="12" y2="12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>\n                <line x1="12" y1="16" x2="12.01" y2="16" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>\n            </svg>\n            <span>You have unsaved changes</span>\n        </div>\n        <div class="notification-actions">\n            <button class="discard-button">Discard</button>\n            <button class="save-button">Save Changes</button>\n        </div>\n    `;\n\n    const discardButton = bar.querySelector(\'.discard-button\');\n    const saveButton = bar.querySelector(\'.save-button\');\n\n    discardButton.addEventListener(\'click\', function () {\n        // Import the Dashboard object when needed\n        const Dashboard = window.Dashboard;\n        if (Dashboard && Dashboard.closeSettingsPanel) {\n            Dashboard.closeSettingsPanel();\n        }\n        hideNotification();\n    });\n\n    saveButton.addEventListener(\'click\', function () {\n        // Get active plugin ID\n        const activePanel = window.activePanel || window.dashboardActivePanel;\n        if (!activePanel) {\n            console.error(\'No active panel ID found for saving settings\');\n            return;\n        }\n\n        // Find the save button in the panel and trigger a click\n        const panelContent = document.getElementById(\'panel-content\');\n        if (panelContent) {\n            const saveButton = panelContent.querySelector(\'.save-button\');\n            if (saveButton) {\n                saveButton.click();\n            }\n        }\n    });\n\n    console.log("Notification bar created and shown");\n}\n\n/**\n * Shows a success notification\n * @param {string} message - The message to display\n */\nfunction showSuccessNotification(message) {\n    const bar = getNotificationBar();\n\n    // Remove any existing classes\n    bar.classList.remove(\'attention\');\n\n    bar.className = \'notification-bar success visible\';\n    bar.innerHTML = `\n        <div class="notification-message">\n            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n                <circle cx="12" cy="12" r="10" fill="none" stroke="currentColor" stroke-width="2"/>\n                <path d="M8 12l3 3 6-6" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>\n            </svg>\n            <span>${message || \'Settings saved successfully!\'}</span>\n        </div>\n        <div class="notification-actions">\n            <button class="discard-button">Close</button>\n        </div>\n    `;\n\n    // Add event listener to close button\n    const closeButton = bar.querySelector(\'.discard-button\');\n    closeButton.addEventListener(\'click\', function () {\n        hideNotification();\n    });\n\n    // Auto-hide after 3 seconds\n    if (notificationTimeout) {\n        clearTimeout(notificationTimeout);\n    }\n\n    notificationTimeout = setTimeout(function () {\n        hideNotification();\n    }, 3000);\n}\n\n/**\n * Hides the notification bar\n */\nfunction hideNotification() {\n    if (notificationBar) {\n        notificationBar.classList.remove(\'visible\');\n    }\n\n    if (notificationTimeout) {\n        clearTimeout(notificationTimeout);\n        notificationTimeout = null;\n    }\n}\n\n/**\n * Updates the notification state based on whether there are unsaved changes\n * @param {boolean} hasUnsavedChanges - Whether there are unsaved changes\n */\nfunction updateNotificationState(hasUnsavedChanges) {\n    console.log(\'updateNotificationState called, hasUnsavedChanges =\', hasUnsavedChanges);\n\n    if (hasUnsavedChanges) {\n        showUnsavedChangesNotification();\n    } else {\n        hideNotification();\n    }\n}\n\n/**\n * Helper function to apply animation to notification bar\n * @param {HTMLElement} bar - The notification bar element\n */\nfunction applyAttentionAnimation(bar) {\n    if (!bar) return;\n\n    // Clear any existing timeout\n    if (attentionTimeout) {\n        clearTimeout(attentionTimeout);\n    }\n\n    // Remove animation class first (to allow restart)\n    bar.classList.remove(\'attention\');\n\n    // Force a browser reflow to restart animation\n    void bar.offsetWidth;\n\n    // Add animation class\n    bar.classList.add(\'attention\');\n\n    // Remove animation class after it completes\n    attentionTimeout = setTimeout(function () {\n        if (bar) {\n            bar.classList.remove(\'attention\');\n        }\n    }, 800);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    getNotificationBar,\n    showAttention,\n    showUnsavedChangesNotification,\n    showSuccessNotification,\n    hideNotification,\n    updateNotificationState\n});\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/js/ui/notifications.js?')},"./src/js/ui/settings-panel.js":
/*!*************************************!*\
  !*** ./src/js/ui/settings-panel.js ***!
  \*************************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomComponentDataRegistry: () => (/* binding */ CustomComponentDataRegistry),\n/* harmony export */   closeSettingsPanel: () => (/* binding */ closeSettingsPanel),\n/* harmony export */   collectSettingsFromForms: () => (/* binding */ collectSettingsFromForms),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   generateLicensingUI: () => (/* binding */ generateLicensingUI),\n/* harmony export */   getActivePanel: () => (/* binding */ getActivePanel),\n/* harmony export */   getHasUnsavedChanges: () => (/* binding */ getHasUnsavedChanges),\n/* harmony export */   handleClosePanel: () => (/* binding */ handleClosePanel),\n/* harmony export */   initEventListeners: () => (/* binding */ initEventListeners),\n/* harmony export */   setActivePanel: () => (/* binding */ setActivePanel),\n/* harmony export */   setHasUnsavedChanges: () => (/* binding */ setHasUnsavedChanges)\n/* harmony export */ });\n/* harmony import */ var _notifications_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notifications.js */ "./src/js/ui/notifications.js");\n/**\n * Settings Panel Module\n * Handles the settings panel UI and interactions.\n */\n\n\n\nlet hasUnsavedChanges = false;\nlet activePanel = null;\n\n// DOM elements\nconst elements = {\n    settingsPanel: document.getElementById(\'settings-panel\'),\n    panelContent: document.getElementById(\'panel-content\'),\n    closeButton: document.getElementById(\'close-panel\'),\n    overlay: document.getElementById(\'overlay\')\n};\n\n/**\n * Generates licensing UI for a plugin\n * @param {Object} plugin - The plugin object\n * @returns {HTMLElement} The generated licensing UI element\n */\nfunction generateLicensingUI(plugin) {\n    // Default to inactive if not set\n    const licenseStatus = plugin.licenseStatus || \'inactive\';\n    let trialData = plugin.trialData || null;\n    \n    // Create the container\n    const licensingUI = document.createElement(\'div\');\n    licensingUI.className = \'settings-section licensing-section\';\n    \n    // Different UI based on license status\n    switch (licenseStatus) {\n        case \'unauthorized\':\n            // Add unauthorized license UI here\n            break;\n            \n        case \'inactive\':\n        default:\n            licensingUI.innerHTML = `\n                <div class="license-status-container">\n                    <div class="license-status-icon inactive">\n                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                            <circle cx="12" cy="12" r="10"></circle>\n                            <line x1="12" y1="8" x2="12" y2="12"></line>\n                            <line x1="12" y1="16" x2="12.01" y2="16"></line>\n                        </svg>\n                    </div>\n                    <div class="license-status-info">\n                        <h3 class="license-status-title">Not Activated</h3>\n                        <p class="license-status-description">This plugin is not activated.</p>\n                    </div>\n                </div>\n                <div class="license-actions">\n                    <button class="button primary-button" id="start-trial">Start Free Trial</button>\n                    <p class="trial-info">Start a 14-day free trial with full features.</p>\n                </div>\n                <div class="license-activation">\n                    <h4 class="license-activation-title">Already have a License?</h4>\n                    <div class="license-activation-form">\n                        <input type="text" class="license-key-input" placeholder="Enter your license key" id="license-key-input">\n                        <button class="button secondary-button" id="activate-license">Activate License</button>\n                    </div>\n                </div>\n            `;\n            break;\n    }\n    \n    return licensingUI;\n}\n\n/**\n * Handle closing the panel with attention animation\n */\nfunction handleClosePanel() {\n    console.log("handleClosePanel called, hasUnsavedChanges =", hasUnsavedChanges);\n\n    // If there are unsaved changes, show attention animation instead of closing\n    if (hasUnsavedChanges) {\n        console.log("Showing attention animation");\n        // Import from notifications module when needed\n        if (window.Notifications && window.Notifications.showAttention) {\n            window.Notifications.showAttention();\n        }\n        return;\n    }\n\n    // If no unsaved changes, close the panel\n    console.log("Closing panel - no unsaved changes");\n    closeSettingsPanel();\n}\n\n/**\n * Close the settings panel\n */\nfunction closeSettingsPanel() {\n    elements.settingsPanel.classList.remove(\'visible\');\n    elements.overlay.classList.remove(\'visible\');\n\n    // For accessibility\n    elements.settingsPanel.setAttribute(\'aria-hidden\', \'true\');\n\n    // Clear active panel\n    activePanel = null;\n\n    // Clear the window.activePanel global variable\n    window.activePanel = null;\n    console.log(\'Active panel ID cleared on panel close\');\n\n    // Remove the data attribute\n    if (elements.settingsPanel) {\n        elements.settingsPanel.removeAttribute(\'data-plugin-id\');\n    }\n\n    hasUnsavedChanges = false;\n    (0,_notifications_js__WEBPACK_IMPORTED_MODULE_0__.hideNotification)();\n\n    // Clear content after animation (300ms)\n    setTimeout(() => {\n        elements.panelContent.innerHTML = \'\';\n    }, 300);\n}\n\n/**\n * Collect settings from all forms\n * @param {string} pluginId - The plugin ID\n * @param {Array} schema - The settings schema\n * @returns {Object} The collected settings\n */\nfunction collectSettingsFromForms(pluginId, schema) {\n    console.log(`🔍 [DEBUG-SETTINGS] Collecting settings from forms for plugin: ${pluginId}`);\n    \n    const forms = elements.panelContent.querySelectorAll(\'.settings-form\');\n    if (!forms || forms.length === 0) {\n        console.log(`🔍 [DEBUG-SETTINGS] No forms found for plugin: ${pluginId}`);\n        return { enabled: true }; // Default setting\n    }\n\n    // Extract categories if they exist\n    const categories = schema.filter(item => item.type === \'category\');\n    let allSettings = {};\n\n    // If using categories/tabs\n    if (categories.length > 0) {\n        console.log(`🔍 [DEBUG-SETTINGS] Plugin has ${categories.length} categories/tabs`);\n        \n        // Process each form (one per tab)\n        forms.forEach(form => {\n            // Get the tab ID and corresponding category\n            const tabContent = form.closest(\'.tab-content\');\n            if (!tabContent) {\n                console.log(`🔍 [DEBUG-SETTINGS] Form not in a tab container, skipping`);\n                return;\n            }\n            \n            const tabId = tabContent.getAttribute(\'data-tab-content\');\n            console.log(`🔍 [DEBUG-SETTINGS] Processing form in tab: ${tabId}`);\n            \n            const category = categories.find(item => item.id === tabId);\n            if (!category) {\n                console.log(`🔍 [DEBUG-SETTINGS] No category found for tabId: ${tabId}`);\n                return;\n            }\n\n            // Get components from the category\n            const tabSchema = category.components || [];\n            const formSettings = window.SettingsComponents.collectFormValues(form, tabSchema);\n            console.log(`🔍 [DEBUG-SETTINGS] Collected settings from tab ${tabId}:`, formSettings);\n            \n            // Merge with allSettings\n            allSettings = { ...allSettings, ...formSettings };\n        });\n    } else {\n        // Single form, no tabs\n        console.log(`🔍 [DEBUG-SETTINGS] Plugin has a single form without tabs`);\n        allSettings = window.SettingsComponents.collectFormValues(forms[0], schema);\n    }\n\n    // Ensure the enabled property exists\n    if (!allSettings.hasOwnProperty(\'enabled\')) {\n        console.log(`🔍 [DEBUG-SETTINGS] Adding default enabled=true property`);\n        allSettings.enabled = true;\n    }\n    \n    console.log(`🔍 [DEBUG-SETTINGS] Final collected settings:`, allSettings);\n    return allSettings;\n}\n\n/**\n * Set the current active panel\n * @param {string} pluginId - The plugin ID\n */\nfunction setActivePanel(pluginId) {\n    activePanel = pluginId;\n    window.activePanel = pluginId;\n    \n    // Add data attribute to the panel for easier detection\n    if (elements.settingsPanel) {\n        elements.settingsPanel.setAttribute(\'data-plugin-id\', pluginId);\n        console.log(\'Added data-plugin-id attribute to settings panel\');\n    }\n}\n\n/**\n * Get the current active panel\n * @returns {string|null} The active panel ID\n */\nfunction getActivePanel() {\n    return activePanel;\n}\n\n/**\n * Set the unsaved changes flag\n * @param {boolean} value - Whether there are unsaved changes\n */\nfunction setHasUnsavedChanges(value) {\n    hasUnsavedChanges = value;\n    (0,_notifications_js__WEBPACK_IMPORTED_MODULE_0__.updateNotificationState)(hasUnsavedChanges);\n}\n\n/**\n * Check if there are unsaved changes\n * @returns {boolean} Whether there are unsaved changes\n */\nfunction getHasUnsavedChanges() {\n    return hasUnsavedChanges;\n}\n\n/**\n * Initialize event listeners for the settings panel\n */\nfunction initEventListeners() {\n    // Close panel button\n    elements.closeButton.addEventListener(\'click\', handleClosePanel);\n\n    // Overlay click\n    elements.overlay.addEventListener(\'click\', handleClosePanel);\n\n    // Handle escape key\n    document.addEventListener(\'keydown\', function (event) {\n        if (event.key === \'Escape\' && activePanel) {\n            handleClosePanel();\n        }\n    });\n}\n\n// Custom component data registry\nconst CustomComponentDataRegistry = {\n    data: {},\n\n    register: function (pluginId, componentId, data) {\n        if (!this.data[pluginId]) {\n            this.data[pluginId] = {};\n        }\n        this.data[pluginId][componentId] = data;\n        console.log(`Registered data for custom component ${componentId} in plugin ${pluginId}`);\n    },\n\n    get: function (pluginId, componentId) {\n        if (!this.data[pluginId] || !this.data[pluginId][componentId]) {\n            return null;\n        }\n        return this.data[pluginId][componentId];\n    }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    generateLicensingUI,\n    handleClosePanel,\n    closeSettingsPanel,\n    collectSettingsFromForms,\n    setActivePanel,\n    getActivePanel,\n    setHasUnsavedChanges,\n    getHasUnsavedChanges,\n    initEventListeners,\n    CustomComponentDataRegistry\n});\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/js/ui/settings-panel.js?')},"./src/js/ui/wizards.js":
/*!******************************!*\
  !*** ./src/js/ui/wizards.js ***!
  \******************************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   areWizardsEnabled: () => (/* binding */ areWizardsEnabled),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getActiveWizard: () => (/* binding */ getActiveWizard),\n/* harmony export */   getWizardSchema: () => (/* binding */ getWizardSchema),\n/* harmony export */   hasWizard: () => (/* binding */ hasWizard),\n/* harmony export */   loadWizardScript: () => (/* binding */ loadWizardScript),\n/* harmony export */   refreshCurrentPanel: () => (/* binding */ refreshCurrentPanel),\n/* harmony export */   registerWizardSchema: () => (/* binding */ registerWizardSchema),\n/* harmony export */   showWizard: () => (/* binding */ showWizard),\n/* harmony export */   toggleWizards: () => (/* binding */ toggleWizards)\n/* harmony export */ });\n/**\n * Wizards Module\n * Handles plugin setup wizards functionality.\n */\n\n// Registry for wizard schemas and active wizard tracking\nconst wizardRegistry = {};\nlet activeWizard = null;\nlet wizardStylesLoaded = false;\n\n/**\n * Register a wizard schema for a plugin\n * @param {string} pluginId - The plugin ID\n * @param {Object} schema - The wizard schema\n */\nfunction registerWizardSchema(pluginId, schema) {\n    wizardRegistry[pluginId] = schema;\n    console.log(`Registered wizard schema for plugin: ${pluginId}`);\n}\n\n/**\n * Get wizard schema for a plugin\n * @param {string} pluginId - The plugin ID\n * @returns {Object|null} The wizard schema or null if not found\n */\nfunction getWizardSchema(pluginId) {\n    return wizardRegistry[pluginId] || null;\n}\n\n/**\n * Check if a plugin has a wizard\n * @param {string} pluginId - The plugin ID\n * @param {Array} availablePlugins - Array of all available plugins\n * @returns {boolean} True if the plugin has a wizard\n */\nfunction hasWizard(pluginId, availablePlugins) {\n    const plugin = availablePlugins.find(p => p.id === pluginId);\n    return plugin && plugin.hasWizard === true;\n}\n\n/**\n * Load a plugin's wizard script\n * @param {Object} plugin - The plugin object\n * @returns {Promise<Object|null>} A promise resolving to the wizard module or null\n */\nfunction loadWizardScript(plugin) {\n    return new Promise((resolve, reject) => {\n        // Check if plugin is valid\n        if (!plugin || typeof plugin !== 'object') {\n            reject(new Error('Invalid plugin object'));\n            return;\n        }\n\n        // Check if plugin has an id\n        if (!plugin.id) {\n            reject(new Error('Plugin has no ID'));\n            return;\n        }\n\n        // Check if wizard module is already registered\n        const wizardModule = window.PluginRegistry.get(plugin.id, 'wizard');\n        if (wizardModule) {\n            console.log(`Using registered wizard module for ${plugin.id}`);\n            resolve(wizardModule);\n            return;\n        }\n\n        // Check if plugin has a wizard script defined\n        if (!plugin.wizardScript) {\n            console.log(`No wizard script defined for ${plugin.id}`);\n            resolve(null);\n            return;\n        }\n\n        // Load the wizard script\n        const script = document.createElement('script');\n        script.src = plugin.wizardScript;\n        script.onload = function() {\n            console.log(`Wizard script loaded for ${plugin.id}`);\n            \n            // Check if the script registered a wizard module\n            const loadedModule = window.PluginRegistry.get(plugin.id, 'wizard');\n            if (loadedModule) {\n                resolve(loadedModule);\n            } else {\n                console.warn(`Wizard script loaded but no module registered for ${plugin.id}`);\n                resolve(null);\n            }\n        };\n        script.onerror = function(error) {\n            console.error(`Error loading wizard script for ${plugin.id}:`, error);\n            reject(error);\n        };\n        \n        document.head.appendChild(script);\n    });\n}\n\n/**\n * Function to check if wizards are enabled globally\n * @returns {boolean} True if wizards are enabled\n */\nfunction areWizardsEnabled() {\n    // First check the data attribute on the dashboard wrapper\n    const dashboardWrapper = document.querySelector('.dashboard-wrapper');\n    if (dashboardWrapper && dashboardWrapper.getAttribute('data-wizard-enabled') === 'false') {\n        console.log('Wizards disabled via data-wizard-enabled attribute');\n        return false;\n    }\n\n    // Fallback to window variable if no data attribute is found or if it's not 'false'\n    return window.WIZARDS_ENABLED !== false;\n}\n\n/**\n * Toggle wizards enabled/disabled\n * @param {boolean} enabled - Whether wizards should be enabled\n * @returns {boolean} True if the change was successful\n */\nfunction toggleWizards(enabled) {\n    const dashboardWrapper = document.querySelector('.dashboard-wrapper');\n    if (dashboardWrapper) {\n        dashboardWrapper.setAttribute('data-wizard-enabled', enabled ? 'true' : 'false');\n        console.log(`Wizards ${enabled ? 'enabled' : 'disabled'} via API call`);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Show wizard for a plugin\n * @param {string} pluginId - The plugin ID\n * @param {Array} installedPlugins - Array of installed plugins\n * @returns {Promise<boolean>} A promise resolving to true if wizard was shown\n */\nfunction showWizard(pluginId, installedPlugins) {\n    // Find the plugin by ID\n    const plugin = installedPlugins.find(p => p.id === pluginId);\n    if (!plugin) {\n        console.error(`Plugin ${pluginId} not found for wizard`);\n        return Promise.resolve(false);\n    }\n\n    // Load wizard styles first if needed\n    if (!wizardStylesLoaded) {\n        // Load wizard styles here if needed\n        wizardStylesLoaded = true;\n    }\n\n    // Load the wizard script\n    return loadWizardScript(plugin)\n        .then(wizardModule => {\n            if (!wizardModule) {\n                console.log(`No wizard module available for ${pluginId}`);\n                return false;\n            }\n\n            // Check if the wizard module has an initialize method\n            if (typeof wizardModule.initialize !== 'function') {\n                console.error(`Wizard module for ${pluginId} has no initialize method`);\n                return false;\n            }\n\n            // Set as active wizard\n            activeWizard = {\n                pluginId: pluginId,\n                module: wizardModule\n            };\n\n            // Initialize the wizard\n            try {\n                wizardModule.initialize(plugin);\n                console.log(`Wizard initialized for ${pluginId}`);\n                return true;\n            } catch (error) {\n                console.error(`Error initializing wizard for ${pluginId}:`, error);\n                activeWizard = null;\n                return false;\n            }\n        })\n        .catch(err => {\n            console.error(`Error showing wizard for ${pluginId}:`, err);\n            return false;\n        });\n}\n\n/**\n * Refresh the current panel content after wizard completion\n */\nfunction refreshCurrentPanel() {\n    if (!window.activePanel) return;\n\n    // Close and reopen the current panel\n    const currentPluginId = window.activePanel;\n    \n    // Use the Dashboard object to close and reopen the panel\n    if (window.Dashboard) {\n        if (window.Dashboard.closeSettingsPanel) {\n            window.Dashboard.closeSettingsPanel();\n        }\n\n        // Wait for panel to close, then reopen\n        setTimeout(() => {\n            if (window.Dashboard.loadPluginSettingsModule) {\n                window.Dashboard.loadPluginSettingsModule(currentPluginId);\n            }\n        }, 500);\n    }\n}\n\n/**\n * Get the currently active wizard\n * @returns {Object|null} The active wizard object or null if none\n */\nfunction getActiveWizard() {\n    return activeWizard;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    registerWizardSchema,\n    getWizardSchema,\n    hasWizard,\n    loadWizardScript,\n    areWizardsEnabled,\n    toggleWizards,\n    showWizard,\n    refreshCurrentPanel,\n    getActiveWizard\n});\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/js/ui/wizards.js?")},"./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _js_core_dashboard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/core/dashboard.js */ "./src/js/core/dashboard.js");\n/**\n * Main entry point for the dashboard\n * This file imports all the modular components and exports them as a single bundle\n */\n\n// Import the core Dashboard module\n\n\n// Make Dashboard accessible globally\nwindow.Dashboard = _js_core_dashboard_js__WEBPACK_IMPORTED_MODULE_0__["default"];\n\n// Export the Dashboard object for ES modules\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_js_core_dashboard_js__WEBPACK_IMPORTED_MODULE_0__["default"]);\n\n//# sourceURL=webpack://squarehero-plugin-dashboard/./src/main.js?')}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];if(void 0!==e)return e.exports;var t=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(n,e)=>{for(var t in e)__webpack_require__.o(e,t)&&!__webpack_require__.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},__webpack_require__.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/main.js")})();