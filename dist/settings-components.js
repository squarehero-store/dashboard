const SettingsComponents={generateForm:function(e,t={}){const o=e.filter((e=>"category"===e.type));if(0===o.length)return`\n        <div class="settings-form">\n          ${e.map((e=>this.renderSetting(e,t))).join("")}\n        </div>\n      `;const n=o.find((e=>e.isDefault))||o[0];return o.map((e=>{const o=e.components||[];return`\n        <div class="tab-content ${e.id===n.id?"active":""}" data-tab-content="${e.id}">\n          <div class="settings-form">\n            ${o.map((e=>this.renderSetting(e,t))).join("")}\n          </div>\n        </div>\n      `})).join("")},renderSetting:function(e,t){if("category"===e.type)return"";const o=e.width?`form-group-${e.width}`:"";switch(e.type){case"dropdown":return this.renderDropdown(e,t,o);case"toggle":return this.renderToggle(e,t,o);case"text":return this.renderTextField(e,t,o);case"color":return this.renderColorPicker(e,t,o);case"number":return this.renderNumberInput(e,t,o);case"radio":return this.renderRadioGroup(e,t,o);case"slider":return this.renderSlider(e,t,o);case"title":return this.renderTitleField(e,t,o);case"checkbox-group":return this.renderCheckboxGroup(e,t,o);case"custom":return this.renderCustomComponent(e,t,o);default:return`<p>Unknown setting type: ${e.type}</p>`}},renderCustomComponent:function(e,t,o){return console.log(`Rendering custom component: ${e.id}`),`\n      <div class="form-group ${o||"form-group-full"}">\n        <div id="${e.id}-container" class="custom-component-container" \n             data-component-id="${e.id}" \n             data-script="${e.script}">\n          <div class="loading-indicator">\n            <p>Loading ${e.label}...</p>\n          </div>\n        </div>\n        ${e.helpText?`<p class="setting-help">${e.helpText}</p>`:""}\n      </div>\n    `},renderDropdown:function(e,t,o){const n=void 0!==t[e.id]?t[e.id]:e.default;return`\n      <div class="form-group ${o}">\n        <label for="${e.id}">${e.label}</label>\n        <select id="${e.id}" name="${e.id}" class="setting-input">\n          ${e.options.map((e=>`<option value="${e.value}" ${n===e.value?"selected":""}>${e.label}</option>`)).join("")}\n        </select>\n        ${e.helpText?`<p class="setting-help">${e.helpText}</p>`:""}\n      </div>\n    `},renderToggle:function(e,t,o){const n=void 0!==t[e.id]?t[e.id]:e.default;return`\n      <div class="form-group toggle-group ${o}">\n        <label class="toggle-label">\n          <input type="checkbox" id="${e.id}" name="${e.id}" ${n?"checked":""}>\n          <span class="toggle-slider"></span>\n          <span class="toggle-text">${e.label}</span>\n        </label>\n        ${e.helpText?`<p class="setting-help">${e.helpText}</p>`:""}\n      </div>\n    `},renderTextField:function(e,t,o){const n=void 0!==t[e.id]?t[e.id]:e.default||"";return`\n      <div class="form-group ${o}">\n        <label for="${e.id}">${e.label}</label>\n        <input type="text" id="${e.id}" name="${e.id}" value="${n}" \n               class="setting-input" ${e.placeholder?`placeholder="${e.placeholder}"`:""}>\n        ${e.helpText?`<p class="setting-help">${e.helpText}</p>`:""}\n      </div>\n    `},renderTitleField:function(e,t,o){void 0!==t[e.id]?t[e.id]:e.default;return`\n      <div class="form-group ${o}">\n        <h4 for="${e.id}">${e.label}</h4>\n      </div>\n    `},renderColorPicker:function(e,t,o){const n=void 0!==t[e.id]?t[e.id]:e.default||"#000000",a="string"==typeof n&&n.includes("hsla(var(--");return`\n      <div class="form-group color-picker-group ${o}">\n        <label for="${e.id}">${e.label}</label>\n        \n        <div class="color-picker-compact" data-setting-id="${e.id}">\n          <div class="current-color-display" style="background-color: ${n};">\n            <span class="color-value hidden-visually">${a?"Site Color":n}</span>\n          </div>\n          \n          <div class="color-picker-expanded" style="display: none;">\n            <div class="color-picker-tab-buttons">\n              <button type="button" class="tab-button ${a?"active":""}" data-tab="palette">Palette</button>\n              <button type="button" class="tab-button ${a?"":"active"}" data-tab="custom">Custom</button>\n            </div>\n            \n            <div class="color-picker-tab-content">\n              <div class="tab-panel ${a?"active":""}" data-panel="palette">\n                <div class="palette-swatches">\n                  <button type="button" class="color-swatch" data-for="${e.id}" data-color-var="hsla(var(--white-hsl), 1)" style="background-color: hsla(var(--white-hsl), 1);"></button>\n                  <button type="button" class="color-swatch" data-for="${e.id}" data-color-var="hsla(var(--lightAccent-hsl), 1)" style="background-color: hsla(var(--lightAccent-hsl), 1);"></button>\n                  <button type="button" class="color-swatch" data-for="${e.id}" data-color-var="hsla(var(--accent-hsl), 1)" style="background-color: hsla(var(--accent-hsl), 1);"></button>\n                  <button type="button" class="color-swatch" data-for="${e.id}" data-color-var="hsla(var(--darkAccent-hsl), 1)" style="background-color: hsla(var(--darkAccent-hsl), 1);"></button>\n                  <button type="button" class="color-swatch" data-for="${e.id}" data-color-var="hsla(var(--black-hsl), 1)" style="background-color: hsla(var(--black-hsl), 1);"></button>\n                </div>\n              </div>\n              \n              <div class="tab-panel ${a?"":"active"}" data-panel="custom">\n                <div class="color-input-container">\n                  <input type="color" id="${e.id}" name="${e.id}" value="${a?"#ffffff":n}" class="color-input" data-used-var="${a?n:""}">\n                  <input type="text" id="${e.id}-hex" value="${a?"#ffffff":n}" class="color-hex-input" data-color-for="${e.id}">\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        ${e.helpText?`<p class="setting-help">${e.helpText}</p>`:""}\n      </div>\n    `},renderNumberInput:function(e,t,o){const n=void 0!==t[e.id]?t[e.id]:e.default||0;return`\n      <div class="form-group ${o}">\n        <label for="${e.id}">${e.label}</label>\n        <input type="number" id="${e.id}" name="${e.id}" value="${n}" \n               min="${e.min||0}" max="${e.max||100}" step="${e.step||1}" class="setting-input">\n        ${e.helpText?`<p class="setting-help">${e.helpText}</p>`:""}\n      </div>\n    `},renderRadioGroup:function(e,t,o){const n=void 0!==t[e.id]?t[e.id]:e.default;return`\n      <div class="form-group ${o}">\n        <label class="group-label">${e.label}</label>\n        <div class="radio-group">\n          ${e.options.map((t=>`\n            <label class="radio-label">\n              <input type="radio" name="${e.id}" value="${t.value}" ${n===t.value?"checked":""}>\n              <span>${t.label}</span>\n            </label>\n          `)).join("")}\n        </div>\n        ${e.helpText?`<p class="setting-help">${e.helpText}</p>`:""}\n      </div>\n    `},renderSlider:function(e,t,o){const n=void 0!==t[e.id]?t[e.id]:e.default||0;return`\n      <div class="form-group ${o}">\n        <label for="${e.id}">${e.label}</label>\n        <div class="slider-container">\n          <input type="range" id="${e.id}" name="${e.id}" value="${n}" \n                 min="${e.min||0}" max="${e.max||100}" step="${e.step||1}" \n                 class="slider-input">\n          <span class="slider-value">${n}</span>\n        </div>\n        ${e.helpText?`<p class="setting-help">${e.helpText}</p>`:""}\n      </div>\n    `},renderCheckboxGroup:function(e,t,o){const n=void 0!==t[e.id]?t[e.id]:e.default||[];return`\n      <div class="form-group ${o}">\n        <label class="group-label">${e.label}</label>\n        <div class="checkbox-group">\n          ${e.options.map((t=>`\n            <label class="checkbox-label">\n              <input type="checkbox" name="${e.id}[]" value="${t.value}" \n                     ${n.includes(t.value)?"checked":""}>\n              <span>${t.label}</span>\n            </label>\n          `)).join("")}\n        </div>\n        ${e.helpText?`<p class="setting-help">${e.helpText}</p>`:""}\n      </div>\n    `},collectFormValues:function(e,t){console.log(`Collecting form values using schema with ${t.length} items`);let o=[];o=o.concat(t.filter((e=>"category"!==e.type))),t.filter((e=>"category"===e.type)).forEach((e=>{Array.isArray(e.components)&&(o=o.concat(e.components))})),console.log(`Total settings to collect: ${o.length}`);const n=document.getElementById("panel-content");return o.reduce(((e,t)=>{if("category"===t.type)return e;let o=n.querySelector(`#${t.id}`);if(o||(o=n.querySelector(`[name="${t.id}"]`)),!o)return console.log(`Element for setting ${t.id} not found, using default: ${t.default}`),e[t.id]=t.default,e;switch(t.type){case"custom":const a=activePanel;if(window.Dashboard&&window.Dashboard.CustomComponentDataRegistry){const o=window.Dashboard.CustomComponentDataRegistry.get(a,t.id);o&&(e[t.id]=o)}break;case"toggle":const l=!0===o.checked;console.log(`Toggle ${t.id} value: ${l} (raw checked: ${o.checked})`),e[t.id]=l;break;case"number":case"slider":const r=parseFloat(o.value);console.log(`Number/slider ${t.id} value: ${r}`),e[t.id]=r;break;case"radio":const c=n.querySelector(`[name="${t.id}"]:checked`),s=c?c.value:t.default;console.log(`Radio ${t.id} value: ${s}`),e[t.id]=s;break;case"checkbox-group":const i=n.querySelectorAll(`[name="${t.id}[]"]:checked`),d=Array.from(i).map((e=>e.value));console.log(`Checkbox group ${t.id} value: [${d.join(", ")}]`),e[t.id]=d;break;case"color":const u=o.getAttribute("data-used-var");u&&""!==u.trim()?(console.log(`Color ${t.id} value: ${u} (using CSS var)`),e[t.id]=u):(console.log(`Color ${t.id} value: ${o.value}`),e[t.id]=o.value);break;default:console.log(`Default ${t.id} value: ${o.value}`),e[t.id]=o.value}return e}),{})},extractAllSettings:function(e){const t=e.filter((e=>"category"!==e.type)),o=[];return e.filter((e=>"category"===e.type)).forEach((e=>{Array.isArray(e.components)&&o.push(...e.components)})),[...t,...o]},getValueForType:function(e,t){console.log(`Getting value for setting ${t.id} (type: ${t.type})`);let o=e.querySelector(`#${t.id}`);if(o||(o=e.querySelector(`[name="${t.id}"]`)),!o)return console.log(`Element for setting ${t.id} not found, using default: ${t.default}`),t.default;switch(t.type){case"toggle":const n=!0===o.checked;return console.log(`Toggle ${t.id} value: ${n} (raw checked: ${o.checked})`),n;case"number":case"slider":const a=parseFloat(o.value);return console.log(`Number/slider ${t.id} value: ${a}`),a;case"radio":const l=e.querySelector(`[name="${t.id}"]:checked`),r=l?l.value:t.default;return console.log(`Radio ${t.id} value: ${r}`),r;case"checkbox-group":const c=e.querySelectorAll(`[name="${t.id}[]"]:checked`),s=Array.from(c).map((e=>e.value));return console.log(`Checkbox group ${t.id} value: [${s.join(", ")}]`),s;case"color":const i=o.getAttribute("data-used-var");return i&&""!==i.trim()?(console.log(`Color ${t.id} value: ${i} (using CSS var)`),i):(console.log(`Color ${t.id} value: ${o.value}`),o.value);default:return console.log(`Default ${t.id} value: ${o.value}`),o.value}},bindEventHandlers:function(e,t,o){const n=e.querySelectorAll(".settings-tabs .tab-button");n.length>0&&n.forEach((t=>{t.addEventListener("click",(function(){e.querySelectorAll(".tab-button").forEach((e=>e.classList.remove("active"))),e.querySelectorAll(".tab-content").forEach((e=>e.classList.remove("active"))),t.classList.add("active");const o=t.getAttribute("data-tab");e.querySelector(`.tab-content[data-tab-content="${o}"]`).classList.add("active")}))}));t.filter((e=>"category"!==e.type)).forEach((t=>{const n=e.querySelector(`[name="${t.id}"]`);if(!n)return;if("color"===t.type){const a=e.querySelector(`#${t.id}-hex`),l=e.querySelector(`.color-picker-compact[data-setting-id="${t.id}"] .current-color-display`);l&&l.addEventListener("click",(()=>{const o=e.querySelector(`.color-picker-compact[data-setting-id="${t.id}"] .color-picker-expanded`);o&&(o.style.display="none"===o.style.display?"block":"none")}));e.querySelectorAll(`.color-picker-compact[data-setting-id="${t.id}"] .color-picker-tab-buttons .tab-button`).forEach((e=>{e.addEventListener("click",(e=>{const t=e.target.getAttribute("data-tab"),o=e.target.closest(".color-picker-compact");o.getAttribute("data-setting-id");o.querySelectorAll(".tab-button").forEach((e=>e.classList.remove("active"))),e.target.classList.add("active");if(o.querySelectorAll(".tab-panel").forEach((e=>{e.classList.toggle("active",e.getAttribute("data-panel")===t)})),"palette"===t);else{o.querySelectorAll(".color-swatch").forEach((e=>e.classList.remove("selected"))),n.setAttribute("data-used-var","")}}))}));return e.querySelectorAll('.color-swatch[data-for="'+t.id+'"]').forEach((t=>{t.addEventListener("click",(n=>{const a=n.target.getAttribute("data-color-var"),l=n.target.getAttribute("data-for"),r=e.querySelector(`#${l}`);e.querySelector(`#${l}-hex`);r.setAttribute("data-used-var",a);n.target.closest(".tab-panel").querySelectorAll(".color-swatch").forEach((e=>e.classList.remove("selected"))),t.classList.add("selected");const c=e.querySelector(`.color-picker-compact[data-setting-id="${l}"] .current-color-display`);c&&(c.style.backgroundColor=n.target.style.backgroundColor),o&&o(l,a)}))})),n.addEventListener("input",(l=>{n.setAttribute("data-used-var",""),a&&(a.value=l.target.value);l.target.closest(".color-picker-group").querySelectorAll(".color-swatch").forEach((e=>e.classList.remove("selected")));const r=e.querySelector(`.color-picker-compact[data-setting-id="${t.id}"] .current-color-display`);r&&(r.style.backgroundColor=l.target.value),o&&o(t.id,l.target.value)})),void(a&&a.addEventListener("input",(a=>{if(!a.target.value.startsWith("hsla(")&&/^#[0-9A-F]{6}$/i.test(a.target.value)){n.value=a.target.value,n.setAttribute("data-used-var","");a.target.closest(".color-picker-group").querySelectorAll(".color-swatch").forEach((e=>e.classList.remove("selected")));const l=e.querySelector(`.color-picker-compact[data-setting-id="${t.id}"] .current-color-display`);l&&(l.style.backgroundColor=a.target.value),o&&o(t.id,a.target.value)}})))}if("slider"===t.type){const n=e.querySelector(`#${t.id}`),a=n?.closest(".slider-container")?.querySelector(".slider-value");return void(n&&a&&n.addEventListener("input",(function(e){a.textContent=e.target.value,o&&o(t.id,parseFloat(e.target.value))})))}if("checkbox-group"===t.type){return void e.querySelectorAll(`[name="${t.id}[]"]`).forEach((n=>{n.addEventListener("change",(function(){const n=Array.from(e.querySelectorAll(`[name="${t.id}[]"]:checked`)).map((e=>e.value));o&&o(t.id,n)}))}))}if("custom"===t.type){const o=e.querySelector(`#${t.id}-container`);if(!o)return;const n=t.script;if(n&&!document.querySelector(`script[src="${n}"]`)){const e=document.createElement("script");e.src=n,e.onload=function(){console.log(`Custom component script loaded: ${n}`)},e.onerror=function(){console.error(`Failed to load custom component script: ${n}`),o&&(o.innerHTML='\n          <div class="error-message">\n            <p>Failed to load component. Please check the console for details.</p>\n          </div>\n        ')},document.head.appendChild(e)}}const a="toggle"===t.type?"change":"input";n.addEventListener(a,(n=>{const a=this.getValueForType(e,t);o&&o(t.id,a)}))}))}};